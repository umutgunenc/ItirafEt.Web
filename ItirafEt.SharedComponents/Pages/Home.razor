@page "/"


@inject AuthStateProvider AuthStateProvider
@inject ICategoryApi CategoryApi
@inject IPostApi PostApi
@inject IDateTimeHelperService DateTimeHelperService
@inject NavigationManager NavigationManager

@* <PageTitle>Home</PageTitle>



<h1>Hello, world! </h1>

Welcome to your new app.


<AuthorizeView>
	<Authorizing>
		<p>Authorizing....</p>
	</Authorizing>
	<NotAuthorized>
		<p>Anonim User..</p>
	</NotAuthorized>
	<Authorized>
		<p>Authorized : @context.User.Claims.FirstOrDefault(c=>c.Type == ClaimTypes.Name)?.Value</p>
		<p>@AuthStateProvider.User?.userName</p>
		<p>@AuthStateProvider.User?.id</p>
		<p>@AuthStateProvider.User?.roleId</p>
	</Authorized>
</AuthorizeView> *@

@if (_apiBusy)
{
	<div class="text-center my-4">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Yükleniyor...</span>
		</div>
@* 		<p class="mt-3">Yükleniyor, lütfen bekleyiniz...</p>
 *@	</div>
}
else if (!string.IsNullOrWhiteSpace(_errorMessage))
{
	<div class="alert alert-danger mt-4" role="alert">
		@_errorMessage
	</div>
}
else
{
	<div class="text-center mt-3 mb-4">
		<h1 class="fw-bold text-danger">İtiraf Et 😶‍🌫️</h1>
		<p class="text-muted">İçindekileri paylaş, anonim kal.</p>
		<button class="btn-custom-red" @onclick=MavigateToCreatePost><i class="bi bi-pen me-2"></i>İtiraf Et</button>
	</div>

	<div class="d-flex flex-wrap justify-content-center gap-2 mb-4">
		@foreach (var categoryButton in _categoryButtonsModel)
		{
			<button class="btn-custom" @onclick="() => NavigateToCategory(categoryButton.Id)"><i class="@categoryButton.Icon me-2"></i> @categoryButton.CategoryName</button>
		}

	</div>

	<div id="itirafCarousel" class="carousel slide mb-4 px-lg-2" data-bs-ride="carousel">
		<div class="carousel-indicators">

			@for (int i = 0; i < _postHearderModel.Count; i++)
			{
				<button type="button"
						data-bs-target="#itirafCarousel"
						data-bs-slide-to="@i"
						class="@(i == 0 ? "active" : "")"
						aria-current="@(i == 0 ? "true" : "false")"
						aria-label="@(i + 1)">
				</button>

			}

		</div>

		<div class="carousel-inner rounded shadow-sm">

			@foreach (var item in _postHearderModel)
			{
				<div class="carousel-item @(_postHearderModel.FirstOrDefault().Id ==item.Id  ? "active" : "") bg-dark-subtle p-5">
					<p class="lead mb-0 fst-italic text-center"
					   @onclick="() => NavigateToPost(item.Id)"
					   style="cursor:pointer">
						"@item.Title"
					</p>
				</div>
			}
		</div>

		<button class="carousel-control-prev" type="button" data-bs-target="#itirafCarousel" data-bs-slide="prev">
			<span class="carousel-control-prev-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Önceki</span>
		</button>
		<button class="carousel-control-next" type="button" data-bs-target="#itirafCarousel" data-bs-slide="next">
			<span class="carousel-control-next-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Sonraki</span>
		</button>
	</div>


	<div class="row g-4 m-0">

		@foreach (var post in _posts)
		{
			<div class="col-12 col-lg-6 p-0 px-lg-2 m-0 mt-3">
				<div class="card shadow-hover text-bg-light" role="button" @onclick="() => NavigateToPost(post.PostId)">
					<div class="card-body">
						<div class="d-flex justify-content-end align-items-end mb-3"><small class="text-muted">@post.PostCreatedDate.ToString("dd MMM yyyy HH:mm")</small></div>

						<h5 class="card-title text-bg text-truncate mb-3">@post.PostTitle</h5>

						<p class="card-text text-secondary mb-3"
						   style="display: -webkit-box;
								-webkit-line-clamp: 4;
								-webkit-box-orient: vertical;
								overflow: hidden;
								text-overflow: ellipsis;
								line-height: 1.5rem;
								max-height: calc(1.5rem * 4);
								min-height: calc(1.5rem * 4); ">
							@post.PostContentReview
						</p>

						<div class="d-flex justify-content-between align-items-center">
							<div class="d-flex align-items-center">
								<img src="@(String.IsNullOrEmpty(post.PostCreatorProfilPicture) ? "/anonymousIcon.png" : post.PostCreatorProfilPicture)"
									 alt="Profil Resmi"
									 class="profile-photo rounded-circle me-2"
									 style="width:48px;height:48px; cursor:default;"
									 @onclick:preventDefault="true"
									 @onclick:stopPropagation="true">
								<span class="text-dark fw-medium">@post.PostCreatorUserName</span>
							</div>
							<div class="d-flex gap-3">
								<span class="text-muted">
									<i class="bi bi-eye me-1"></i>@post.PostViewCount
								</span>
								<span class="text-muted">
									<i class="bi bi-heart me-1"></i>@post.PostLikeCount
								</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div class="text-center my-3">
		<div class="d-lg-inline-block bg-light rounded p-3 shadow-sm">
			<p class="mb-1 text-muted small">Toplam itiraf sayısı</p>
			<h4 class="fw-bold text-danger">@(_totalPostCount?.ToString("N0", new System.Globalization.CultureInfo("tr-TR")) ?? "0")</h4>
		</div>
	</div>
}



@code {

	private List<CategoryButtonInfoViewModel> _categoryButtonsModel = new();
	private List<PostHeaderViewModel> _postHearderModel = new();
	private List<PostInfoViewModel> _posts = new();
	private string _errorMessage = string.Empty;
	private string _userTimeZone = string.Empty;
	private bool _apiBusy = false;
	private int? _totalPostCount;


	protected override async Task OnInitializedAsync()
	{
		await GetUserTimeZoneAsync();
		await LoadCategoriesAsync();
		await GetFiveRandomPostHeaderAsync();
		await GetPostsAsync();
		await GetTotalPostCountAsync();

		await InvokeAsync(StateHasChanged);
	}

	private async Task LoadCategoriesAsync()
	{
		_apiBusy = true;
		await InvokeAsync(StateHasChanged);
		try
		{
			var response = await CategoryApi.GetTopFiveCategoryInfoAsync();
			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_categoryButtonsModel = response.Data;
				_errorMessage = string.Empty;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_apiBusy = false;
		}

	}

	private async Task GetFiveRandomPostHeaderAsync()
	{
		_apiBusy = true;
		try
		{
			var response = await PostApi.GetFiveRandomPostHeaderAsync();
			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_postHearderModel = response.Data;
				_errorMessage = string.Empty;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_apiBusy = false;
		}
	}

	private async Task GetPostsAsync()
	{
		_apiBusy = true;
		try
		{
			var response = await PostApi.GetEightRandomPostAsync();
			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_posts = response.Data;
				_errorMessage = string.Empty;

				foreach (var post in _posts)
				{
					post.PostCreatedDate = ToLocal(post.PostCreatedDate, _userTimeZone);
				}
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_apiBusy = false;
		}
	}

	private async Task GetTotalPostCountAsync()
	{
		_apiBusy = true;
		try
		{
			var response = await PostApi.GetActivePostCountAsync();
			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_totalPostCount = response.Data;
				_errorMessage = string.Empty;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_apiBusy = false;
		}
	}

	private void NavigateToCategory(int categoryId)
	{
		NavigationManager.NavigateTo($"/categories/{categoryId}");
	}

	private void NavigateToPost(int postId)
	{
		NavigationManager.NavigateTo($"/posts/{postId}");
	}

	private async Task GetUserTimeZoneAsync()
	{
		_userTimeZone = await DateTimeHelperService.GetUserTimeZoneIdAsync();
		_userTimeZone ??= "UTC";
	}

	private DateTime ToLocal(DateTime utcTime, string timeZone)
	{
		return DateTimeHelperService.ToLocal(utcTime, timeZone);
	}

	private void MavigateToCreatePost()
	{
		if (AuthStateProvider.IsLoggedIn)
			NavigationManager.NavigateTo("/posts/createPosts");
		else
			NavigationManager.NavigateTo("/login?returnUrl=/posts/createPosts");
	}

}