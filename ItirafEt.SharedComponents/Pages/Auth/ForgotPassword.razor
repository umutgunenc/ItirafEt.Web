@page "/forgot-password"

@inject IAuthApi AuthApi



<div class="mt-3">
	<h1 class="text-center h3">Şifremi Unuttum</h1>
</div>
<hr />

<EditForm Model="_forgotPaswordViewModel"
		  OnValidSubmit="SendResetEmailAsync">
	<DataAnnotationsValidator />



	<div class="my-3 form-floating">
		<InputText @bind-Value="_forgotPaswordViewModel.UserNameOrEmailAdres" class="form-control" placeholder="" id="userName" />
		<label for="userName">Kullanıcı Adı veya Email Adresi</label>

		<ValidationMessage For="()=> _forgotPaswordViewModel.UserNameOrEmailAdres" />
	</div>

	<div class="d-grid mb-3">
		@if (!_isBusy)
		{
			<button type="submit" class="btn-custom-orange col-lg" disabled="@(_isSuccess)">Şifremi Unuttum <i class="bi bi-question-lg"></i> </button>
		}
		else
		{
			<button class="btn-custom-orange col-lg" type="button" disabled>
				<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
				İşleminiz Devam Ediyor...
			</button>
		}
	</div>



</EditForm>
@if (_errorMessage != null)
{
	<div class="mb-3 text-bg-danger text-white p-2 rounded">
		<p class="mb-0">@_errorMessage</p>
	</div>
}
@if (_successMessage != null)
{
	<div class="mb-3 text-bg-success text-white p-2 rounded">
		<p class="mb-0">@_successMessage</p>
	</div>
}


@code {

	private ForgotPaswordViewModel _forgotPaswordViewModel = new();
	private bool _isBusy = false;
	private bool _isSuccess = false;
	private string? _errorMessage;
	private string? _successMessage;
	private async Task SendResetEmailAsync()
	{
		if (String.IsNullOrEmpty(_forgotPaswordViewModel.UserNameOrEmailAdres))
			return;
		_isBusy = true;
		_errorMessage = null;
		_successMessage = null;
		try
		{
			var response = await AuthApi.ForgotPasswordAsync(_forgotPaswordViewModel);
			if (response.IsSuccess)
			{
				_successMessage = "Mail adresinize gönderilen bağlantı üzerinden şifrenizi yenileyebilirisiz.";
				_forgotPaswordViewModel = new();
				_isSuccess = true;
			}
			else
				_errorMessage = response.ErrorMessage;

		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
			await InvokeAsync(StateHasChanged);
		}

	}
}