@page "/login"

@using Microsoft.AspNetCore.WebUtilities

@* @layout AuthLayout
 *@
@inject IAuthApi AuthApi
@inject NavigationManager NavigationManager
@inject AuthStateProvider AuthStateProvider


<div class="py-5">
	<div class="row mx-0">
		<div class="col-lg-8 mx-auto my-auto border shadow-lg p-4 rounded bg-light">

			<div class="mt-3">
				<h1 class="text-center h3">Giriş Yap</h1>
			</div>
			<hr />

			<EditForm Model="_model"
					  OnValidSubmit="LoginAsync">
				<DataAnnotationsValidator />

				<div class="my-3">
					<label class="form-label">Kullanıcı Adı veya E-Mail Adresi: </label>
					<InputText @bind-Value="_model.EmailOrUserName" class="form-control" />
					<ValidationMessage For="()=> _model.EmailOrUserName" />
				</div>
				<div class="my-3">
					<label class="form-label">Şifre: </label>
					<div class="input-group">

						<InputText @bind-Value="_model.Password"
								   class="form-control"
								   type="@(_showPassword ? "text" : "password")" />
						<button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
							<i class="@(_showPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
						</button>
					</div>
					<ValidationMessage For="()=> _model.Password" />

				</div>

				@if (_errorMessage != null)
				{
					<div class="mb-3 text-bg-danger text-white p-2">
						<p>@_errorMessage</p>
					</div>

				}

				<div class="row mb-3 mx-auto">
					@if (!_isBusy)
					{
						<div class="d-flex flex-column flex-lg-row justify-content-between gap-2 p-0">
							<button type="submit" class="btn-custom col-lg">Giriş Yap  <i class="bi bi-box-arrow-in-right"></i> </button>
							<button type="button" class="btn-custom-orange col-lg" @onclick="NavigateToForgotPassword">Şifremi Unuttum <i class="bi bi-question-lg"></i> </button>
						</div>
					}
					else
					{
						<div class="d-flex flex-column flex-lg-row justify-content-between gap-2 p-0">

							<button class="btn-custom col-lg" type="button" disabled>
								<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
								Giriş Yapılıyor Lütfen Bekleyiniz
							</button>
							<button type="button" class="btn-custom-orange col-lg" @onclick="NavigateToForgotPassword">Şifremi Unuttum <i class="bi bi-question-lg" disabled></i> </button>
						</div>
					}

				</div>
			</EditForm>
			<hr />

			<div class="row mb-3 mx-auto">
				<button type="button" class="btn btn-google">
					<i class="bi bi-google"></i> Google İle Giriş Yap
				</button>

			</div>
			<div class="row mb-3 mx-auto">
				<button type="button" class="btn btn-facebook">
					<i class="bi bi-facebook"></i> Facebook İle Giriş Yap
				</button>
			</div>
		</div>
	</div>
</div>




@code {
	private LoginViewModel _model = new();
	private bool _isBusy;
	private bool _showPassword;
	private string? _errorMessage;
	private string? _returnUrl;


	protected override void OnInitialized()
	{
		var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
		var query = QueryHelpers.ParseQuery(uri.Query);
		if (query.TryGetValue("returnUrl", out var returnUrlValues))
		{
			_returnUrl = returnUrlValues;
		}

		if (AuthStateProvider.IsLoggedIn)
			NavigationManager.NavigateTo(_returnUrl ?? "/", replace: true);

	}

	private async Task LoginAsync()
	{
		if (_isBusy)
			return;
		_errorMessage = null;
		_isBusy = true;
		try
		{
			var authResponse = await AuthApi.LoginAsync(_model);
			if (authResponse.HasError)
			{
				_errorMessage = authResponse.ErrorMessage;
				return;
			}

			var loggedInUser = authResponse.User;
			await AuthStateProvider.SetLoginAsync(loggedInUser);
			NavigationManager.NavigateTo(_returnUrl ?? "/");
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
		}
	}

	private void TogglePasswordVisibility()
	{
		_showPassword = !_showPassword;
	}

	private void NavigateToForgotPassword()
	{
		NavigationManager.NavigateTo("/forgot-password");
	}
}
