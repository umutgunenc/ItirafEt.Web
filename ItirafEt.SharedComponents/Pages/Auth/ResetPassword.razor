@page "/reset-password"

@inject IAuthApi AuthApi
@inject NavigationManager NavigationManager



			<div class="mt-3">
				<h1 class="text-center h3">Şifremi Yenile</h1>
			</div>
			<hr />

			<EditForm Model="_changeUserPasswordViewModel"
			OnValidSubmit="ChangePasswordAsync">
				<DataAnnotationsValidator />

				<div class="my-3">
					<label class="form-label">Yeni Şifreniz: </label>
					<div class="input-group">

						<InputText @bind-Value="_changeUserPasswordViewModel.NewPassword"
						class="form-control"
						type="@(_showPassword ? "text" : "password")" />
						<button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
							<i class="@(_showPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
						</button>
					</div>
					<ValidationMessage For="()=> _changeUserPasswordViewModel.NewPassword" />
				</div>

				<div class="my-3">
					<label class="form-label">Yeni Şifre Tekrarı: </label>
					<div class="input-group">

						<InputText @bind-Value="_changeUserPasswordViewModel.NewPasswordConfirm"
						class="form-control"
						type="@(_showPasswordConfirm ? "text" : "password")" />
						<button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordConfirmVisibility">
							<i class="@(_showPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
						</button>
					</div>
					<ValidationMessage For="()=> _changeUserPasswordViewModel.NewPasswordConfirm" />
				</div>

				<div class="d-grid mb-3">
					@if (!_isBusy)
					{
										<button type="submit" class="btn-custom col-lg" disabled="@(_isSuccess)">Şifremi Yenile <i class="bi bi-arrow-clockwise"></i> </button>
					}
					else
					{
										<button class="btn-custom col-lg" type="button" disabled>
											<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
											İşleminiz Devam Ediyor...
										</button>
					}
				</div>

			</EditForm>

			@if (_errorMessage != null)
			{
								<div class="mb-3 text-bg-danger text-white p-2 rounded">
									<p class="mb-0">@_errorMessage</p>
								</div>
			}
			@if (_successMessage != null)
			{
					<div class="bg-success-subtle text-dark p-2 rounded text-center shadow-sm">
					<h5 class="mb-2">✅ İşlem Başarılı</h5>
					<p class="mb-1">@_successMessage</p>
					<p class="m-0 small">Birazdan giriş sayfasına yönlendirileceksiniz...</p>
				</div>
			}

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "userId")]
	public string UserId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "token")]
	public string Token { get; set; }


	private ChangeUserPasswordViewModel _changeUserPasswordViewModel = new();
	private bool _showPassword = false;
	private bool _showPasswordConfirm = false;
	private bool _isBusy = false;
	private bool _isSuccess = false;

	private string? _errorMessage;
	private string? _successMessage;
	private Guid _userId;

	private async Task ChangePasswordAsync()
	{
		if (_isBusy)
			return;

		_isBusy = true;
		_errorMessage = null;
		_successMessage = null;

		_changeUserPasswordViewModel.UserId = Guid.TryParse(UserId, out _userId) ? _userId : Guid.Empty;
		_changeUserPasswordViewModel.Token = Token;

		try
		{
			var response = await AuthApi.ChangeUserPasswordAsync(_changeUserPasswordViewModel);

			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_successMessage = "Şifreniz başarıyla değiştirildi.";
				_isSuccess = true;
				await InvokeAsync(StateHasChanged);
				await Task.Delay(3000);
				NavigateToLogin();
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
			await InvokeAsync(StateHasChanged);
		}

	}
	private void TogglePasswordConfirmVisibility()
	{
		_showPasswordConfirm = !_showPasswordConfirm;
	}
	private void TogglePasswordVisibility()
	{
		_showPassword = !_showPassword;
	}

	private void NavigateToLogin()
	{
		NavigationManager.NavigateTo("/login");
	}
}
