@page "/activate"
@inject IUserSettingApi UserSettingApi
@inject NavigationManager NavigationManager

<div class="py-5">
	<div class="row mx-0">
		<div class="col-lg-8 mx-auto my-auto border shadow-lg p-4 rounded bg-light">
			<div class="mt-3">
				<h1 class="text-center h3">Hesap Aktifleştirme</h1>
			</div>
			<hr />

			@if (_isBusy)
			{
				<div class="text-center my-4">
					<div class="spinner-border text-primary" role="status">
						<span class="visually-hidden">Yükleniyor...</span>
					</div>
					<p class="mt-3">Hesabınız aktifleştiriliyor, lütfen bekleyiniz...</p>
				</div>
			}
			else if (!string.IsNullOrWhiteSpace(_errorMessage))
			{
				<div class="alert alert-danger" role="alert">
					@_errorMessage
				</div>
			}
			else if (!string.IsNullOrWhiteSpace(_successMessage))
			{
				<div class="">
					<p>@((MarkupString)_successMessage)</p>
					<div class="text-center mt-3">
						<button class="btn-custom d-flex align-items-center justify-content-center gap-2 col-12" @onclick="NavigateToLogin">
							<i class="bi bi-person-circle fs-5"></i>
							<span>Girişe Git</span>
						</button>
					</div>
				</div>

			}
		</div>
	</div>
</div>

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "userId")]
	public string UserId { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "token")]
	public string Token { get; set; }

	private UserDeactiveViewModel _model = new();

	private bool _isBusy = false;
	private bool _isSuccess = false;
	private string? _errorMessage;
	private Guid _userId;
	private string? _successMessage;

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrWhiteSpace(UserId) || string.IsNullOrWhiteSpace(Token))
		{
			_errorMessage = "Geçersiz işlem.";
			return;
		}


		_userId = Guid.TryParse(UserId, out _userId) ? _userId : Guid.Empty;

		if (_userId == Guid.Empty)
		{
			_errorMessage = "Geçersiz işlem.";
			return;
		}
		await ActivateUserAsync();
	}

	private async Task ActivateUserAsync()
	{
		if (_isBusy)
			return;
		_isBusy = true;
		_errorMessage = null;
		_successMessage = null;

		try
		{
			var response = await UserSettingApi.UserActivateAsync(_userId, Token);
			if (!response.IsSuccess)
				_errorMessage = response.ErrorMessage;
			else
			{
				_successMessage = $"{response.Data}, seni yeniden aramızda görmekten çok mutluyuz.<br/>Hesabınız başarıyla aktifleştirildi.";
				_isSuccess = true;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
		}

	}
	private void NavigateToLogin()
	{
		NavigationManager.NavigateTo("/login");
	}

}
