@page "/categories/{CategoryId:int}"
@using ItirafEt.Shared.Models


@inject ICategoryApi CategoryApi
@inject NavigationManager NavigationManager
@inject InfiniteScrollState<PostInfoViewModel> State
@inject ILocalStorageService LocalStorage
@inject IScrollHelper ScrollHelper
@inject IJSRuntime JSRuntime
@inject IStorageService StorageService
@inject ISignalRService SignalRService
@implements IAsyncDisposable



@if (_isError)
{
	<div class="alert alert-danger m-3" role="alert">
		@_errorMessage
	</div>
}
else
{
	<h3 class="text-center m-0 mt-4">@_categoryName?.ToUpper()</h3>
	<div class="btn-group btn-group-sm w-100 my-4 flex-nowrap" role="group" aria-label="Sıralama Seçenekleri">
		<input type="radio"
			   class="btn-check"
			   name="orderOptions"
			   id="orderByDate"
			   autocomplete="off"
			   @onchange="() => SetOrderAsync(true, false, false)"
			   checked="@_isDateOrdered" />
		<label class="btn btn-modern-order rounded-start-3 px-2 px-sm-3 py-2" for="orderByDate">
			<i class="bi bi-clock fs-5 me-0 me-sm-2"></i>
			<span class="fw-medium d-none d-sm-inline">En Yeniler</span>
		</label>

		<input type="radio"
			   class="btn-check"
			   name="orderOptions"
			   id="orderByView"
			   autocomplete="off"
			   @onchange="() => SetOrderAsync(false, true, false)"
			   checked="@_isCountOrdered" />
		<label class="btn btn-modern-order px-2 px-sm-3 py-2" for="orderByView">
			<i class="bi bi-eye fs-5 me-0 me-sm-2"></i>
			<span class="fw-medium d-none d-sm-inline">En Çok Okunanlar</span>
		</label>

		<input type="radio"
			   class="btn-check"
			   name="orderOptions"
			   id="orderByLike"
			   autocomplete="off"
			   @onchange="() => SetOrderAsync(false, false, true)"
			   checked="@_isLikeOrdered" />
		<label class="btn btn-modern-order rounded-end-3 px-2 px-sm-3 py-2" for="orderByLike">
			<i class="bi bi-heart fs-5 me-0 me-sm-2"></i>
			<span class="fw-medium d-none d-sm-inline">En Çok Beğenilenler</span>
		</label>
	</div>

	if (State.Items != null)
	{
		foreach (var post in State.Items)
		{
			<div class="card mb-3 shadow-hover text-bg-light" role="button" @onclick="@(() => NavigateToPost(post.PostId))">
				<div class="card-body ">
					<div class="d-flex justify-content-end align-items-end mb-3">
						<small class="text-muted">@post.PostCreatedDate.ToString("dd MMM yyyy HH:mm")</small>
					</div>

					<h5 class="card-title text-bg text-break mb-3">@post.PostTitle</h5>

					<p class="card-text text-secondary text-break mb-4">@post.PostContentReview</p>

					<div class="d-flex justify-content-between align-items-center">
						<div class="d-flex align-items-center">
							<img src="@(string.IsNullOrEmpty(post.PostCreatorProfilPicture)? "/anonymousIcon.png" : post.PostCreatorProfilPicture)"
								 alt="Profil Resmi"
								 class="profile-photo rounded-circle me-2"
								 style="width:48px;height:48px; cursor:default;"
								 @onclick:preventDefault="true"
								 @onclick:stopPropagation="true">
							<span class="text-dark fw-medium">@post.PostCreatorUserName</span>
						</div>
						<div class="d-flex gap-3">
							<span class="text-muted">
								<i class="bi bi-eye me-1"></i>@post.PostViewCount
							</span>
							<span class="text-muted">
								<i class="bi bi-heart me-1"></i>@post.PostLikeCount
							</span>
						</div>
					</div>
				</div>
			</div>
		}
	}

	@if (_isLoading)
	{
		<div class="d-flex justify-content-center align-items-center" style="height: 20vh;">
			<div class="spinner-border text-primary fs-5" role="status" style="width: 3rem; height: 3rem;">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>
	}
	else if (!State.HasMore)
	{
		<p class="text-center text-muted">@_errorMessage</p>
	}
}




@code {
	[Parameter] public int CategoryId { get; set; }

	private HubConnection? _postViewHubConnection;
	private HubConnection? _reactionHubConnection;
	private CancellationTokenSource _cts = new();
	private int _pageSize = 10;
	private bool _isLoading = false;
	private bool _isError = false;
	private bool _isDateOrdered;
	private bool _isCountOrdered;
	private bool _isLikeOrdered;
	private string? _errorMessage = null;
	private string? _categoryName;
	private bool _hasRestoredScroll = false;


	protected override async Task OnParametersSetAsync()
	{
		ResetParameters();

		await StartPostViewHubConnectionAsync();
		await StartReactionHubConnectionAsync();

		var cachedItems = await StorageService.GetItemAsync<List<PostInfoViewModel>>($"cat-{CategoryId}-items", false);
		var cachedCursor = await StorageService.GetItemAsync<CursorViewModel>($"cat-{CategoryId}-cursor", false);

		if (cachedItems?.Any() == true && cachedCursor != null)
			await GetItemsFromCacheAsync(cachedItems, cachedCursor);
		else
		{
			_isDateOrdered = true;
			_isCountOrdered = false;
			_isLikeOrdered = false;
			await LoadMorePostsAsync();
			await GetCategoryNameAsync();
			await SetCategoryNameToLocalStorageAsync();
		}

	}


	private async void ResetParameters()
	{
		ResetCache();
		await DisposeAsync();
		_isError = false;
		_errorMessage = null;
		_cts?.Dispose();
		_cts = new();
	}

	private async Task GetItemsFromCacheAsync(List<PostInfoViewModel> postInfoModels, CursorViewModel cursorDto)
	{
		if (postInfoModels is null)
		{
			throw new ArgumentNullException(nameof(postInfoModels));
		}

		State.Items = postInfoModels;
		State.CurrentPage = cursorDto.Page;
		State.ScrollY = cursorDto.ScrollY;
		await ScrollHelper.SetScrollYAsync(State.ScrollY);



		_isDateOrdered = await StorageService.GetItemAsync<bool>($"cat-{CategoryId}-dateOrdered",false);
		_isCountOrdered = await StorageService.GetItemAsync<bool>($"cat-{CategoryId}-countOrdered",false);
		_isLikeOrdered = await StorageService.GetItemAsync<bool>($"cat-{CategoryId}-likeOrdered", false);
		_categoryName = await StorageService.GetItemAsync<string?>($"cat-{CategoryId}-categoryName", false);
	}
	private async Task SetItemsToCacheAsync()
	{
		var scrollY = await ScrollHelper.GetScrollYAsync();
		State.ScrollY = scrollY;
		await StorageService.SetItemAsync($"cat-{CategoryId}-items", State.Items, false);
		var cursor = new CursorViewModel { Page = State.CurrentPage, ScrollY = scrollY };



		await StorageService.SetItemAsync($"cat-{CategoryId}-cursor", cursor, false);
		await StorageService.SetItemAsync<bool>($"cat-{CategoryId}-dateOrdered", _isDateOrdered, false);
		await StorageService.SetItemAsync<bool>($"cat-{CategoryId}-countOrdered", _isCountOrdered, false);
		await StorageService.SetItemAsync<bool>($"cat-{CategoryId}-likeOrdered", _isLikeOrdered, false);
	}
	private void ResetCache()
	{
		State.Items.Clear();
		State.CurrentPage = 1;
		State.HasMore = true;
		State.ScrollY = 0;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		var dotNetRef = DotNetObjectReference.Create(this);
		await JSRuntime.InvokeVoidAsync("addScrollListener", dotNetRef);


		if (State.ScrollY > 0 && !_hasRestoredScroll)
		{
			_hasRestoredScroll = true;
			await JSRuntime.InvokeVoidAsync("scrollHelper.setScrollY", State.ScrollY);
		}
	}


	[JSInvokable]
	public async Task OnScrollToBottom()
	{
		await LoadMorePostsAsync();
	}

	[JSInvokable]
	public Task OnScroll(double scrollY)
	{
		State.ScrollY = scrollY;
		return Task.CompletedTask;
	}

	private Task<ApiResponses<List<PostInfoViewModel>>> GetPostsPageAsync()
	{
		if (_isDateOrdered)
			return CategoryApi.GetCategoryPostsOrderByDateAsync(CategoryId, State.CurrentPage, _pageSize);
		else if (_isCountOrdered)
			return CategoryApi.GetCategoryPostsOrderByViewCountAsync(CategoryId, State.CurrentPage, _pageSize);
		else
			return CategoryApi.GetCategoryPostsOrderByLikeCountAsync(CategoryId, State.CurrentPage, _pageSize);
	}

	private async Task LoadMorePostsAsync()
	{
		if (_isLoading || !State.HasMore) return;
		_isLoading = true;
		_errorMessage = null;

		try
		{
			var response = await GetPostsPageAsync();
			if (response?.IsSuccess == true && response.Data?.Any() == true)
			{

				State.Items.AddRange(response.Data);
				State.CurrentPage++;

				await SetItemsToCacheAsync();
			}
			else
			{
				State.HasMore = false;
				_errorMessage = response?.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
			State.HasMore = false;
		}

		_isLoading = false;
		await InvokeAsync(StateHasChanged);
	}

	private async Task NavigateToPost(int postId)
	{
		await SetItemsToCacheAsync();

		NavigationManager.NavigateTo($"/posts/{postId}");
	}

	private async Task StartPostViewHubConnectionAsync()
	{
		try
		{
			if (_cts.IsCancellationRequested)
				return;

			_postViewHubConnection = await SignalRService.ConfigureHubConnectionAsync(HubType.PostView, PageType.Category);

			if (_cts.IsCancellationRequested)
				return;

			_postViewHubConnection.On<int>("UpdatePostViewCountAsync", async updatedPostId =>
			{
				await UpdateViewCountAsync(updatedPostId);
				await InvokeAsync(StateHasChanged);

			});

			if (_cts.IsCancellationRequested)
				return;
			await _postViewHubConnection.StartAsync(_cts.Token);
			await _postViewHubConnection.SendAsync("JoinCategoryPostViewCountGroup", CategoryId, _cts.Token);
		}

		catch (OperationCanceledException)
		{
			return;
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Categories Hub Start Error: {ex.Message}");
		}
	}


	private async Task StartReactionHubConnectionAsync()
	{
		try
		{
			if (_cts.IsCancellationRequested)
				return;

			_reactionHubConnection = await SignalRService.ConfigureHubConnectionAsync(HubType.Reaction, PageType.Category);

			if (_cts.IsCancellationRequested)
				return;
			_reactionHubConnection.On<int, int>("UpdatePostLikeCountAsync", async (postId, likeCount) =>
			{
				await UpdateReactionsAsync(postId, likeCount);
				await InvokeAsync(StateHasChanged);

			});
			if (_cts.IsCancellationRequested)
				return;
			await _reactionHubConnection.StartAsync(_cts.Token);
			await _reactionHubConnection.SendAsync("JoinCategoryPostReactionGroup", CategoryId, _cts.Token);
		}
		catch (OperationCanceledException)
		{
			return;
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.error", $"Categories Hub Start Error: {ex.Message}");
		}

	}

	private async Task SetOrderAsync(bool orderByDate, bool orderByViewCount, bool orderByLikeCount)
	{
		_isDateOrdered = orderByDate;
		_isCountOrdered = orderByViewCount;
		_isLikeOrdered = orderByLikeCount;
		ResetCache();

		await StorageService.RemoveItemAsync($"cat-{CategoryId}-items", false);
		await StorageService.RemoveItemAsync($"cat-{CategoryId}-cursor", false);
		await LoadMorePostsAsync();
	}

	private async Task GetCategoryNameAsync()
	{
		try
		{
			var response = await CategoryApi.GetCategoryNameAsync(CategoryId);
			if (response?.IsSuccess == true)
				_categoryName = response.Data;
			else
			{
				_isError = true;
				_errorMessage = response?.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}

	}

	private async Task SetCategoryNameToLocalStorageAsync()
	{
		await StorageService.SetItemAsync($"cat-{CategoryId}-categoryName", _categoryName, false);
	}

	private async Task UpdateReactionsAsync(int postId, int likeCount)
	{

		foreach (var post in State.Items)
		{
			if (post.PostId == postId)
			{
				post.PostLikeCount = likeCount;
				break;
			}
		}

		await UpdateCacheAsync();

	}

	private async Task UpdateViewCountAsync(int postId)
	{

		foreach (var post in State.Items)
		{
			if (post.PostId == postId)
			{
				post.PostViewCount = post.PostViewCount + 1;
				break;
			}
		}

		await UpdateCacheAsync();

	}

	private async Task UpdateCacheAsync()
	{
		await StorageService.RemoveItemAsync($"cat-{CategoryId}-items",false);
		await StorageService.SetItemAsync($"cat-{CategoryId}-items", State.Items,false);
	}


	public async ValueTask DisposeAsync()
	{
		_cts.Cancel();
		if (_postViewHubConnection is not null)
		{
			if (_postViewHubConnection.State == HubConnectionState.Connected)
				await SignalRService.StopAsync(PageType.Category, HubType.PostView);
			await SignalRService.DisposeAsync(PageType.Category, HubType.PostView);
			_postViewHubConnection = null;
		}

		if (_reactionHubConnection is not null)
		{
			if (_reactionHubConnection.State == HubConnectionState.Connected)
				await SignalRService.StopAsync(PageType.Category, HubType.Reaction);
			await SignalRService.DisposeAsync(PageType.Category, HubType.Reaction);
			_reactionHubConnection = null;
		}

	}
}