@page "/conversations/{ConversationId:guid}"



@inject NavigationManager NavigationManager
@inject IMessageApi MessageApi
@inject AuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject ISignalRService SignalRService
@inject InboxService InboxService
@inject IDateTimeHelperService DateTimeHelperService
@inject IDeviceService DeviceService
@implements IAsyncDisposable


@if (_isLoading)
{
	<div class="d-flex justify-content-center align-items-center"
		 style="height:75vh">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}
else if (_isError)
{
	<div class="col-lg-7 mx-auto py-5">
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	</div>

}
else
{
	<div class="chat-container col-lg-7 mx-auto">
		<!-- Header -->
		<div class="chat-header d-flex align-items-center">
			<div class="position-relative me-3">
				<img src="@(string.IsNullOrEmpty(_conversationDto?.ResponderUser.ProfilePictureUrl) ? "/anonymousIcon.png" : _conversationDto.ResponderUser.ProfilePictureUrl)"
					 class="profile-photo rounded-circle"
					 width="56"
					 height="56"
					 style="object-fit: cover; border: 2px solid #ffffff; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"
					 alt="Profile Resmi">
			</div>
			<div>
				<h5 class="mb-0" style="cursor:pointer" @onclick="NavigateToUserProfile">@_conversationDto?.ResponderUser.UserName</h5>
				@* <small class="text-muted">Çevrimiçi</small> *@
			</div>
		</div>

		<!-- Mesajlar -->

		<div class="chat-messages bg-light-subtle reverse" @ref="_messagesDiv" id="messageDiv">
			@if (_model?.Model?.Items != null)
			{
				@foreach (var message in _model.Model.Items)
				{
					var isMine = message.SenderId == _currentUserId;
					var baseClass = isMine ? "message-out" : "message-in bg-primary-subtle";
					var fullClass = $"{baseClass} chat-message d-flex flex-column";

					<div id="message-@message.Id" class="d-flex flex-column @fullClass">
						@if (!string.IsNullOrEmpty(message.PhotoId))
						{
							<div class="message-photo mb-2">

								@if (!string.IsNullOrEmpty(message.SignedThumbnailUrl))
								{
									<img src="@($"{ApiBaseUrl.BaseUrl}/api/message/thumbnail?token={message.SignedThumbnailUrl}")"
										 alt="Thumbnail"
										 style="max-width:150px; border-radius:10px; cursor:pointer"
										 @onclick="async () => await ShowFullImage(message)" />
								}
								else
								{
									<span>Yükleniyor...</span>
								}

							</div>
						}

						<div class="message-content" style="white-space:pre-line">@message.Content</div>

						<div class="message-meta d-flex justify-content-between align-items-end mt-1">
							<small class="message-time pe-3 @(isMine ? "text-white-50" : "text-muted")">
								@if (message.CreatedDate.Date < DateTime.Now.Date)
								{
									@message.CreatedDate.ToString("dd MMMM yyyy HH:mm")
								}
								else
								{
									@message.CreatedDate.ToString("HH:mm")
								}
							</small>

							@if (isMine)
							{
								<div class="read-status">
									@if (message.IsRead)
									{
										<i class="bi bi-check2-all text-white"></i>
									}
									else
									{
										<i class="bi bi-check2"></i>
									}
								</div>
							}
						</div>
					</div>
				}
			}

		</div>

		<div class="message-input p-3">

			<div class="chat-composer d-flex align-items-end">

				<!-- Sol: Fotoğraf butonu -->
				<div class="me-3">
					<InputFile id="uploadPhoto"
							   accept="image/*"
							   style="display: none;"
							   OnChange="OnFileSelected" />

					<label for="uploadPhoto"
						   class="btn-custom-circle"
						   style="cursor: pointer;">
						<i class="bi bi-image text-white"></i>
					</label>
				</div>

				<textarea id="@ChatInputId"
						  @ref="_messageInput"
						  class="form-control message-textarea @(_isSendMessageBusy ?"bg-secondary" : "bg-primary") bg-opacity-10 border border-primary p-2 border-opacity-25"
						  placeholder="Bir mesaj yazın..."
						  @bind="_messageDto.Content"
						  disabled="@_isSendMessageBusy"
						  rows="1" />
				<!-- Sağ: Gönder butonu -->
				<div class="ms-3">
					<button class="btn-custom-circle"
							@onclick="async () => await SendMessageAsync(_messageDto)"
							disabled="@_isSendMessageBusy">

						@if (_isSendMessageBusy)
						{
							<div class="spinner-border spinner-border-sm text-white" role="status">
								<span class="visually-hidden">Gönderiliyor...</span>
							</div>
						}
						else
						{
							<i class="bi bi-send-check text-white"></i>
						}
					</button>
				</div>
			</div>

			@if (_messageErrorMessage != null)
			{
				<div class="text-danger mx-2 my-2">
					@_messageErrorMessage
				</div>
			}

		</div>
	</div>
}

<ModalComponent @ref="_sendPhotoModal"
				Title="Fotoğraf Gönder"
				TitleClass="d-none"
				HeaderClass="d-none my-0"
				FooterClass="modal-footer mb-3 px-md-5 px-1 d-none"
				ChildClass="modal-body px-md-5 p-0 d-flex flex-column h-100">
	<ChildContent>
		<div class="d-flex flex-column h-100">
			<!-- Image container with dynamic sizing -->
			<div class="flex-grow-1 d-flex justify-content-center align-items-center"
				 style="min-height:0; overflow:hidden; background-color:#030303">
				<img src="@_previewImageUrl"
					 class="w-100"
					 style="max-height:100%; max-width:100%; object-fit:contain" />
			</div>

			<div class="message-input p-3">

				<div class="chat-composer d-flex align-items-end">

					<textarea id="@ChatInputWithPhotoId"
							  @ref="_messageInputWithPhoto"
							  class="form-control message-textarea @(_isSendMessageBusy ?"bg-secondary" : "bg-primary") bg-opacity-10 border border-primary p-2 border-opacity-25"
							  placeholder="Bir mesaj yazın..."
							  @bind="_messageDto.Content"
							  disabled="@_isSendMessageBusy"
							  rows="1" />
					<!-- Sağ: Gönder butonu -->
					<div class="ms-3">
						<button class="btn-custom-circle"
								disabled="@_isSendMessageBusy"
								@onclick="async () => await SendMessageWithPhotoAsync(_messageDto)">

							@if (_isSendMessageBusy)
							{
								<div class="spinner-border spinner-border-sm text-white" role="status">
									<span class="visually-hidden">Gönderiliyor...</span>
								</div>
							}
							else
							{
								<i class="bi bi-send-check text-white"></i>
							}
						</button>
					</div>
					<button class="btn-custom-red-circle ms-3"
							@onclick="_sendPhotoModal.Close">
						<i class="bi bi-x-lg text-white"></i>
					</button>
				</div>

				@if (_messageErrorMessage != null)
				{
					<div class="text-danger mx-2 my-2">
						@_messageErrorMessage
					</div>
				}

			</div>
		</div>
	</ChildContent>
</ModalComponent>

<ModalComponent @ref="_showPhotoModal"
				TitleClass="d-none"
				HeaderClass="d-none my-0"
				FooterClass="d-none"
				ChildClass="modal-body p-0 d-flex flex-column h-100">
	<ChildContent>
		<div class="d-flex flex-column h-100">

			<!-- Fotoğraf Alanı -->
			<div class="flex-grow-1 d-flex justify-content-center align-items-center bg-dark"
				 style="min-height:0; overflow:hidden;">
				@if (!string.IsNullOrEmpty(_selectedPhotoUrl))
				{
					<img src="@_selectedPhotoUrl"
						 class="w-100"
						 style="max-height:100%; max-width:100%; object-fit:contain;"
						 @onclick="_showPhotoModal.Close" />
				}
				else
				{
					<div class="text-white">Fotoğraf yükleniyor...</div>
				}
			</div>
		</div>
	</ChildContent>
</ModalComponent>

@code {

	[Parameter]
	public Guid ConversationId { get; set; }
	private ElementReference _messagesDiv;
	private ElementReference _messageInput;
	private ElementReference _messageInputWithPhoto;
	private DotNetObjectReference<Conversation>? _dotNetRef;
	private IBrowserFile? _selectedFile;
	private IBrowserFile? _selectedFileThumbnail;
	private string? _previewImageUrl;
	private string? _selectedPhotoUrl;
	private Dictionary<string, string> _thumbnails = new();
	private Dictionary<string, string> _photos = new();
	private ModalComponent _sendPhotoModal = new ModalComponent();
	private ModalComponent _showPhotoModal = new ModalComponent();
	private ConversationViewModel? _conversationDto;
	private GetConversationMessageViewModel _model = new();
	private CreateMessageViewModel _messageDto = new();
	private HubConnection? _hubConnection;
	private string? _errorMessage;
	private string? _messageErrorMessage;
	private bool _isError = false;
	private bool _isLoading = true;
	private bool _canUserReadMessage = true;
	private bool _hasScrolled = false;
	private bool _shouldPreserveScroll = false;
	private bool _isApiBusy = false;
	private bool _isSendMessageBusy = false;
	private Guid _currentUserId;
	private string _userTimeZoneId = string.Empty;
	private bool _isMobile;
	private const string ChatInputId = "chatInputBox";
	private const string ChatInputWithPhotoId = "chatInputBoxWithPhoto";


	protected override async Task OnParametersSetAsync()
	{
		GetCurrentUserId();
		_userTimeZoneId = await DateTimeHelperService.GetUserTimeZoneIdAsync();
		await CanUserReadMessageAsync(ConversationId, _currentUserId);
		if (_canUserReadMessage)
		{
			await GetConversationAsync();
			await GetConversationMessagesAsync();
			await StartHubConnection();
			await ReadAllMessageAsync();
		}

	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (_model.Model?.Items?.Any() == true)
		{
			if (!_hasScrolled)
			{
				_hasScrolled = true;
				await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottom", _messagesDiv);
			}

			_dotNetRef ??= DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("chatScrollHelper.setupInfiniteScroll", "messageDiv", _dotNetRef, 150);
		}

		if (firstRender)
		{
			_isMobile = await DeviceService.IsMobileAsync();
			_dotNetRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("chatInput.init", ChatInputId, _isMobile, _dotNetRef);
			await JSRuntime.InvokeVoidAsync("chatInputWithPhoto.init", ChatInputWithPhotoId, _isMobile, _dotNetRef);
		}

	}

	private async Task GetConversationMessagesAsync()
	{
		try
		{
			if (_model.Model == null)
				_model.Model = new();
			var response = await MessageApi.GetConversationMessagesAsync(_model);
			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
				return;
			}
			else
			{
				_model.Model = response.Data;
				foreach (var message in _model.Model.Items)
				{
					message.CreatedDate = ToLocalTime(message.CreatedDate);
				}

				_isLoading = false;
			}

		}
		catch (Exception)
		{

			throw;
		}
	}

	private async Task ReadAllMessageAsync()
	{
		var items = _model.Model?.Items;
		if (items != null && items.Count != 0)
		{
			foreach (var message in items)
			{
				await ReadMessageAsync(message);
			}
			await InboxService.UpdateInboxItemsAfterUnreadMessageReadedAsync(ConversationId);
			await InboxService.NotifyMessageReadedAsync();
		}


	}
	private async Task ReadMessageAsync(MessageViewModel message)
	{

		if (message.IsRead)
			return;
		if (message.SenderId == _currentUserId)
			return;

		try
		{
			_isApiBusy = true;

			var result = await MessageApi.ReadMessageAsync(message.ConversationId, message);
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
			throw;
		}
		finally
		{
			_isApiBusy = false;
		}
	}
	private async Task SendMessageAsync(CreateMessageViewModel messageDto)
	{
		if (_isSendMessageBusy)
			return;


		if (string.IsNullOrWhiteSpace(messageDto.Content))
			return;

		_messageErrorMessage = null;
		_isSendMessageBusy = true;
		var newMessage = new CreateMessageViewModel()
			{
				Content = messageDto.Content,
				SenderId = _currentUserId.ToString(),
				ConversationId = ConversationId.ToString(),
				ReceiverId = _conversationDto?.ResponderUser.UserId.ToString()
			};
		messageDto.Content = "Mesajınız Gönderiliyor...";
		await InvokeAsync(StateHasChanged);
		try
		{
			var response = await MessageApi.SendMessageAsync(newMessage);

			if (!response.IsSuccess)
			{
				_isError = true;
				_messageErrorMessage = response.ErrorMessage;
				return;
			}
			// await Task.Delay(100);
			// await InvokeAsync(StateHasChanged);

		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}
		finally
		{

			await ResizeChatTextArea();
			await InvokeAsync(StateHasChanged);

		}
	}
	private async Task SendMessageWithPhotoAsync(CreateMessageViewModel messageDto)
	{
		if (_isSendMessageBusy)
			return;

		if (_selectedFile == null)
		{
			_sendPhotoModal.Close();
			_messageErrorMessage = "Lütfen bir fotoğraf seçin.";
			return;
		}

		_isSendMessageBusy = true;
		var messageContent = messageDto.Content;
		_messageDto.Content = "Mesajınız Gönderiliyor...";
		await InvokeAsync(StateHasChanged);

		try
		{
			var streamFile = _selectedFile.OpenReadStream(_selectedFile.Size); 
			var photoPart = new Refit.StreamPart(streamFile, _selectedFile.Name, _selectedFile.ContentType);

			Refit.StreamPart? thumbPart = null;
			if (_selectedFileThumbnail is not null)
			{
				var thumbFile = _selectedFileThumbnail.OpenReadStream(_selectedFileThumbnail.Size);
				thumbPart = new Refit.StreamPart(thumbFile, _selectedFileThumbnail.Name, _selectedFileThumbnail.ContentType);
			}


			var response = await MessageApi.SendMessageWithPhotoAsync(ConversationId.ToString(), messageContent, _currentUserId.ToString(), _conversationDto.ResponderUser.UserId.ToString(), photoPart, thumbPart);

			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
				return;
			}
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}
		finally
		{
			await ResizeChatPhotoTextArea();
			await InvokeAsync(StateHasChanged);
			_selectedFile = null;
			_selectedFileThumbnail = null;
		}

	}

	[JSInvokable("SendMessageFromJs")]
	public async Task SendMessageFromJs(string mesaj)
	{
		_messageDto.Content = mesaj;
		await SendMessageAsync(_messageDto);
	}


	[JSInvokable("SendMessagemWithPhotoFromJs")]
	public async Task SendMessagemWithPhotoFromJs(string mesaj)
	{
		_messageDto.Content = mesaj;
		await SendMessageWithPhotoAsync(_messageDto);
	}

	private async Task ResizeChatTextArea()
	{
		await JSRuntime.InvokeVoidAsync("chatInput.reset", ChatInputId);
	}

	private async Task ResizeChatPhotoTextArea()
	{
		await JSRuntime.InvokeVoidAsync("chatInputWithPhoto.reset", ChatInputId);
	}

	private async Task OnFileSelected(InputFileChangeEventArgs e)
	{
		_selectedPhotoUrl = string.Empty;
		var file = e.File;

		if (file == null)
			return;

		if (file.Size > 10 * 1024 * 1024)
		{
			_messageErrorMessage = "Dosya boyutu 10 MB'dan büyük olamaz.";
			await InvokeAsync(StateHasChanged);
			return;
		}
		_sendPhotoModal.Open();

		var allowedExtFormats = new[] { ".jpg", ".jpeg", ".png", ".bmp", ".gif", ".webp" };
		var ext = Path.GetExtension(file.Name).ToLowerInvariant();

		if (!allowedExtFormats.Contains(ext))
		{
			_messageErrorMessage = "Sadece .jpg, .jpeg, .png, .bmp, .gif, .webp formatları desteklenmektedir.";
			await InvokeAsync(StateHasChanged);
			return;
		}

		if (ext != ".gif" && ext != ".webp")
		{
			// GIF ve WEBP formatları için thumbnail oluşturma
			_selectedFileThumbnail = await file.RequestImageFileAsync("image/png", 150, 150);
			_selectedFile = await file.RequestImageFileAsync("image/png", 1280, 1280);
		}
		else
		{
			_selectedFile = file;
			_selectedFileThumbnail = null;
		}


		_messageErrorMessage = null;

		using var ms = new MemoryStream();
		await _selectedFile.OpenReadStream(_selectedFile.Size).CopyToAsync(ms);
		// await _selectedFileThumbnail.OpenReadStream(_selectedFileThumbnail.Size).CopyToAsync(ms);

		var bytes = ms.ToArray();
		_previewImageUrl = $"data:{_selectedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";

		await InvokeAsync(StateHasChanged);

	}
	private async Task StartHubConnection()
	{

		_hubConnection = SignalRService.ConfigureHubConnection(HubConstants.HubType.Message);

		_hubConnection.On<Guid, MessageViewModel>("SendMessageAsync", async (conversationId, messageDto) =>
		{
			await AddMessageAsync(messageDto);
			await ReadMessageAsync(messageDto);
		});

		_hubConnection.On<Guid, MessageViewModel>("ReadMessageAsync", async (conversationId, messageDto) =>
		{

			var message = _model.Model.Items.FirstOrDefault(m => m.Id == messageDto.Id);

			message.IsRead = messageDto.IsRead;
			message.ReadDate = messageDto.ReadDate;

			await InvokeAsync(StateHasChanged);

		});


		await _hubConnection.StartAsync();
		await _hubConnection.SendAsync("JoinMessageGroup", ConversationId);
	}

	private async Task CanUserReadMessageAsync(Guid conversationId, Guid userId)
	{
		var result = await MessageApi.CanUserReadMessageApiAsync(conversationId, userId);
		try
		{
			if (!result.IsSuccess)
			{
				_isLoading = false;
				_canUserReadMessage = false;
				_isError = true;
				_errorMessage = result.ErrorMessage;
				return;
			}
		}
		catch (Exception)
		{
			_isLoading = false;
			_isError = true;
			_errorMessage = result.ErrorMessage;
		}

	}
	private async Task GetConversationAsync()
	{
		_errorMessage = null;
		_isError = false;
		_isLoading = true;
		try
		{
			var result = await MessageApi.GetConversationAsync(ConversationId, _currentUserId);

			if (!result.IsSuccess)
			{
				_isError = true;
				_isLoading = false;
				_errorMessage = result.ErrorMessage;
				return;
			}
			_conversationDto = result.Data;
			_isLoading = false;
			_model.ConversationId = ConversationId;
			_model.ResponderUserId = result.Data.ResponderUser.UserId;

			await InvokeAsync(async () =>
			{
				await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottom", _messagesDiv);
			});
		}
		catch (Exception ex)
		{
			_isError = true;
			_isLoading = false;
			_errorMessage = ex.Message;
		}
	}
	private async Task AddMessageAsync(MessageViewModel newMessage)
	{
		if (_model.Model == null || _model.Model.Items == null || !_model.Model.Items.Any())
			_model.Model = new InfiniteScrollState<MessageViewModel>();

		newMessage.CreatedDate = ToLocalTime(newMessage.CreatedDate);
		var tempList = _model.Model.Items.ToList();
		tempList.Insert(0, newMessage);
		_model.Model.Items = tempList;



		await InvokeAsync(StateHasChanged);
		_sendPhotoModal.Close();
		await Task.Delay(100);
		await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottomIfNeeded", _messagesDiv);

		_previewImageUrl = string.Empty;
		_messageDto.Content = string.Empty;
		_isSendMessageBusy = false;
		_errorMessage = null;
		_messageErrorMessage = null;
		await InvokeAsync(StateHasChanged);

		if (!_isMobile)
		{
			await InvokeAsync(async () =>
			{
				await Task.Delay(100); // DOM güncellensin
				await _messageInput.FocusAsync();
			});
		}



	}
	public async ValueTask DisposeAsync()
	{
		_dotNetRef?.Dispose();

		if (_hubConnection != null)
		{
			await _hubConnection.StopAsync();
			await _hubConnection.DisposeAsync();
		}
	}

	[JSInvokable("OnScrollToTopAsync")]
	public async Task OnScrollToTopAsync()
	{
		if (_model.Model.HasMore && !_isApiBusy && _model.Model?.Items?.Count >= PageItemSize.Size && _model.Model.NextBefore.HasValue)
		{
			_isApiBusy = true;
			try
			{
				var response = await MessageApi.GetConversationMessagesAsync(_model);
				if (response.IsSuccess)
				{

					var tempList = _model.Model.Items.ToList();
					tempList.AddRange(response.Data.Items);
					_model.Model.Items = tempList;
					_model.Model.NextBefore = response.Data.NextBefore;
					_model.Model.LastId = response.Data.LastId;
					_model.Model.HasMore = response.Data.HasMore;

					_shouldPreserveScroll = true;

					foreach (var message in response.Data.Items)
					{
						await ReadMessageAsync(message);
					}
					await InvokeAsync(StateHasChanged);

				}
				else
				{
					_isError = true;
					_errorMessage = response.ErrorMessage;
				}
			}
			catch (Exception ex)
			{
				_isError = true;
				_errorMessage = ex.Message;
			}
			finally
			{
				_isApiBusy = false;
			}
		}
	}


	private void GetCurrentUserId()
	{
		_currentUserId = Guid.TryParse(AuthStateProvider.User?.id, out var g) ? g : Guid.Empty;
	}
	private void NavigateToUserProfile()
	{
		NavigationManager.NavigateTo($"/profile/{_conversationDto.ResponderUser.UserId}");
	}
	private DateTime ToLocalTime(DateTime utc)
	{
		return DateTimeHelperService.ToLocal(utc, _userTimeZoneId);
	}
	private DateTime ToUTC(DateTime date)
	{
		return DateTimeHelperService.ToUtc(date, _userTimeZoneId);
	}

	private async Task ShowFullImage(MessageViewModel message)
	{
		try
		{
			var response = await MessageApi.GetSignedPhotoUrlAsync(message.PhotoId, _currentUserId);

			if (response.IsSuccess)
			{
				_selectedPhotoUrl = $"{ApiBaseUrl.BaseUrl}/api/message/photo?token={response.Data}";
				_showPhotoModal.Open();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			throw;
		}

	}

}