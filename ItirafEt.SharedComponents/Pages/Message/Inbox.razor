@page "/inbox"

@inject IMessageApi MessageApi
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject InboxService InboxService
@inject SignalRInboxService SignalRInboxService
@inject IStorageService StorageService
@inject IDateTimeHelperService DateTimeHelperService
@implements IAsyncDisposable


<div class="col-lg-8 col mx-auto py-5">

	@if (_isError)
	{
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
		<div class="list-group">
			
			@foreach (var inboxItem in _inboxItems)
			{

				<a @onclick="()=>NavigateToConversation(inboxItem.ConversationId)" class="list-group-item list-group-item-action d-flex gap-3 py-3" aria-current="true" style="cursor:pointer">
					<img src="@(string.IsNullOrEmpty(inboxItem.SenderUserProfileImageUrl) ? "/anonymousIcon.png" : inboxItem.SenderUserProfileImageUrl)" alt="" width="56" height="56" class="rounded-circle flex-shrink-0 profile-photo" @onclick:stopPropagation="true" style="cursor:auto">

					<div class="d-flex gap-2 w-100 justify-content-between">
						<div>
							<h6 class="mb-2">
								@inboxItem.SenderUserUserName
								@if (inboxItem.UnreadMessageCount > 0)
								{
									<span class="badge bg-danger ms-2">@inboxItem.UnreadMessageCount</span>
								}
							</h6>
							<p class="mb-0 opacity-75">
								@if (string.IsNullOrWhiteSpace(inboxItem.LastMessagePrewiew))
								{
									<span style="position: relative; top: -2px;">📷</span>
									<span>Fotoğraf</span>
								}
								else
								{
									@(inboxItem.LastMessagePrewiew.Length > 20
																? inboxItem.LastMessagePrewiew.Substring(0, 20) + "..."
																: inboxItem.LastMessagePrewiew)
								}
							</p>
						</div>
						<small class="opacity-50 text-nowrap">@GetTimeText(inboxItem.LastMessageDate)</small>
					</div>
				</a>
			}
		</div>
	}
</div>


@code {

	private Guid _currentUserId;
	private List<InboxItemViewModel>? _inboxItems = new();
	private bool _isError = false;
	private string? _errorMessage;
	private string _userTimeZoneId = string.Empty;
	private System.Timers.Timer? _timer;


	protected override async Task OnInitializedAsync()
	{
		GetUserId();
		try
		{
			_userTimeZoneId = await DateTimeHelperService.GetUserTimeZoneIdAsync();
		}
		catch (Exception)
		{
			_userTimeZoneId = "UTC";
		}

		await SignalRInboxService.InitializeAsync(_currentUserId);
		await GetUserMessagesAsync();

		InboxService.MessageReaded -= RefreshInbox;
		InboxService.NewMessageRecived -= RefreshInbox;
		InboxService.NewMessageRecivedInInboxPage -= RefreshInbox;

		InboxService.MessageReaded += RefreshInbox;
		InboxService.NewMessageRecived += RefreshInbox;
		InboxService.NewMessageRecivedInInboxPage += RefreshInbox;
		StartTimer(); 

		await InvokeAsync(StateHasChanged);
	}

	private async Task RefreshInbox()
	{
		_inboxItems = await InboxService.GetUserConversationsAsync();
		await InboxService.RemoveConversationsFromLocalStorageAsync();
		_inboxItems.Sort((a, b) => b.LastMessageDate.CompareTo(a.LastMessageDate));
		await InvokeAsync(StateHasChanged);
		await InboxService.SetUserConversationsToLocalStorageAsync(_inboxItems);

	}
	private void GetUserId()
	{
		if (Guid.TryParse(AuthStateProvider.User?.id, out Guid parsedId))
			_currentUserId = parsedId;
	}
	private async Task GetUserMessagesAsync()
	{
		await InboxService.InitializeAsync(_currentUserId);

		if (InboxService._haveError)
		{
			_isError = true;
			_errorMessage = InboxService._errorMessage;
		}
		else
		{
			_isError = false;
			_inboxItems = await InboxService.GetUserConversationsAsync();
			_inboxItems?.Sort((a, b) => b.LastMessageDate.CompareTo(a.LastMessageDate));
			await InboxService.RemoveConversationsFromLocalStorageAsync();
			await InboxService.SetUserConversationsToLocalStorageAsync(_inboxItems);

		}
	}

	private void NavigateToConversation(Guid conversationId)
	{
		NavigationManager.NavigateTo($"/conversations/{conversationId}");
	}

	public async ValueTask DisposeAsync()
	{
		InboxService.MessageReaded -= RefreshInbox;
		InboxService.NewMessageRecived -= RefreshInbox;
		InboxService.NewMessageRecivedInInboxPage -= RefreshInbox;
		_timer?.Dispose();
		await SignalRInboxService.DisposeAsync();
	}

	private DateTime ToLocalTime(DateTime date)
	{
		return DateTimeHelperService.ToLocal(date, _userTimeZoneId);
	}

	private void StartTimer()
	{
		_timer = new System.Timers.Timer(60000);
		_timer.Elapsed += async (sender, args) =>
		{
			await InvokeAsync(StateHasChanged); 
		};
		_timer.AutoReset = true;
		_timer.Start();
	}

	private string GetTimeText(DateTime utcDate)
	{
		var localDate = ToLocalTime(utcDate); 
		var diff = DateTime.Now - localDate;

		if (diff.TotalMinutes < 1)
			return "şimdi";
		if (diff.TotalMinutes < 60)
			return $"{(int)diff.TotalMinutes} dk önce";
		if (diff.TotalHours < 24)
			return $"{(int)diff.TotalHours} saat önce";
		return localDate.ToString("dd MMMM yyyy");
	}

}