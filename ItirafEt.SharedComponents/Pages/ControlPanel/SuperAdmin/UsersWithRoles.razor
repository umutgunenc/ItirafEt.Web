@* @page "/admin/usersWithRoles"
@inject IUserRoleApi UserRoleApi






@code {
	private bool _isBusy = false;
	private string? _errorMessage = null;
	private List<string> _userRoles = new();
	private string _selectedRole = string.Empty;
	private List<UsersWithRolesViewModel> _usersWithRolesViewModels = new();

	protected override async Task OnInitializedAsync()
	{
		await GetRolesAsync();
	}

	private async Task GetRolesAsync()
	{
		try
		{
			var response = await UserRoleApi.GetAllRolesAsync();
			if (!response.IsSuccess)
			{
				_errorMessage = response.ErrorMessage;
				return;
			}
			else
			{
				_userRoles = response.Data;
				_errorMessage = null;
			}

		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
	}
	private async Task GetUserWithRole(){

		try
		{
			var respone = await UserRoleApi.GetUsersWithRolesAsync(_selectedRole);
			if (!respone.IsSuccess)
			{
				_errorMessage = respone.ErrorMessage;
				return;
			}
			else
			{
				_usersWithRolesViewModels = respone.Data;
				_errorMessage = null;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}

	}
}
 *@


@page "/admin/usersWithRoles"
@inject IUserRoleApi UserRoleApi

<div class="bg-light" style="min-height: calc(100vh - 56px);">
	<div class="row mx-0">
		<div class="col-lg-8 mx-auto my-auto p-4 ">
			<h3>Kullanıcı Rolleri Yönetimi</h3>


			<div class="mb-3">
				<div class="form-check">
					<input class="form-check-input"
					type="radio"
					name="showOption"
					id="showAll"
					checked="@_options.ShowAll"
					@onchange="() => _options.ShowAll = true" />
					<label class="form-check-label" for="showAll">Tüm Kayıtları Göster</label>
				</div>

				<div class="form-check">
					<input class="form-check-input"
					type="radio"
					name="showOption"
					id="showLatest"
					checked="@(!_options.ShowAll)"
					@onchange="() => _options.ShowAll = false" />
					<label class="form-check-label" for="showLatest">Mevcut Rolleri Göster</label>
				</div>
			</div>

			<div class="my-3">
				<label class="form-label">Kullanıcı Adı</label>
				<InputText @bind-Value="_options.SearchedUserName" class="form-control" />
			</div>


			<div class="mb-3">
				<label class="form-label">Rol Seç:</label>
				<div class="">
					@foreach (var role in _userRoles)
					{
						<div class="form-check">
							<input class="form-check-input"
							type="radio"
							name="roles"
							id="@role"
							value="@role"
							@onchange="() => _options.SelectedRoleName = role" />
							<label class="form-check-label" for="@role">@role</label>
						</div>
					}
				</div>
			</div>

			<div class="mb-3">
				<button class="btn-custom col-12" disabled="@_isBusy" @onclick="async () => await  SearchAsync()">Ara</button>
			</div>

			@if (_isThereAnyRecord && string.IsNullOrEmpty(_errorMessage))
			{


				<div class="table-responsive">
					<table class="table table-light table-hover">
						<thead>
							<tr>
								<th scope="col">Kullanıcı Adı</th>
								<th scope="col">Görevi</th>
								<th scope="col">Görev Başlangıç</th>
								<th scope="col">Görev Bitiş</th>
								<th scope="col">Görev Sonlanma</th>
								<th scope="col">Admin</th>
							</tr>
						</thead>
						<tbody>
							@if (_options.Items.Count != 0)
							{
								@foreach (var item in _options.Items)
								{
									<tr>
										<td>@item.UserName</td>
										<td>@item.RoleName</td>
										<td>@item.AssignedDate</td>
										<td>@item.RevokedDate</td>
										<td>@item.ExpireDate</td>
										<td>@item.AssignedByUserName</td>
									</tr>
								}
							}
						</tbody>
					</table>
				</div>

				<div class="mt-3">

					<nav aria-label="Page navigation example">
						<ul class="pagination justify-content-end mb-0">
							<li class="page-item"
							hidden="@( _options.CurrentPage == 1 )"
							style="cursor:pointer">
								<a class="page-link mb-0" @onclick="() => GoToPageAsync(1)">İlk</a>
							</li>
							@foreach (var p in GetPageNumbers())
							{
								<li class="page-item @(p == _options.CurrentPage ? "disabled" : "")"
								style="@(p != _options.CurrentPage ? "cursor: pointer;" : "")"
								@onclick=" async () => {
															if (p != _options.CurrentPage)
															{
																await GoToPageAsync(p);
															}
														}">
									<p class="page-link mb-0">@p</p>
								</li>
							}
							<li class="page-item"
							hidden="@( _options.CurrentPage == _options.TotalPages )"
							@onclick="() => GoToPageAsync(_options.TotalPages)"
							style="cursor:pointer">
								<a class="page-link mb-0">Son</a>
							</li>
						</ul>
					</nav>

				</div>

			}
			else
			{
				<p class="text-center">Kayıt Bulunamadı</p>
			}
			@if (!string.IsNullOrEmpty(_errorMessage))
			{
					<div class="alert alert-danger" role="alert">
					@_errorMessage
					</div>
			}


		</div>
	</div>
</div>

@code {
	private bool _isBusy = false;
	private bool _isThereAnyRecord = false;
	private string? _errorMessage = null;
	private List<string> _userRoles = new();
	private SelectOptionForUserWithRoleViewModel _options = new()
		{
			CurrentPage = 1,
			PageSize = 10,
			ShowAll = true,
			SearchedUserName = string.Empty,
			SelectedRoleName = "Hepsi"
		};


	private string _sortColumn = string.Empty;
	private bool _sortAscending = true;

	protected override async Task OnInitializedAsync()
	{
		await GetRolesAsync();

	}

	private async Task GetRolesAsync()
	{
		try
		{
			var response = await UserRoleApi.GetAllRolesAsync();
			if (!response.IsSuccess)
			{
				_errorMessage = response.ErrorMessage;
				return;
			}
			_userRoles = response.Data;
			_userRoles.Insert(0, "Hepsi");
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
	}

	private async Task SearchAsync()
	{
		_isBusy = true;
		_errorMessage = null;
		try
		{
			var response = await UserRoleApi.GetUsersWithRolesAsync(_options);
			if (!response.IsSuccess)
			{
				_errorMessage = response.ErrorMessage;
				return;
			}
			else
				_options = response.Data;

		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
			_isThereAnyRecord = _options.Items.Count > 0;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task GoToPageAsync(int page)
	{
		if (page < 1 || page > _options.TotalPages)
			return;
		PageNumber.AdminUsersPageNo = page;
		_options.CurrentPage = PageNumber.AdminUsersPageNo;
		await SearchAsync();
		await InvokeAsync(StateHasChanged);

	}

	private IEnumerable<int> GetPageNumbers()
	{
		if (_options.TotalPages <= 3)
			return Enumerable.Range(1, _options.TotalPages);

		if (_options.CurrentPage == 1)
			return Enumerable.Range(1, 3);

		if (_options.CurrentPage == _options.TotalPages)
			return Enumerable.Range(_options.TotalPages - 2, 3);

		return Enumerable.Range(_options.CurrentPage - 1, 3);

	}


}
