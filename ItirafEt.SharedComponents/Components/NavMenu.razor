@using ItirafEt.Shared.Models
@inherits LayoutComponentBase
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ICategoryApi CategoryApi
@inject IJSRuntime JSRuntime
@inject InboxService InboxService
@inject IMessageApi MessageApi
@inject ISignalRService SignalRServiceBase
@implements IAsyncDisposable



@* <nav class="navbar navbar-expand-lg navbar-light fixed-top py-lg-0 blue">
	<div class="container-fluid">
		<a class="navbar-brand text-white fw-bold" href="/">ItirafEt</a>

		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain"
		aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
			<span class="navbar-toggler-icon @(_isHaveUnreadMessages ?"text-danger":"")" style="filter: invert(1);"></span>
		</button>

		<div class="collapse navbar-collapse mt-lg-0 mt-3" id="navbarMain">
			<ul class="navbar-nav ms-auto d-flex align-items-lg-center gap-3 me-4">
				<!-- Kategoriler -->
				<li class="nav-item dropdown order-lg-1">
					<a class="nav-link dropdown-toggle text-white d-flex align-items-center gap-1" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						<i class="bi bi-folder2-open fs-5 "></i> <span class="ms-2">Kategoriler</span>
					</a>
					<ul class="dropdown-menu border-0 shadow-lg" style="background: rgba(75, 108, 183, 0.9); backdrop-filter: blur(10px);">
						@if (_categories != null)
						{
							@foreach (var category in _categories)
							{
								<li>
									<NavLink class="dropdown-item py-2" href=@($"/categories/{category.Id}") @onclick="CollapseMenuAsync">
										<div class="d-flex align-items-center gap-2">
											<span class="@category.CategoryIconUrl d-inline-flex align-items-center text-white" style="font-size: 1.4rem"></span>
											<span class="fs-6 text-white">@category.CategoryName <small>(@category.PostCount)</small></span>
										</div>
									</NavLink>
								</li>
							}
						}
					</ul>
				</li>

				<li class="order-lg-2">
					<AuthorizeView Context="Adminastor">
						<Authorized>
							<AuthorizeView Roles="@allowedRoles">
								<li class="nav-item d-lg-block">
									<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/admin/adminastorPanel" @onclick="CollapseMenuAsync">
										<i class="bi bi-speedometer fs-5"></i> Yönetim
									</NavLink>
								</li>
							</AuthorizeView>
						</Authorized>
					</AuthorizeView>
				</li>
				<li class="order-lg-2">
					<AuthorizeView Context="LoggedInContext">
						<Authorized>

							<li class="nav-item dropdown">
								<a class="nav-link dropdown-toggle text-white d-flex align-items-center gap-1" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
									<i class="@(_isHaveUnreadMessages ? "bi bi-person-fill-check" : "bi  bi-person-check") fs-5" style="@(_isHaveUnreadMessages ? "transition : 2s; color: red;" : "transition : 2s;")"></i>
									<span class="ms-2">@AuthStateProvider.User?.userName.ToUpper()</span>
								</a>
								<ul class="dropdown-menu border-0 shadow-lg" style="background: rgba(75, 108, 183, 0.9); backdrop-filter: blur(10px);">
									<li>
										<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="posts/createPosts" @onclick="CollapseMenuAsync">
											<i class="bi bi-pen"></i>
											<span>İtiraf Et</span>
										</NavLink>
									</li>
									<li>
										<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="/inbox" @onclick="CollapseMenuAsync">
											<i class="@(_isHaveUnreadMessages ?  "bi bi-envelope-fill text-danger" : "bi bi-envelope")"></i>
											<span>Mesajlar</span>
										</NavLink>
									</li>
									<li>
										<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="/settings" @onclick="CollapseMenuAsync">
											<i class="bi bi-gear"></i>
											<span>Ayarlar</span>
										</NavLink>
									</li>
									<li>
										<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" @onclick="LogOutAsync" style="cursor: pointer;">
											<i class="bi bi-x-circle"></i>
											<span>Çıkış Yap</span>
										</NavLink>
									</li>
								</ul>
							</li>
						</Authorized>
						<NotAuthorized>
							<ul class="navbar-nav ms-auto d-flex flex-column flex-lg-row align-items-start gap-3">
								<li class="nav-item">
									<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/login" @onclick="CollapseMenuAsync">
										<i class="bi bi-person-circle fs-5"></i>
										<span class="ms-2">Giriş</span>
									</NavLink>
								</li>
								<li class="nav-item">
									<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/register" @onclick="CollapseMenuAsync">
										<i class="bi bi-person-plus-fill fs-5"></i>
										<span class="ms-2">Kayıt Ol</span>
									</NavLink>
								</li>
							</ul>
						</NotAuthorized>
					</AuthorizeView>
				</li>
			</ul>
		</div>
	</div>
</nav> *@


<nav class="navbar navbar-expand-lg navbar-light fixed-top py-lg-0 blue">
	<div class="container-fluid">
		<a class="navbar-brand text-white fw-bold" href="/">ItirafEt</a>

		<!-- Küçük ekran menü butonu -->
		<button class="navbar-toggler border-0" type="button" data-bs-toggle="offcanvas" data-bs-target="#mobileMenu"
		aria-controls="mobileMenu">
			<span class="navbar-toggler-icon" style="filter: invert(1);"></span>
		</button>

		<!-- Büyük ekran menü -->
		<div class="collapse navbar-collapse d-none d-lg-flex" id="navbarMain">
			<ul class="navbar-nav ms-auto d-flex align-items-lg-center gap-3 me-4">

				<!-- Kategoriler -->
				<li class="nav-item dropdown">
					<a class="nav-link dropdown-toggle text-white d-flex align-items-center gap-1" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
						<i class="bi bi-folder2-open fs-5"></i> <span class="ms-2">Kategoriler</span>
					</a>
					<ul class="dropdown-menu border-0 shadow-lg" style="background: rgba(75, 108, 183, 0.9); backdrop-filter: blur(10px);">
						@if (_categories != null)
						{
							@foreach (var category in _categories)
							{
								<li>
									<NavLink class="dropdown-item py-2" href=@($"/categories/{category.Id}") >
										<div class="d-flex align-items-center gap-2">
											<span class="@category.CategoryIconUrl d-inline-flex align-items-center text-white" style="font-size: 1.4rem"></span>
											<span class="fs-6 text-white">@category.CategoryName <small>(@category.PostCount)</small></span>
										</div>
									</NavLink>
								</li>
							}
						}
					</ul>
				</li>



				<!-- Yönetim -->
				<AuthorizeView Context="Adminastor">
					<Authorized>
						<AuthorizeView Roles="@allowedRoles">
							<li class="nav-item d-lg-block">
								<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/admin/adminastorPanel" >
									<i class="bi bi-speedometer fs-5"></i> Yönetim
								</NavLink>
							</li>
						</AuthorizeView>
					</Authorized>
				</AuthorizeView>

				<!-- Kullanıcı -->
				<AuthorizeView Context="LoggedInContext">
					<Authorized>
						<li class="nav-item dropdown">
							<a class="nav-link dropdown-toggle text-white d-flex align-items-center gap-1" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
								<i class="@(_isHaveUnreadMessages ? "bi bi-person-fill-check" : "bi bi-person-check") fs-5" style="@(_isHaveUnreadMessages ? "transition:2s; color:red;" : "transition:2s;")"></i>
								<span class="ms-2">@AuthStateProvider.User?.userName.ToUpper()</span>
							</a>
							<ul class="dropdown-menu border-0 shadow-lg" style="background: rgba(75, 108, 183, 0.9); backdrop-filter: blur(10px);">
								<li>
									<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="posts/createPosts" >
										<i class="bi bi-pen"></i> <span>İtiraf Et</span>
									</NavLink>
								</li>
								<li>
									<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="/inbox">
										<i class="@(_isHaveUnreadMessages ? "bi bi-envelope-fill text-danger" : "bi bi-envelope")"></i>
										<span>Mesajlar</span>
									</NavLink>
								</li>
								<li>
									<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" href="/settings">
										<i class="bi bi-gear"></i> <span>Ayarlar</span>
									</NavLink>
								</li>
								<li>
									<NavLink class="dropdown-item py-2 d-flex align-items-center gap-2 text-white" @onclick="LogOutAsync" style="cursor: pointer;">
										<i class="bi bi-x-circle"></i> <span>Çıkış Yap</span>
									</NavLink>
								</li>
							</ul>
						</li>
					</Authorized>
					<NotAuthorized>
						<ul class="navbar-nav ms-auto d-flex flex-column flex-lg-row align-items-start gap-3">
							<li class="nav-item">
								<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/login" >
									<i class="bi bi-person-circle fs-5"></i>
									<span class="ms-2">Giriş</span>
								</NavLink>
							</li>
							<li class="nav-item">
								<NavLink class="nav-link text-white d-flex align-items-center gap-1" href="/register">
									<i class="bi bi-person-plus-fill fs-5"></i>
									<span class="ms-2">Kayıt Ol</span>
								</NavLink>
							</li>
						</ul>
					</NotAuthorized>
				</AuthorizeView>
			</ul>
		</div>
	</div>
</nav>

<!-- Küçük ekran için Offcanvas Menü -->
<div class="offcanvas offcanvas-start blue-reverse" tabindex="-1" id="mobileMenu" aria-labelledby="mobileMenuLabel">
	<div class="offcanvas-header p-0 pt-3 pe-3 align-self-end">
		@* <h5 class="offcanvas-title text-white" id="mobileMenuLabel">Menü</h5> *@
		<button type="button" class="btn p-0" data-bs-dismiss="offcanvas" aria-label="Kapat">
			<i class="bi bi-box-arrow-in-left text-white" style="font-size:1.75rem;"></i>
		</button>
	</div>
	<div class="offcanvas-body pt-1">
		<ul class="navbar-nav d-flex flex-column p-0 gap-3">

			<!-- Kategoriler (küçük ekranda düz liste gibi) -->
			@if (_categories != null)
			{
				<li class="nav-link fw-bold text-white" @onclick="ToggleCategories" style="cursor:pointer">
					<i class="bi bi-folder2-open fs-5"></i>
					<span class="ms-2">Kategoriler</span>

					@if (_showCategories)
					{
						<i class="bi bi-caret-up-fill ms-1"></i>
					}
					else
					{
						<i class="bi bi-caret-down-fill ms-1"></i>
					}
				</li>

				@if (_showCategories)
				{
					@foreach (var category in _categories)
					{
						<li class="ps-4">
							<NavLink class="nav-link text-white" href=@($"/categories/{category.Id}") @onclick="async () => await CloseMenuAsync()">
								<i class="@category.CategoryIconUrl"></i> @category.CategoryName (@category.PostCount)
							</NavLink>
						</li>
					}
				}
			}

			<AuthorizeView Context="Adminastor">
				<Authorized>
					<AuthorizeView Roles="@allowedRoles">
						<li class="nav-item">
							<NavLink class="nav-link fw-bold text-white d-flex align-items-center gap-2"
									 href="/admin/adminastorPanel"
									 @onclick="async () => await CloseMenuAsync()">
								<i class="bi bi-speedometer"></i><span class="ms-2">Yönetim</span>
							</NavLink>
						</li>


					</AuthorizeView>
				</Authorized>
			</AuthorizeView>

			<AuthorizeView Context="LoggedInContext">
				<Authorized>
					<li class="nav-link fw-bold text-white">
						<i class="bi bi-person-fill-check"></i><span class="ms-2">@AuthStateProvider.User?.userName.ToUpper()</span>
					</li>
					<li class="ps-4">
						<NavLink class="nav-link text-white" href="/posts/createPosts" @onclick="async () => await CloseMenuAsync()">
							<i class="bi bi-pen"></i> İtiraf Et
						</NavLink>
					</li>
					<li class="ps-4">
						<NavLink class="nav-link text-white" href="/inbox" @onclick="async () => await CloseMenuAsync()">
							<i class="@(_isHaveUnreadMessages ? "bi bi-envelope-fill text-danger" : "bi bi-envelope")"></i> Mesajlar
						</NavLink>
					</li>
					<li class="ps-4">
						<NavLink class="nav-link text-white" href="/settings" @onclick="async () => await CloseMenuAsync()">
							<i class="bi bi-gear"></i> Ayarlar
						</NavLink>
					</li>
					<li class="ps-4">
						<a class="nav-link text-white" href="javascript:void(0)" @onclick="async () => await LogOutAsync()">
							<i class="bi bi-x-circle"></i> Çıkış Yap
						</a>
					</li>
				</Authorized>
				<NotAuthorized>
					<li>
						<NavLink class="nav-link text-white" href="/login" @onclick="async () => await CloseMenuAsync()">
							<i class="bi bi-person-circle"></i> Giriş
						</NavLink>
					</li>
					<li>
						<NavLink class="nav-link text-white" href="/register" @onclick="async () => await CloseMenuAsync()">
							<i class="bi bi-person-plus-fill"></i> Kayıt Ol
						</NavLink>
					</li>
				</NotAuthorized>
			</AuthorizeView>
		</ul>
	</div>
</div>



<Toasts class="p-3 custom-toast" Messages="_toastMessages" Placement="ToastsPlacement.BottomRight" StackLength="3" AutoHide="true" Delay="3000" />


@code {
	private List<CategoryViewModel>? _categories = new();
	private List<InboxItemViewModel>? _inboxViewModel = new();
	private List<ToastMessage> _toastMessages = new();
	private List<InboxItemViewModel>? _inboxItems = new();
	private HubConnection? _categoryHubConnection;
	private HubConnection? _conversationHubConnection;

	private Guid _currentUserId = Guid.Empty;

	private string allowedRoles = string.Join(",",
	nameof(UserRoleEnum.SuperAdmin),
	nameof(UserRoleEnum.Admin),
	nameof(UserRoleEnum.Moderator));
	private bool _isHaveUnreadMessages = false;
	private bool _showCategories = false;

	protected override async Task OnInitializedAsync()
	{

		try
		{
			AuthStateProvider.AuthenticationStateChanged += async (task) => await OnAuthStateChanged(task);
			while (AuthStateProvider.IsInitializing)
				await Task.Delay(500);

			await StartCategoryInfoHubAsync();
			await GelAllActiveCategoryAsync();

			if (AuthStateProvider.IsLoggedIn)
				await InitializeLogedInUserServices();
		}
		catch (Exception )
		{

		}

	}




	private void CheckUnreadMessage()
	{
		if (_inboxViewModel == null || !_inboxViewModel.Any())
		{
			_isHaveUnreadMessages = false;
			return;
		}
		if (_inboxViewModel.Any(x => x.UnreadMessageCount != 0))
			_isHaveUnreadMessages = true;
		else
			_isHaveUnreadMessages = false;

	}
	private async Task OnAuthStateChanged(Task<AuthenticationState> task)
	{
		var authState = await task;

		if (authState.User.Identity?.IsAuthenticated == true)
		{
			await InvokeAsync(async () => await InitializeLogedInUserServices());
			await StartCategoryInfoHubAsync();
		}
		else
		{
			_currentUserId = Guid.Empty;
			_inboxViewModel?.Clear();
			await InboxService.ClearAsync();
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task InitializeLogedInUserServices()
	{
		if (_currentUserId != Guid.Empty && _conversationHubConnection != null)
			return;
		GetUserId();
		await GetUserConversationsAsync();
		await StartConversationHubConnection();
		CheckUnreadMessage();
		await InvokeAsync(StateHasChanged);
	}

	private async Task LogOutAsync()
	{
		if (_conversationHubConnection != null)
		{
			await SignalRServiceBase.StopAsync(PageType.Layout,HubType.Message);
			await SignalRServiceBase.DisposeAsync(PageType.Layout, HubType.Message);
			_conversationHubConnection = null;
		}

		await AuthStateProvider.SetLogoutAsync();
		NavigationManager.NavigateTo("/", replace: true);
		//await CollapseMenuAsync();
		await CloseMenuAsync();
		await SignalRServiceBase.StopAsync(PageType.Layout, HubType.Category);
		await SignalRServiceBase.DisposeAsync(PageType.Layout, HubType.Category);
		_categoryHubConnection = null;

		await StartCategoryInfoHubAsync();

	}

	private async Task GelAllActiveCategoryAsync()
	{
		try
		{
			var response = await CategoryApi.GetAllActiveCategoriesAsycn();
			if (response.IsSuccess)
			{
				_categories = response.Data?
					.OrderBy(c => c.CategoryOrder)
					.ToList();
			}
			else
				_categories = null;
		}
		catch (Exception)
		{

		}
	}

	private async Task StartCategoryInfoHubAsync()
	{

		_categoryHubConnection = await SignalRServiceBase.ConfigureHubConnectionAsync(HubType.Category,PageType.Layout);

		if (_categoryHubConnection != null)
		{
			_categoryHubConnection.On<CategoryViewModel>("CategoryInfoChangedAsync", async (category) =>
	{
		UpdateCategories(category);
		await InvokeAsync(StateHasChanged);
	});

			_categoryHubConnection.On<int, bool>("CategoryPostCountChangedAsync", async (categoryId, isPostAdded) =>
	{
		UpdateCategories(categoryId, isPostAdded);
		await InvokeAsync(StateHasChanged);
	});

			await _categoryHubConnection.StartAsync();
			await _categoryHubConnection.SendAsync("JoinCategoryInfoChangedGroup");
			await _categoryHubConnection.SendAsync("JoinCategoryPostCountChangedGroup");
		}
	}

	private void UpdateCategories(CategoryViewModel category)
	{
		var existing = _categories?.FirstOrDefault(c => c.Id == category.Id);
		if (existing != null)
		{
			if (!category.isActive)
				_categories?.Remove(existing);
			else
			{
				existing.CategoryName = category.CategoryName;
				existing.CategoryIconUrl = category.CategoryIconUrl;
				existing.CategoryOrder = category.CategoryOrder;
				existing.PostCount = category.PostCount;
			}
		}
		else
			_categories?.Add(category);

		_categories = _categories?.OrderBy(c => c.CategoryOrder).ToList();
	}

	private void UpdateCategories(int categoryId, bool isPostAdded)
	{
		var category = _categories?.FirstOrDefault(c => c.Id == categoryId);
		if (category != null)
			category.PostCount += isPostAdded ? 1 : -1;
	}

	// private async Task CollapseMenuAsync()
	// {
	// 	await JSRuntime.InvokeVoidAsync("collapseNavbar");
	// }


	private async Task CloseMenuAsync()
	{
		await JSRuntime.InvokeVoidAsync("closeOffcanvas", "mobileMenu");
	}

	private void ToggleCategories()
	{
		_showCategories = !_showCategories;
	}

	private async Task GetUserConversationsAsync()
	{
		await InboxService.InitializeAsync(_currentUserId);
		if (InboxService._haveError)
			return;
		_inboxViewModel = await InboxService.GetUserConversationsAsync();
	}

	private void GetUserId()
	{
		if (Guid.TryParse(AuthStateProvider.User?.id, out var parsedId))
			_currentUserId = parsedId;
	}

	private async Task ShowToastMessageAsync(ToastType toastType, MessageViewModel messageDto)
	{
		_toastMessages.Add(CreateToastMessage(toastType, messageDto));
		await InvokeAsync(StateHasChanged);
	}

	private ToastMessage CreateToastMessage(ToastType toastType, MessageViewModel messageDto)
	{
		var tosatMessage = new ToastMessage
				{
					// AutoHide = true,
					CustomIconName = "bi bi-envelope-fill text-danger fs-4",
					Type = toastType,
					Title = $"{messageDto.SenderUserName.ToUpper()} Size Mesaj Gönderdi",
					HelpText = $"{DateTime.Now:HH:mm}",
					Message = messageDto?.Content?.Length > 50 ? $"{messageDto.Content.Substring(0, 50)}..." : messageDto.Content,
					Content = @<div><button class="btn btn-sm transparent-button mt-2 text-white" @onclick="() => NavigateToConversation(messageDto.ConversationId)">Mesajı Göster</button></div>
		};
		return tosatMessage;
	}

	private bool CheckCurrentChatPage(string conversationId)
	{
		var uri = new Uri(NavigationManager.Uri);
		if (uri.Segments.Length >= 3 && uri.Segments[1].Equals("conversations/", StringComparison.OrdinalIgnoreCase))
		{
			var currentConvId = uri.Segments[2].Trim('/');
			return currentConvId.Equals(conversationId, StringComparison.OrdinalIgnoreCase);
		}
		return false;
	}

	private void NavigateToConversation(Guid conversationId)
	{
		NavigationManager.NavigateTo($"/conversations/{conversationId}");
	}

	private async Task StartConversationHubConnection()
	{

		_conversationHubConnection = await SignalRServiceBase.ConfigureHubConnectionAsync(HubType.Message,PageType.Layout);

		if (_conversationHubConnection != null)
		{
			if (_conversationHubConnection == null)
				return;
			else
			{
				_conversationHubConnection.On<Guid, MessageViewModel>("SendMessageNotificationAsync", async (conversationId, messageViewModel) =>
				{
					if (!CheckCurrentChatPage(conversationId.ToString()) && _currentUserId != messageViewModel.SenderId)
					{
						_isHaveUnreadMessages = true;
						await ShowToastMessageAsync(ToastType.Danger, messageViewModel);
					}

				});

				_conversationHubConnection.On<Guid, InboxItemViewModel>("NewMessageForInboxAsync", async (currentUserId, inboxItem) =>
				{
					if (_currentUserId == currentUserId && !CheckCurrentChatPage(inboxItem.ConversationId.ToString()))
					{
						await InboxService.UpdateInboxItemsAfterNewMessageRecivedAsync(inboxItem);
						await InboxService.NotifyNewMessageRecivedAsync();
					}
					else if (_currentUserId == currentUserId)
					{
						await InboxService.UpdateInboxItemsAfterNewMessageRecivedInInboxPageAsync(inboxItem);
						await InboxService.NotifyNewMessageRecivedInInboxPageAsync();
					}

					await InvokeAsync(StateHasChanged);
				});

				_conversationHubConnection.On<Guid, Guid>("MessageReadByCurrentUserAsync", async (messageReaderUserId, conversationId) =>
				{
					if (_currentUserId == messageReaderUserId)
						await CheckForUnreadMessagesAsync(messageReaderUserId);
				});


				await _conversationHubConnection.StartAsync();

				await _conversationHubConnection.SendAsync("JoinMessageReadGroup", _currentUserId);
				await _conversationHubConnection.SendAsync("JoinInboxGroup", _currentUserId);

				if (_inboxViewModel != null)
				{
					foreach (var conversation in _inboxViewModel)
					{
						await _conversationHubConnection.SendAsync("JoinMessageGroup", conversation.ConversationId);
					}
				}
			}
		}

	}

	//TODO exception doldur
	private async Task CheckForUnreadMessagesAsync(Guid currentUserId)
	{
		try
		{
			var response = await MessageApi.CheckUnreadMessagesAsync(currentUserId);
			if (response.IsSuccess)
				_isHaveUnreadMessages = response.Data;
			else
				_isHaveUnreadMessages = false;

		}
		catch (Exception)
		{

		}
		finally
		{
			await InvokeAsync(StateHasChanged);
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (_categoryHubConnection != null)
		{
			await SignalRServiceBase.StopAsync(PageType.Layout,HubType.Category);
			await SignalRServiceBase.DisposeAsync(PageType.Layout, HubType.Category);
			_categoryHubConnection = null;

		}
		if (_conversationHubConnection != null)
		{
			await SignalRServiceBase.StopAsync(PageType.Layout, HubType.Message);
			await SignalRServiceBase.DisposeAsync(PageType.Layout, HubType.Message);
			_conversationHubConnection = null;
		}
	}

}
