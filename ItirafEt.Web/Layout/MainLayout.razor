@inherits LayoutComponentBase
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<div class="page bg-secondary-subtle">
@* 	<div class="sidebar">
		<NavMenu />
	</div> *@
	<NavMenu />
	<main class="container-fluid p-0">
		@* <div class="top-row px-4 bg-primary-subtle d-flex flex-wrap justify-content-end align-items-center">
			<AuthorizeView Context="LoggedInContext">
				<Authorized>

					<div class="nav-item px-3">
						<NavLink class="nav-link" href="">
							<span class="text-black" aria-hidden="true"><i class="bi bi-envelope"></i> Mesajlar</span>
						</NavLink>
					</div>
					<div class="nav-item px-3">
						<NavLink class="nav-link" href="">
							<span class="text-black" aria-hidden="true">
								<i class="bi bi-person-check"></i> @AuthStateProvider.User?.userName.ToUpper()
							</span>
						</NavLink>
					</div>
					<div class="nav-item px-3">
						<NavLink class="nav-link" @onclick=LogOutAsync>
							<span class="text-black" aria-hidden="true"><i class="bi bi-x-circle"></i> Çıkış Yap</span>
						</NavLink>
					</div>

				</Authorized>
				<NotAuthorized>
					<div class="nav-item px-3">
						<NavLink class="nav-link" href="/auth/login">
							<span class="text-black" aria-hidden="true"><i class="bi bi-person-circle"></i> Giriş Yap</span>
						</NavLink>
					</div>
				</NotAuthorized>
			</AuthorizeView>
		</div> *@
		

		<div class="position-relative flex-grow-1" style="min-height: calc(100vh - 56px);">
			@if (AuthStateProvider.IsInitializing)
			{
				<p>Initializing State ... </p>
			}
			else
			{
				@Body
			}

		</div>
	</main>
</div>


@code {

	protected override async Task OnInitializedAsync()
	{
		while (AuthStateProvider.IsInitializing)
			await Task.Delay(500);
	}

	// private async Task LogOutAsync()
	// {
	// 	await AuthStateProvider.SetLogoutAsync();
	// 	NavigationManager.NavigateTo("/home", replace: true);
	// }
}
