@inject ICategoryApi CategoryApi
@inject NavigationManager Navigation
@inject AuthStateProvider AuthStateProvider


<div class="top-row ps-3 navbar navbar-dark navbar-expand-lg">
	<div class="container-fluid">
		<a class="navbar-brand" href="">ItirafEt.Web</a>
		<button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
			<span class="navbar-toggler-icon"></span>
		</button>
	</div>
</div>
<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
	<nav class="nav flex-column">

		<AuthorizeView Context="LoggedInContext">
			<Authorized>
				<AuthorizeView Roles="@allowedRoles">
					<hr class="border-3 border-white opacity-75">

					<div class="nav-item px-3">
						<NavLink class="nav-link" href="/admin/adminastorPanel">
							<div class="d-flex align-items-center gap-2">
								<span class="bi bi-speedometer d-inline-flex align-items-center" style="font-size: 1.4rem"></span>
								<span class="fs-6">Yönetim Paneli</span>
							</div>
						</NavLink>
					</div>
					<hr class="border-3 border-white opacity-75">

				</AuthorizeView>
			</Authorized>
		</AuthorizeView>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="/home">
				<div class="d-flex align-items-center gap-2">
					<span class="bi bi bi-house-door-fill d-inline-flex align-items-center" style="font-size: 1.4rem"></span>
					<span class="fs-6">Ana Sayfa</span>
				</div>
			</NavLink>
		</div>

		@foreach (var category in _categories)
		{
			<div class="nav-item px-3">
				<NavLink class="nav-link" href=@($"/categories/{category.Id}")>
					<div class="d-flex align-items-center gap-2">
						<span class="@category.CategoryIconUrl d-inline-flex align-items-center" style="font-size: 1.4rem"></span>
						<span class="fs-6">@category.CategoryName  (@category.PostCount)</span>
					</div>
				</NavLink>
			</div>
		}

	</nav>
</div>

@code {
	private bool collapseNavMenu = true;
	private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
	private List<CategoryDto>? _categories = new List<CategoryDto>();
	private HubConnection _hubConnection { get; set; }
	private string? _errorMessage = null;

	protected override async Task OnInitializedAsync()
	{
		await StartHubAsync();
		await GelAllActiveCategoryAsync();
	}

	private void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	private string allowedRoles = string.Join(",",
		nameof(UserRoleEnum.SuperAdmin),
		nameof(UserRoleEnum.Admin),
		nameof(UserRoleEnum.Moderator));

	private async Task GelAllActiveCategoryAsync()
	{
		try
		{
			var response = await CategoryApi.GetAllActiveCategoryAsycn();
			if (response.IsSuccess)
			{
				_categories = response.Data?
					.OrderBy(c => c.CategoryOrder)
					.ToList();
			}
			else
				_categories = null;
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
	}

	private async Task StartHubAsync()
	{

		_hubConnection = new HubConnectionBuilder()
			.WithUrl("https://localhost:7292/categoryhub")
			.WithAutomaticReconnect()
			.Build();

		_hubConnection.On<CategoryDto>("ActiveCategoryInformationsChanged", async (category) =>
		{
			UpdateCategories(category);
			StateHasChanged();
		});

		await _hubConnection.StartAsync();

	}

	private void UpdateCategories(CategoryDto category)
	{
		var existingCategory = _categories.FirstOrDefault(c => c.Id == category.Id);

		if (existingCategory != null)
		{
			if (!category.isActive)
				_categories.Remove(existingCategory);
			else
			{
				existingCategory.CategoryName = category.CategoryName;
				existingCategory.CategoryIconUrl = category.CategoryIconUrl;
				existingCategory.CategoryOrder = category.CategoryOrder;
				existingCategory.PostCount = category.PostCount;
			}
		}
		else
		{
			if (category.isActive)
				_categories.Add(category);
		}

		_categories = _categories
			.OrderBy(c => c.CategoryOrder)
			.ToList();
	}


}
