@page "/admin/editcategory"
@inject ICategoryApi CategoryApi

<div class="container">
	<h3>Kategori Düzenle</h3>
	<hr />
	<div class="row">
		<div class="col-md-12">
			@if (!_isAnyCategory)
			{
				<table class="table table-success table-striped table-hover">
					<thead>
						<tr>
							<td colspan="4" class="text-danger">@_errorMessage</td>
						</tr>
					</thead>
				</table>
			}
			else
			{
				<table class="table table-success table-striped table-hover">
					<thead>
						<tr>
							<th class="text-center col-md-3">Kategori Adı</th>
							<th class="text-center col-md-2">Aktif Mi</th>
							<th class="text-center col-md-2">Sıra No</th>
							<th class="text-center col-md-3">İkon</th>
							<th class="text-center col-md-2"></th>
						</tr>
					</thead>
					<tbody>


						@foreach (var category in _categories)
						{
							<tr>
								<td colspan="5">
									<EditForm Model="category" OnValidSubmit="() => SaveChangesCategoryAsync(category)">
										<DataAnnotationsValidator />

										<div class="row align-items-center">
											<div class="col-md-3 col-12 mb-2 mb-md-0">
												<InputText class="form-control form-control-sm"
														   @bind-Value="category.CategoryName" />
												<ValidationMessage For="@(() => category.CategoryName)" />
											</div>

											<div class="col-md-2 col-12 mb-2 mb-md-0 text-center d-flex justify-content-around">
												@if (category.isActive)
												{
													<button type="button" class="col btn btn-danger" @onclick="() => ToggleActiveStatus(category)">
														Pasif Yap
													</button>

												}
												else
												{

													<button type="button" class="col btn btn-primary" @onclick="() => ToggleActiveStatus(category)">
														Aktif Yap
													</button>
												}

												<InputCheckbox class="form-check-input" @bind-Value="category.isActive" style="display:none;" />
											</div>

											<div class="col-md-2 col-12 mb-2 mb-md-0">
												<InputNumber class="form-control form-control-sm"
															 @bind-Value="category.CategoryOrder" />
												<ValidationMessage For="@(() => category.CategoryOrder)" />
											</div>

											<div class="col-md-3 col-12 mb-2 mb-md-0">
												<div class="d-flex justify-content-between align-items-center mb-1">
													<NavLink href="https://icons.getbootstrap.com/" target="_blank" class="text-decoration-none">
														<i class="bi bi-question-diamond"></i>
													</NavLink>

													<i class="@category.CategoryIconUrl"></i>

													<InputText class="form-control form-control-sm w-75"
															   @bind-Value="category.CategoryIconUrl" />
												</div>

												<ValidationMessage For="@(() => category.CategoryIconUrl)" />
											</div>



											<div class="col-md-2 col-12 mb-2 mb-md-0 text-center d-flex justify-content-around">
												<button class="col btn btn-success" type="submit">Kaydet</button>
											</div>

										</div>
									</EditForm>
								</td>
							</tr>
						}

					</tbody>
				</table>
			}

			@* 			@if (!_isSuccess && _errorMessage != null)
			{ *@
			<ModalComponent @ref="Modal" Title="Hata">
				<ChildContent>
					<div class="col text-bg-danger text-white m-3 rounded align-items-center">
						<p>@_errorMessage</p>
					</div>
				</ChildContent>
				<FooterContent>
					<button class="btn btn-primary col" @onclick="Modal.Close">Kapat</button>
				</FooterContent>
			</ModalComponent>
			@* } *@


		</div>
	</div>
</div>

@code {
	private List<CategoryDto>? _categories = new List<CategoryDto>();
	private ModalComponent? Modal;
	private string? _errorMessage;
	private bool _isAnyCategory = false;
	// private bool _isSuccess = false;


	protected override async Task OnInitializedAsync()
	{
		await LoadCategoriesAsync();
	}

	private async Task LoadCategoriesAsync()
	{
		try
		{
			var response = await CategoryApi.GetCategoryAsync();
			if (response.IsSuccess)
			{
				_categories = response.Data?
					.OrderBy(c => c.CategoryOrder)
					.ToList();
				_isAnyCategory = true;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isAnyCategory = false;
			}
		}
		catch (Exception ex)
		{
			_isAnyCategory = false;
			_errorMessage = ex.Message;
		}

	}

	private async Task SaveChangesCategoryAsync(CategoryDto dto)
	{
		try
		{
			var response = await CategoryApi.EditCategoryAsync(dto);
			if (response.IsSuccess)
			{
				await LoadCategoriesAsync();
				_errorMessage = null;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				Modal?.Open();
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
			Modal?.Open();

		}
	}

	private void ToggleActiveStatus(CategoryDto category)
	{
		category.isActive = !category.isActive;
	}
}
