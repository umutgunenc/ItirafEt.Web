@page "/settings"

@inject IUserSettingApi UserSettingApi
@inject AuthStateProvider AuthStateProvider

<div class="col-lg-8 col mx-auto py-lg-5">
	@if (_haveError)
	{
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
		<div class="main-body">
			<div class="row mx-0">
				<div class="col-lg-4 mb-2 px-0">
					<div class="card">
						<div class="card-body">
							<div class="d-flex flex-column align-items-center text-center">
								<div class="py-2">
									<img src="@(string.IsNullOrEmpty(_userSettingInfoViewModel.ProfileImageUrl) ? "/anonymousIcon.png" : _userSettingInfoViewModel.ProfileImageUrl)"
									alt="Profil Resmi"
									class="profile-photo rounded-circle"
									width="200">
								</div>
								<div class="mt-3">
									<h4 class="pb-1">@_userSettingInfoViewModel.UserName</h4>
									@*<p class="text-secondary mb-1">Full Stack Developer</p>
									<p class="text-muted font-size-sm">Bay Area, San Francisco, CA</p>
									 									<button class="btn btn-primary">Follow</button>
									<button class="btn btn-outline-primary">Message</button> *@
									<div class="d-flex align-items-center gap-2">
										<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
											@(GetAge(_userSettingInfoViewModel.BirthDate))
										</span>
										@if (_userSettingInfoViewModel.GenderId == (int)GenderEnum.Male)
										{
											<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-male me-1"></i>Erkek
											</span>
										}
										else if (_userSettingInfoViewModel.GenderId == (int)GenderEnum.Female)
										{
											<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-female me-1"></i>Kadın
											</span>
										}
									</div>
								</div>
							</div>
							<hr class="my-4">
							<div class="d-grid gap-3">
								<button type="button" class="btn-custom w-100">
									<i class="bi bi-upload me-2"></i>
									Profil Resmi Seç
								</button>
								<button type="button" class="btn-custom-reverse w-100">
									<i class="bi bi-save me-2"></i>
									Kaydet
								</button>
							</div>
							@* <hr class="my-4">
							<ul class="list-group list-group-flush">
								<li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
									<h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-globe me-2 icon-inline"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>Website</h6>
									<span class="text-secondary">https://bootdey.com</span>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
									<h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-github me-2 icon-inline"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>Github</h6>
									<span class="text-secondary">bootdey</span>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
									<h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-twitter me-2 icon-inline text-info"><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg>Twitter</h6>
									<span class="text-secondary">bootdey</span>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
									<h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-instagram me-2 icon-inline text-danger"><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg>Instagram</h6>
									<span class="text-secondary">bootdey</span>
								</li>
								<li class="list-group-item d-flex justify-content-between align-items-center flex-wrap">
									<h6 class="mb-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-facebook me-2 icon-inline text-primary"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>Facebook</h6>
									<span class="text-secondary">bootdey</span>
								</li>
							</ul> *@
						</div>
					</div>
				</div>
				<div class="col-lg-8 px-0 px-lg-2">
					<div class="card mb-2">
						<div class="card-body">
							<EditForm Model="_userSettingInfoViewModel"
							OnValidSubmit="ChangeUserInfoAsync">
								<DataAnnotationsValidator />
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">
										Kullanıcı Adı
									</label>
									<div class="col-sm-9">
										<div class="input-group">
											<InputText @bind-Value="_userSettingInfoViewModel.UserName"
											class="form-control"
											type="text" />
										</div>
										<ValidationMessage For="()=> _userSettingInfoViewModel.UserName" />
									</div>
								</div>
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">
										Email Adresi
									</label>
									<div class="col-sm-9">
										<div class="input-group">
											<InputText @bind-Value="_userSettingInfoViewModel.Email"
											class="form-control"
											type="email"
											disabled="@_changeEmail" />
											<button type="button"
											class="btn btn-outline-secondary"
											@onclick="ToggleEmailChange">
												<i class="@(_changeEmail ? "bi bi-arrow-clockwise" : "bi bi-x")"></i>
											</button>
										</div>
										<ValidationMessage For="()=> _userSettingInfoViewModel.Email" />
									</div>
								</div>
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">Doğum Tarihi</label>
									<div class="col-sm-9">
										<InputDate @bind-Value="_userSettingInfoViewModel.BirthDate" max="@MaxBirthDate" class="form-control" />
										<ValidationMessage For="()=> _userSettingInfoViewModel.BirthDate" />
									</div>
								</div>
								<div class="row mb-3">
									<label for="gender" class="col-form-label col-sm-3">Cinsiyet</label>
									<div class="col-sm-9">
										<InputSelect id="gender" @bind-Value="_userSettingInfoViewModel.GenderId" class="form-select">
											<option value="" disabled selected>Cinsiyet seçiniz</option>
											<option value="@( (int)GenderEnum.Male )">Erkek</option>
											<option value="@( (int)GenderEnum.Female )">Kadın</option>
										</InputSelect>
										<ValidationMessage For="() => _userSettingInfoViewModel.GenderId" />
									</div>
								</div>
								<div class="row">
									@if (!_isInfoBusy)
									{
										<div class="">
											<input type="submit" class="btn btn-custom px-4 text-white col-12" value="Bilgilerimi Kaydet">
										</div>
									}
									else
									{
										<div>
											<button class="btn btn-custom px-4 text-white col-12" type="button" disabled>
												<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
												Kaydediliyor...
											</button>
										</div>
									}
									<div class="">
										@if (_haveInfoError)
										{

											<div class="position-relative mt-2">
												<div class="alert alert-danger px-4 py-3 mb-0">
													@_infoErrorMessage
												</div>
												<button type="button"
												class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
												aria-label="Kapat"
												@onclick="CloseInfoMessage">
												</button>
											</div>
										}
										@if (_isInfoSucces)
										{
											<div class="position-relative mt-2">
												<div class="alert alert-success px-4 py-3 mb-0">
													<a href="#" class="alert-link">Bilgileriniz başarıyla kaydedildi.</a>
												</div>
												<button type="button"
												class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
												aria-label="Kapat"
												@onclick="CloseInfoMessage">
												</button>
											</div>
										}
									</div>
								</div>
							</EditForm>
						</div>
					</div>
					<div class="card mb-2">
						<div class="card-body">
							<EditForm Model="_userSettingChangePaswordViewModel"
							OnValidSubmit="ChangePaswordAsync">
								<DataAnnotationsValidator />
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">
										Eski Şifre
									</label>
									<div class="col-sm-9">
										<div class="input-group">
											<InputText @bind-Value="_userSettingChangePaswordViewModel.OldPassword"
											class="form-control"
											type="@(_showOldPassword ? "text" : "password")" />
											<button type="button"
											class="btn btn-outline-secondary"
											@onclick="ToggleOldPasswordVisibility">
												<i class="@(_showOldPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
											</button>
										</div>
										<ValidationMessage For="()=> _userSettingChangePaswordViewModel.OldPassword" />
									</div>
								</div>
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">
										Yeni Şifre
									</label>
									<div class="col-sm-9">
										<div class="input-group">
											<InputText @bind-Value="_userSettingChangePaswordViewModel.Password"
											class="form-control"
											type="@(_showNewPassword ? "text" : "password")" />
											<button type="button"
											class="btn btn-outline-secondary"
											@onclick="ToggleNewPasswordVisibility">
												<i class="@(_showNewPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
											</button>
										</div>
										<ValidationMessage For="()=> _userSettingChangePaswordViewModel.Password" />
									</div>
								</div>
								<div class="row mb-3">
									<label class="col-form-label col-sm-3">
										Yeni Şifre (Tekrar)
									</label>
									<div class="col-sm-9">
										<div class="input-group">
											<InputText @bind-Value="_userSettingChangePaswordViewModel.PasswordConfirm"
											class="form-control"
											type="@(_showNewPasswordConfirm ? "text" : "password")" />
											<button type="button"
											class="btn btn-outline-secondary"
											@onclick="ToggleNewPasswordConfirmVisibility">
												<i class="@(_showNewPasswordConfirm ? "bi bi-eye-slash" : "bi bi-eye")"></i>
											</button>
										</div>
										<ValidationMessage For="()=> _userSettingChangePaswordViewModel.PasswordConfirm" />
									</div>
								</div>
								@* 								<div class="row">
									<div class="col-sm-3"></div>
									<div class="">
										<input type="submit" class="btn btn-custom px-4 text-white col-12" value="Şifremi Değiştir">
									</div>
								</div> *@
								<div class="row">
									@if (!_isPasswordBusy)
									{
										<div class="">
											<input type="submit" class="btn btn-custom px-4 text-white col-12" value="Şifremi Değiştir">
										</div>
									}
									else
									{
										<div>
											<button class="btn btn-custom px-4 text-white col-12" type="button" disabled>
												<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
												Şifreniz Değiştiriliyor.
											</button>
										</div>
									}
									<div class="">
										@if (_havePasswordError)
										{
											<div class="position-relative mt-2">
												<div class="alert alert-danger px-4 py-3 mb-0">
													@_passwordErrorMessage
												</div>
												<button type="button"
												class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
												aria-label="Kapat"
												@onclick="ClosePasswordMessage">
												</button>
											</div>
										}
										@if (_isPasswordSucces)
										{
											<div class="position-relative mt-2">
												<div class="alert alert-success px-4 py-3 mb-0">
													<a href="#" class="alert-link">Şifeniz başarıyla değiştirildi.</a>
												</div>
												<button type="button"
												class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
												aria-label="Kapat"
												@onclick="ClosePasswordMessage">
												</button>
											</div>
										}
									</div>
								</div>
							</EditForm>
						</div>
					</div>
					<div class="row mx-0">
						<div class="col-sm-12 px-0">
							<div class="card">
								<div class="card-body">
									<h5 class="d-flex align-items-center mb-3">Gönderilerim</h5>
									<p>Web Design</p>
									<div class="progress mb-3" style="height: 5px">
										<div class="progress-bar bg-primary" role="progressbar" style="width: 80%" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
									<p>Website Markup</p>
									<div class="progress mb-3" style="height: 5px">
										<div class="progress-bar bg-danger" role="progressbar" style="width: 72%" aria-valuenow="72" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
									<p>One Page</p>
									<div class="progress mb-3" style="height: 5px">
										<div class="progress-bar bg-success" role="progressbar" style="width: 89%" aria-valuenow="89" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
									<p>Mobile Template</p>
									<div class="progress mb-3" style="height: 5px">
										<div class="progress-bar bg-warning" role="progressbar" style="width: 55%" aria-valuenow="55" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
									<p>Backend API</p>
									<div class="progress" style="height: 5px">
										<div class="progress-bar bg-info" role="progressbar" style="width: 66%" aria-valuenow="66" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
</div>



@code {
	private bool _showOldPassword = false;
	private bool _showNewPassword = false;
	private bool _showNewPasswordConfirm = false;
	private bool _changeEmail = true;
	private bool _haveError = false;
	private bool _haveInfoError = false;
	private bool _havePasswordError = false;
	private bool _isInfoBusy = false;
	private bool _isPasswordBusy = false;
	private bool _isInfoSucces = false;
	private bool _isPasswordSucces = false;
	private string? _errorMessage = null;
	private string? _infoErrorMessage = null;
	private string? _passwordErrorMessage = null;
	private string MaxBirthDate => DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd");
	private Guid _currentUserId;
	private UserSettingsChangePaswordViewModel _userSettingChangePaswordViewModel = new();
	private UserSettingsInfoViewModel _userSettingInfoViewModel = new();


	protected override async Task OnInitializedAsync()
	{
		GetUserId();
		await GetUserSettingsInfo();
	}

	private void GetUserId()
	{
		_currentUserId = Guid.TryParse(AuthStateProvider.User?.id, out var g) ? g : Guid.Empty;
	}
	private void ToggleOldPasswordVisibility()
	{
		_showOldPassword = !_showOldPassword;
	}
	private void ToggleNewPasswordVisibility()
	{
		_showNewPassword = !_showNewPassword;
	}
	private void ToggleNewPasswordConfirmVisibility()
	{
		_showNewPasswordConfirm = !_showNewPasswordConfirm;
	}
	private void ToggleEmailChange()
	{
		_changeEmail = !_changeEmail;
	}
	private void CloseInfoMessage()
	{
		_haveInfoError = false;
		_isInfoSucces = false;
		_infoErrorMessage = string.Empty;
	}
	private void ClosePasswordMessage()
	{
		_havePasswordError = false;
		_isPasswordSucces = false;
		_passwordErrorMessage = string.Empty;
	}
	private int GetAge(DateTime birthDate)
	{
		var today = DateTime.Today;
		var age = today.Year - birthDate.Year;

		if (birthDate.Date > today.AddYears(-age))
			age--;
		return age;
	}
	private async Task ChangePaswordAsync()
	{
		if (_isPasswordBusy)
			return;
		_isPasswordBusy = true;
		_isPasswordSucces = false;
		_havePasswordError = false;

		try
		{
			var response = await UserSettingApi.ChangeUserPasswordAsync(_currentUserId, _userSettingChangePaswordViewModel);
			if (!response.IsSuccess)
			{
				_havePasswordError = true;
				_passwordErrorMessage = response.ErrorMessage;
			}
			else
			{
				var token = response.Data;
				var loggedInUser = new LoggedInUser(_currentUserId.ToString(), _userSettingInfoViewModel.UserName, AuthStateProvider.User?.roleId.ToString(), token);
				await AuthStateProvider.SetLoginAsync(loggedInUser);

				_userSettingChangePaswordViewModel.OldPassword= string.Empty;
				_userSettingChangePaswordViewModel.Password = string.Empty;
				_userSettingChangePaswordViewModel.PasswordConfirm = string.Empty;
				_isPasswordSucces = true;
			}
		}
		catch (Exception ex)
		{
			_havePasswordError = true;
			_passwordErrorMessage = ex.Message;
		}
		finally
		{
			_isPasswordBusy = false;
		}
	}
	private async Task ChangeUserInfoAsync()
	{
		if (_isInfoBusy)
			return;
		_isInfoBusy = true;
		_isInfoSucces = false;
		_haveInfoError = false;
		try
		{
			var response = await UserSettingApi.ChangeUserSettingsInfoAsync(_currentUserId, _userSettingInfoViewModel);

			if (!response.IsSuccess)
			{
				_haveInfoError = true;
				_infoErrorMessage = response.ErrorMessage;
			}
			else
			{
				_isInfoSucces = true;
				await AuthStateProvider.UpdateUserNameAsync(_userSettingInfoViewModel.UserName);
			}

		}
		catch (Exception ex)
		{
			_haveInfoError = true;
			_infoErrorMessage = ex.Message;
		}
		finally
		{
			_isInfoBusy = false;
		}
	}
	private async Task GetUserSettingsInfo()
	{
		try
		{
			var response = await UserSettingApi.GetUserSettingsInfoAsync(_currentUserId);
			if (!response.IsSuccess)
			{
				_haveError = true;
				_errorMessage = response.ErrorMessage;
			}
			else
				_userSettingInfoViewModel = response.Data;
		}
		catch (Exception ex)
		{
			_haveError = true;
			_errorMessage = ex.Message;
		}
	}

}
