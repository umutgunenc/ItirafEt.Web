@page "/settings"

@inject IUserSettingApi UserSettingApi
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IPostApi PostApi
@inject IJSRuntime JSRuntime


<div class="col-lg-8 col mx-auto py-lg-5">
    @if (_haveError)
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }
    else
    {
        <div class="main-body">
            <div class="row mx-0">
                <div class="col-lg-4 px-0">
                    <div class="card shadow-lg border-0 mb-3 rounded-0 ">
                        <div class="card-body">
                            <div class="d-flex flex-column align-items-center text-center">
                                <div class="py-2">
                                    <img src="@(string.IsNullOrEmpty(_userSettingInfoViewModel.ProfileImageUrl) ? "/anonymousIcon.png" : _userSettingInfoViewModel.ProfileImageUrl)"
                                    alt="Profil Resmi"
                                    class="profile-photo rounded-circle"
                                    width="200">
                                </div>
                                <div class="mt-3">
                                    <h4 class="pb-1">@_userSettingInfoViewModel.UserName</h4>
                                    <div class="d-flex align-items-center gap-2">
                                        <span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
                                            @(GetAge(_userSettingInfoViewModel.BirthDate))
                                        </span>
                                        @if (_userSettingInfoViewModel.GenderId == (int)GenderEnum.Male)
                                        {
                                            <span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
                                                <i class="bi bi-gender-male me-1"></i>Erkek
                                            </span>
                                        }
                                        else if (_userSettingInfoViewModel.GenderId == (int)GenderEnum.Female)
                                        {
                                            <span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
                                                <i class="bi bi-gender-female me-1"></i>Kadın
                                            </span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <hr class="my-4">
                            <div @ref="fileInputWrapper">
                                <InputFile style="display: none;"
                                           accept=".jpg,.jpeg,.png,.gif"
                                           OnChange="OnFileChanged" />
                            </div>

                            <div class="d-grid gap-3">
                                <button type="button" class="btn-custom w-100"
                                        @onclick="TriggerFileInputClick">
                                    <i class="bi bi-upload me-2"></i>
                                    Profil Resmi Yükle
                                </button>
                                <button type="button" class="btn-custom-reverse w-100"
                                        @onclick="DeleteProfilePicture">
                                    <i class="bi bi-trash3-fill me-2"></i>
                                    Profil Resmini Sil
                                </button>
                            </div>

                            @if (_haveProfilePictureError){

                                <div class="position-relative mt-3">
                                    <div class="alert alert-danger p-2 pe-5 mb-0">
                                        <a class="alert-link d-inline-block"
                                        @onclick="() => { _haveProfilePictureError = false; _profilePictureErrorMessage = null; _isChangeProfilePictureSucces = false; _profilePictureSuccesMessage = null; }"
                                        style="cursor: pointer; word-wrap: break-word;">
                                            @_profilePictureErrorMessage
                                        </a>
                                    </div>

                                    <button type="button"
                                    class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                    aria-label="Kapat"
                                    @onclick="() => { _haveProfilePictureError = false; _profilePictureErrorMessage = null; _isChangeProfilePictureSucces = false; _profilePictureSuccesMessage = null; }">
                                    </button>
                                </div>
                            }
                            @if (_profilePictureSuccesMessage != null)
                            {
                                <div class="position-relative mt-3">
                                    <div class="alert alert-success p-2 pe-5 mb-0">
                                        <a class="alert-link d-inline-block"
                                        @onclick="() => { _haveProfilePictureError = false; _profilePictureErrorMessage = null; _isChangeProfilePictureSucces = false; _profilePictureSuccesMessage = null; }"
                                        style="cursor: pointer; word-wrap: break-word;">
                                            @_profilePictureSuccesMessage
                                        </a>
                                    </div>

                                    <button type="button"
                                    class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                    aria-label="Kapat"
                                    @onclick="() => { _haveProfilePictureError = false; _profilePictureErrorMessage = null; _isChangeProfilePictureSucces = false; _profilePictureSuccesMessage = null; }">
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card shadow-lg border-0 mb-3 rounded-0">
                        <div class="card-body ">
                            <div class="mb-4 text-center">
                                <i class="bi bi-person-x-fill text-danger display-4 mb-2"></i>
                                <h5 class="card-title fw-semibold">Hesabını Dondurmak İster Misin?</h5>
                                <p class="text-muted small mb-1">
                                    Hesabınızı istediğiniz zaman tekrar aktive edebilirsiniz.
                                </p>
                                <p class="text-muted small mb-3">
                                    Devam etmek için lütfen şifrenizi girin.
                                </p>
                            </div>
                            <EditForm Model="_deactiveModel"
                            OnValidSubmit="DeactiveUserAccountAsync">
                                <DataAnnotationsValidator />
                                <div class="input-group">
                                    <InputText @bind-Value="_deactiveModel.Password"
                                    class="form-control"
                                    type="@(_showDeactiveAccountPassword ? "text" : "password")"
                                    placeholder="Şifrenizi girin" />
                                    <button type="button"
                                    class="btn btn-outline-secondary"
                                    @onclick="ToogleDeactiveAccountPassword">
                                        <i class="@(_showDeactiveAccountPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="()=> _deactiveModel.Password" />

                                <button type="submit" class="btn btn-outline-danger w-100 mt-3">
                                    <i class="bi bi-person-x-fill me-2"></i>
                                    Hesabımı Dondur
                                </button>

                            </EditForm>

                            @if (_haveDeactiveError)
                            {
                                <div class="position-relative mt-3">
                                    <div class="alert alert-danger p-2 pe-5  mb-0">
                                        <a class="alert-link d-block"
                                        @onclick="() => { _haveDeactiveError = false; _deactiveSuccesMessage = null; }"
                                        style="cursor:pointer; word-wrap: break-word;">
                                            @_deactiveErrorMessage
                                        </a>
                                    </div>
                                    <button type="button"
                                    class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                    aria-label="Kapat"
                                    @onclick="() => { _haveDeactiveError = false; _deactiveErrorMessage = null; _isDeactiveSucces = false; _deactiveSuccesMessage = null;  }">
                                    </button>
                                </div>
                            }
                            else if (_isDeactiveSucces)
                            {
                                <div class="position-relative mt-3">
                                    <div class="alert alert-success p-2 pe-5 mb-0">
                                        <a class="alert-link d-block"
                                        style="cursor:pointer; word-wrap: break-word;"
                                        @onclick="() => { _haveDeactiveError = false; _deactiveErrorMessage = null; _isDeactiveSucces = false; _deactiveSuccesMessage = null; }">
                                            @((MarkupString)_deactiveSuccesMessage?.Replace("\n", "<br />"))
                                        </a>
                                    </div>
                                    <button type="button"
                                    class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                    aria-label="Kapat"
                                    @onclick="() => { _isDeactiveSucces = false; _deactiveSuccesMessage = null; }">
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-lg-8 px-0 px-lg-3">
                    <div class="card shadow-lg border-0 mb-3 rounded-0 ">
                        <div class="card-body">
                            <EditForm Model="_userSettingInfoViewModel"
                            OnValidSubmit="ChangeUserInfoAsync">
                                <DataAnnotationsValidator />
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">
                                        Kullanıcı Adı
                                    </label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <InputText @bind-Value="_userSettingInfoViewModel.UserName"
                                            class="form-control"
                                            type="text"
                                            maxlength="64"
                                            minlength="3" />
                                        </div>
                                        <ValidationMessage For="()=> _userSettingInfoViewModel.UserName" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">
                                        Email Adresi
                                    </label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <InputText @bind-Value="_userSettingInfoViewModel.Email"
                                            class="form-control"
                                            type="email"
                                            disabled="@_changeEmail" />
                                            <button type="button"
                                            class="btn btn-outline-secondary"
                                            @onclick="ToggleEmailChange">
                                                <i class="@(_changeEmail ? "bi bi-arrow-clockwise" : "bi bi-x")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="()=> _userSettingInfoViewModel.Email" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">Doğum Tarihi</label>
                                    <div class="col-sm-9">
                                        <InputDate @bind-Value="_userSettingInfoViewModel.BirthDate" max="@MaxBirthDate" class="form-control" />
                                        <ValidationMessage For="()=> _userSettingInfoViewModel.BirthDate" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <label for="gender" class="col-form-label col-sm-3">Cinsiyet</label>
                                    <div class="col-sm-9">
                                        <InputSelect id="gender" @bind-Value="_userSettingInfoViewModel.GenderId" class="form-select">
                                            <option value="" disabled selected>Cinsiyet seçiniz</option>
                                            <option value="@( (int)GenderEnum.Male )">Erkek</option>
                                            <option value="@( (int)GenderEnum.Female )">Kadın</option>
                                        </InputSelect>
                                        <ValidationMessage For="() => _userSettingInfoViewModel.GenderId" />
                                    </div>
                                </div>
                                <div class="row">
                                    @if (!_isInfoBusy)
                                    {
                                        <div class="">
                                            <button type="submit" class="btn btn-custom px-4 text-white col-12">
                                                <i class="bi bi-upload me-2"></i>Bilgilerimi Kaydet
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            <button class="btn btn-custom px-4 text-white col-12" type="button" disabled>
                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                Kaydediliyor...
                                            </button>
                                        </div>
                                    }
                                    <div class="">
                                        @if (_haveInfoError)
                                        {
                                            <div class="position-relative mt-2">
                                                <div class="alert alert-danger px-4 py-3 mb-0">
                                                    @_infoErrorMessage
                                                </div>
                                                <button type="button"
                                                class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                                aria-label="Kapat"
                                                @onclick="CloseInfoMessage">
                                                </button>
                                            </div>
                                        }
                                        @if (_isInfoSucces)
                                        {
                                            <div class="position-relative mt-2">
                                                <div class="alert alert-success px-4 py-3 mb-0">
                                                    <a @onclick="CloseInfoMessage" class="alert-link" style="cursor:pointer">Bilgileriniz başarıyla kaydedildi.</a>
                                                </div>
                                                <button type="button"
                                                class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                                aria-label="Kapat"
                                                @onclick="CloseInfoMessage">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    <div class="card shadow-lg border-0 mb-3 rounded-0 ">
                        <div class="card-body">
                            <EditForm Model="_userSettingChangePaswordViewModel"
                            OnValidSubmit="ChangePaswordAsync">
                                <DataAnnotationsValidator />
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">
                                        Eski Şifre
                                    </label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <InputText @bind-Value="_userSettingChangePaswordViewModel.OldPassword"
                                            class="form-control"
                                            type="@(_showOldPassword ? "text" : "password")" />
                                            <button type="button"
                                            class="btn btn-outline-secondary"
                                            @onclick="ToggleOldPasswordVisibility">
                                                <i class="@(_showOldPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="()=> _userSettingChangePaswordViewModel.OldPassword" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">
                                        Yeni Şifre
                                    </label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <InputText @bind-Value="_userSettingChangePaswordViewModel.Password"
                                            class="form-control"
                                            type="@(_showNewPassword ? "text" : "password")" />
                                            <button type="button"
                                            class="btn btn-outline-secondary"
                                            @onclick="ToggleNewPasswordVisibility">
                                                <i class="@(_showNewPassword ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="()=> _userSettingChangePaswordViewModel.Password" />
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <label class="col-form-label col-sm-3">
                                        Yeni Şifre (Tekrar)
                                    </label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <InputText @bind-Value="_userSettingChangePaswordViewModel.PasswordConfirm"
                                            class="form-control"
                                            type="@(_showNewPasswordConfirm ? "text" : "password")" />
                                            <button type="button"
                                            class="btn btn-outline-secondary"
                                            @onclick="ToggleNewPasswordConfirmVisibility">
                                                <i class="@(_showNewPasswordConfirm ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="()=> _userSettingChangePaswordViewModel.PasswordConfirm" />
                                    </div>
                                </div>
                                <div class="row">
                                    @if (!_isPasswordBusy)
                                    {
                                        <div class="">
                                            <button type="submit" class="btn btn-custom px-4 text-white col-12">
                                                <i class="bi bi-shield-lock"></i> Şifremi Değiştir
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div>
                                            <button class="btn btn-custom px-4 text-white col-12" type="button" disabled>
                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                Şifreniz Değiştiriliyor.
                                            </button>
                                        </div>
                                    }
                                    <div class="">
                                        @if (_havePasswordError)
                                        {
                                            <div class="position-relative mt-2">
                                                <div class="alert alert-danger px-4 py-3 mb-0">
                                                    @_passwordErrorMessage
                                                </div>
                                                <button type="button"
                                                class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                                aria-label="Kapat"
                                                @onclick="ClosePasswordMessage">
                                                </button>
                                            </div>
                                        }
                                        @if (_isPasswordSucces)
                                        {
                                            <div class="position-relative mt-2">
                                                <div class="alert alert-success px-4 py-3 mb-0">
                                                    <a @onclick="ClosePasswordMessage" class="alert-link" style="cursor:pointer">Şifeniz başarıyla değiştirildi.</a>
                                                </div>
                                                <button type="button"
                                                class="btn-close position-absolute top-50 end-0 translate-middle-y me-3"
                                                aria-label="Kapat"
                                                @onclick="ClosePasswordMessage">
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    <div class="row mx-0">
                        <div class="col-sm-12 px-0">
                            <div class="card shadow-lg border-0 mb-3 rounded-0 ">
                                <div class="card-body">
                                    <h5 class="d-flex align-items-center mb-3">Gönderilerim</h5>
                                    @if (_havePostError)
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            @_postErrorMessage
                                        </div>
                                    }
                                    else
                                    {
                                        @foreach (var post in _userPostsModel.UserPosts)
                                        {
                                            <div class="card mb-3 shadow-hover text-bg-light position-relative" role="button" @onclick="() => NavigateToPost(post.PostId)">
                                                @if (!post.IsDeletedByUser && !post.IsDeletedByAdmin)
                                                {
                                                    <button type="button"
                                                    class="position-absolute top-0 start-0 m-2 p-1 d-flex align-items-center justify-content-center"
                                                    style="@( _hovering == post.PostId
										        ? @"background: linear-gradient(to bottom right, #ff0000 0%, #ff33cc 100%); border:none; border-radius:50%;			width:32px;	height:32px;"
										        : @"background: #fff; border:none; border-radius:50%; width:32px; height:32px;" )"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => HidePostAsync(post.PostId)"
                                                    title="Gönderiyi Gizle"
                                                    @onmouseover="() => _hovering = post.PostId"
                                                    @onmouseout="() => _hovering = null">

                                                        <i class="bi bi-eye-slash-fill fs-6"
                                                        style="@( _hovering == post.PostId
												? "color: #fff; "
												: @"background: linear-gradient(to bottom right, #ff0000 0%, #ff33cc 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; " )">
                                                        </i>
                                                    </button>
                                                }
                                                else if (post.IsDeletedByUser && !post.IsDeletedByAdmin)
                                                {
                                                    <button type="button"
                                                    class="position-absolute top-0 start-0 m-2 p-1 d-flex align-items-center justify-content-center"
                                                    style="@(
                _hovering == post.PostId
                    ? @"background: linear-gradient(to bottom right, #28a745 0%, #218838 100%); border:none; border-radius:50%; width:32px; height:32px;"
                    : @"background: #fff; border:none; border-radius:50%; width:32px; height:32px;"
            )"
                                                    @onclick:stopPropagation="true"
                                                    @onclick="() => ShowPostAsync(post.PostId)"
                                                    title="Gönderiyi Göster"
                                                    @onmouseover="() => _hovering = post.PostId"
                                                    @onmouseout="() => _hovering = null">
                                                        <i class="bi bi-eye-fill fs-6"
                                                        style="@(
               _hovering == post.PostId
                   ? "color: #fff;"
                   : "background: linear-gradient(to bottom right, #28a745 0%, #218838 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; "
           )">
                                                        </i>
                                                    </button>
                                                }
                                                <div class="card-body p-2">
                                                    <div class="d-flex justify-content-end align-items-end mb-3">
                                                        <small class="text-muted">@post.PostCreatedDate.ToString("dd MMM yyyy HH:mm")</small>
                                                    </div>
                                                    <h5 class="card-title text-bg mb-1">@post.PostTitle</h5>
                                                    @if (post.IsDeletedByAdmin)
                                                    {
                                                        <div class="alert alert-warning mb-2">
                                                            <i class="bi bi-exclamation-triangle-fill me-1"></i>
                                                            Gönderiniz silinmiştir.
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <p class="card-text text-secondary text-truncate-3 mb-1">@post.PostContentReview</p>

                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div class="d-flex align-items-center">
                                                                <img src="@(string.IsNullOrEmpty(_userPostsModel.UserProfilePicture) ? "/anonymousIcon.png" : _userSettingInfoViewModel.ProfileImageUrl)"
                                                                alt="profilPicture"
                                                                class="profile-picture rounded-circle me-2"
                                                                style="width:32px;height:32px;" />
                                                                <span class="text-dark fw-medium">@_userPostsModel.UserName</span>
                                                            </div>
                                                            <div class="d-flex gap-3">
                                                                <span class="text-muted">
                                                                    <i class="bi bi-eye me-1"></i>@post.PostViewCount
                                                                </span>
                                                                <span class="text-muted">
                                                                    <i class="bi bi-heart me-1"></i>@post.PostLikeCount
                                                                </span>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }

                                        <nav aria-label="Page navigation example">
                                            <ul class="pagination justify-content-end mb-0">
                                                <li class="page-item"
                                                hidden="@( _currentPage == 1 )"
                                                style="cursor:pointer">
                                                    <a class="page-link mb-0" @onclick="() => GoToPageAsync(1)">İlk</a>
                                                </li>
                                                @foreach (var p in GetPageNumbers())
                                                {
                                                    <li class="page-item @(p == _currentPage ? "disabled" : "")"
                                                    style="@(p != _currentPage ? "cursor: pointer;" : "")"
                                                    @onclick=" async () => {
															if (p != _currentPage)
															{
																await GoToPageAsync(p);
															}
														}">
                                                        <p class="page-link mb-0">@p</p>
                                                    </li>
                                                }

                                                <li class="page-item"
                                                hidden="@( _currentPage == _totalPages )"
                                                @onclick="() => GoToPageAsync(_totalPages)"
                                                style="cursor:pointer">
                                                    <a class="page-link mb-0">Son</a>
                                                </li>
                                            </ul>
                                        </nav>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



@code {

    private bool _showOldPassword = false;
    private bool _showNewPassword = false;
    private bool _showNewPasswordConfirm = false;
    private bool _showDeactiveAccountPassword = false;
    private bool _changeEmail = true;
    private bool _haveError = false;
    private bool _haveInfoError = false;
    private bool _havePasswordError = false;
    private bool _havePostError = false;
    private bool _haveDeactiveError = false;
    private bool _haveProfilePictureError = false;
    private bool _isInfoBusy = false;
    private bool _isPasswordBusy = false;
    private bool _isInfoSucces = false;
    private bool _isPasswordSucces = false;
    private bool _isDeactiveSucces = false;
    private bool _isChangeProfilePictureSucces = false;
    private string? _errorMessage = null;
    private string? _infoErrorMessage = null;
    private string? _passwordErrorMessage = null;
    private string? _profilePictureErrorMessage = null;
    private string? _postErrorMessage = null;
    private string? _deactiveErrorMessage = null;
    private string? _deactiveSuccesMessage = null;
    private string? _profilePictureSuccesMessage = null;
    private string MaxBirthDate => DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd");
    private int _currentPage = 1;
    private int _size = 5;
    private int _totalPages = 5;
    private int? _hovering;

    private Guid _currentUserId;
    private UserSettingsChangePaswordViewModel _userSettingChangePaswordViewModel = new();
    private UserSettingsInfoViewModel _userSettingInfoViewModel = new();
    private UserPostsViewModel _userPostsModel = new();
    private UserDeactiveViewModel _deactiveModel = new();
    private ElementReference fileInputWrapper;
    protected override async Task OnInitializedAsync()
    {
        GetUserId();
        await GetUserSettingsInfoAsync();
        await GetUserPostsAsync(_size, _currentPage);
    }

    private void GetUserId()
    {
        _currentUserId = Guid.TryParse(AuthStateProvider.User?.id, out var g) ? g : Guid.Empty;
    }
    private void ToggleOldPasswordVisibility()
    {
        _showOldPassword = !_showOldPassword;
    }
    private void ToggleNewPasswordVisibility()
    {
        _showNewPassword = !_showNewPassword;
    }
    private void ToggleNewPasswordConfirmVisibility()
    {
        _showNewPasswordConfirm = !_showNewPasswordConfirm;
    }
    private void ToogleDeactiveAccountPassword()
    {
        _showDeactiveAccountPassword = !_showDeactiveAccountPassword;
    }
    private void ToggleEmailChange()
    {
        _changeEmail = !_changeEmail;
    }
    private void CloseInfoMessage()
    {
        _haveInfoError = false;
        _isInfoSucces = false;
        _infoErrorMessage = string.Empty;
    }
    private void ClosePasswordMessage()
    {
        _havePasswordError = false;
        _isPasswordSucces = false;
        _passwordErrorMessage = string.Empty;
    }
    private int GetAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;

        if (birthDate.Date > today.AddYears(-age))
            age--;
        return age;
    }
    private void NavigateToPost(int postId)
    {
        NavigationManager.NavigateTo($"/posts/{postId}");
    }
    private async Task ChangePaswordAsync()
    {
        if (_isPasswordBusy)
            return;
        _isPasswordBusy = true;
        _isPasswordSucces = false;
        _havePasswordError = false;

        try
        {
            var response = await UserSettingApi.ChangeUserPasswordAsync(_currentUserId, _userSettingChangePaswordViewModel);
            if (!response.IsSuccess)
            {
                _havePasswordError = true;
                _passwordErrorMessage = response.ErrorMessage;
            }
            else
            {
                var token = response.Data;
                var loggedInUser = new LoggedInUser(_currentUserId.ToString(), _userSettingInfoViewModel.UserName, AuthStateProvider.User?.roleId.ToString(), token);
                await AuthStateProvider.SetLoginAsync(loggedInUser);

                _userSettingChangePaswordViewModel.OldPassword = string.Empty;
                _userSettingChangePaswordViewModel.Password = string.Empty;
                _userSettingChangePaswordViewModel.PasswordConfirm = string.Empty;
                _isPasswordSucces = true;
            }
        }
        catch (Exception ex)
        {
            _havePasswordError = true;
            _passwordErrorMessage = ex.Message;
        }
        finally
        {
            _isPasswordBusy = false;
        }
    }
    private async Task ChangeUserInfoAsync()
    {
        if (_isInfoBusy)
            return;
        _isInfoBusy = true;
        _isInfoSucces = false;
        _haveInfoError = false;
        try
        {
            var response = await UserSettingApi.ChangeUserSettingsInfoAsync(_currentUserId, _userSettingInfoViewModel);

            if (!response.IsSuccess)
            {
                _haveInfoError = true;
                _infoErrorMessage = response.ErrorMessage;
            }
            else
            {
                _isInfoSucces = true;
                await AuthStateProvider.UpdateUserNameAsync(_userSettingInfoViewModel.UserName);
            }

        }
        catch (Exception ex)
        {
            _haveInfoError = true;
            _infoErrorMessage = ex.Message;
        }
        finally
        {
            _isInfoBusy = false;
        }
    }
    private async Task GetUserSettingsInfoAsync()
    {
        try
        {
            var response = await UserSettingApi.GetUserSettingsInfoAsync(_currentUserId);
            if (!response.IsSuccess)
            {
                _haveError = true;
                _errorMessage = response.ErrorMessage;
            }
            else
                _userSettingInfoViewModel = response.Data;
        }
        catch (Exception ex)
        {
            _haveError = true;
            _errorMessage = ex.Message;
        }
    }
    private async Task GetUserPostsAsync(int size, int page)
    {
        _haveError = false;
        _postErrorMessage = string.Empty;
        try
        {
            var response = await PostApi.GetUserPostsAsync(_currentUserId, size, page);

            if (response.IsSuccess)
            {
                _userPostsModel = response.Data;
                _totalPages = (int)Math.Ceiling((double)_userPostsModel.TotalCount / _size);
            }
            else
            {
                _havePostError = true;
                _postErrorMessage = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _havePostError = true;
            _postErrorMessage = ex.Message;
        }
    }
    private IEnumerable<int> GetPageNumbers()
    {
        if (_totalPages <= 3)
            return Enumerable.Range(1, _totalPages);

        if (_currentPage == 1)
            return Enumerable.Range(1, 3);

        if (_currentPage == _totalPages)
            return Enumerable.Range(_totalPages - 2, 3);

        return Enumerable.Range(_currentPage - 1, 3);

    }
    private async Task GoToPageAsync(int page)
    {
        if (page < 1 || page > _totalPages) return;
        await GetUserPostsAsync(_size, page);
        _currentPage = page;
        await InvokeAsync(StateHasChanged);

    }
    private async Task HidePostAsync(int postId)
    {
        try
        {
            var response = await PostApi.HidePostAsync(postId, _currentUserId);

            if (!response.IsSuccess)
            {
                _havePostError = true;
                _postErrorMessage = response.ErrorMessage;
            }
            else
                await GetUserPostsAsync(_size, _currentPage);
        }
        catch (Exception ex)
        {
            _havePostError = true;
            _postErrorMessage = ex.Message;
        }
    }
    private async Task ShowPostAsync(int postId)
    {
        try
        {
            var response = await PostApi.ShowPostAsync(postId, _currentUserId);

            if (!response.IsSuccess)
            {
                _havePostError = true;
                _postErrorMessage = response.ErrorMessage;
            }
            else
                await GetUserPostsAsync(_size, _currentPage);
        }
        catch (Exception ex)
        {
            _havePostError = true;
            _postErrorMessage = ex.Message;
        }
    }
    private async Task DeactiveUserAccountAsync()
    {
        _haveDeactiveError = false; 
        _deactiveErrorMessage = null; 
        _isDeactiveSucces = false; 
        _deactiveSuccesMessage = null;

        try
        {
            var response = await UserSettingApi.UserDeactiveAsync(_currentUserId, _deactiveModel);

            if (response.IsSuccess)
            {
                _isDeactiveSucces = true;
                _deactiveSuccesMessage = "Hesabınız başarıyla donduruldu. \nHesabınızı istediğiniz zaman tekrar aktive edebilirsiniz.\n5 saniye içinde hesabınınzdan otomatik olarak çıkış yapılacaktır.";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(5000);
                await AuthStateProvider.SetLogoutAsync();
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                _haveDeactiveError = true;
                _deactiveErrorMessage = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _haveDeactiveError = true;
            _deactiveErrorMessage = ex.Message;
        }
        finally
        {
            _deactiveModel.Password = string.Empty;
            _showDeactiveAccountPassword = false;
        }
    }
    private async Task DeleteProfilePicture(){
        try
        {
            var response = await UserSettingApi.DeleteUserProfilePictureAsync(_currentUserId);

            if (response.IsSuccess){
                _userSettingInfoViewModel.ProfileImageUrl = null;
                _profilePictureSuccesMessage = "Profil resminiz başarıyla silindi.";
            }
            else
            {
                _haveProfilePictureError = true;
                _profilePictureErrorMessage = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            _haveProfilePictureError = true;
            _profilePictureErrorMessage = ex.Message;
        }
    }

    private async Task TriggerFileInputClick()
    {
        await JSRuntime.InvokeVoidAsync("triggerClick", fileInputWrapper);
    }
    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
            return;


        var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();

        if (!allowedExtensions.Contains(extension))
        {
            _profilePictureErrorMessage = "Geçersiz dosya formatı.";
            _haveProfilePictureError = true;
            return;
        }

        if (file.Size > 10 * 1024 * 1024)
        {
            _profilePictureErrorMessage = "Fotoğraf boyutu 10 MB'dan büyük olamaz.";
            _haveProfilePictureError = true;
            return;
        }

        try
        {
            // Dosya akışını al
            var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            var streamPart = new Refit.StreamPart(stream, file.Name, file.ContentType);

			// API çağrısı
			var response = await UserSettingApi.ChangeProfilePictureAsync(_currentUserId.ToString(), streamPart);

			if (response.IsSuccess)
			{
				_isChangeProfilePictureSucces = true;
				_profilePictureSuccesMessage = "Profil resmi başarıyla yüklendi.";
				_userSettingInfoViewModel.ProfileImageUrl = response.Data?.PhotoUrl;
			}
			else
			{
				_haveProfilePictureError = true;
				_profilePictureErrorMessage = response.ErrorMessage ?? "Yükleme sırasında bir hata oluştu.";
			}
		}
		catch (Exception ex)
		{
			_haveProfilePictureError = true;
			_profilePictureErrorMessage =  ex.Message;
		}
	}
	
}
