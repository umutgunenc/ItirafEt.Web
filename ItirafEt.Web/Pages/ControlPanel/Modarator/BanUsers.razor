@page "/admin/banUsers"
@inject AuthStateProvider AuthStateProvider
@inject IBanUserApi BanUserApi


<div class="px-lg-5 py-5">
	<AutoCompleteComponent TItemType="BanUserViewModel"
						   DisplayedItemsList="Users"
						   SelectedItem="_selectedUser"
						   SelectedItemChanged="UserSelected"
						   StaticPlaceholder="Banlanacak Kullanıcıyı Seçiniz"
						   DisplayProperty="@(x => x.UserName)">
	</AutoCompleteComponent>
	@if (_isUserSelected)
	{
		<div class="col-lg-12 mx-auto my-3 border shadow-lg">

			<EditForm Model="_selectedUser"
					  OnValidSubmit="() => BanUserAsync(_selectedUser)">

				<DataAnnotationsValidator />
				<div class="row align-items-center p-3 mx-0">

					<div class="col-lg-4 col-12 mb-2 mb-lg-0 text-center d-flex justify-content-start">
						<div class="col d-flex-inline d-lg-flex">
						<label class="form-label col-lg-6 col-12 text-start pt-2 ps-1">Kullanıcı Adı</label>
							<InputText @bind-Value="_selectedUser.UserName" disabled class="form-control" />
						</div>
					</div>

					<div class="col-lg-2 col-12 mb-2 mb-lg-0 text-center d-flex justify-content-around">
						@if (_selectedUser.IsBanned)
						{
							<button type="button" class="col btn btn-primary" @onclick="() => ToggleActiveStatus(_selectedUser)">
								Banı Kaldır
							</button>
						}
						else
						{
							<button type="button" class="col btn btn-danger" @onclick="() => ToggleActiveStatus(_selectedUser)">
								Banla
							</button>
						}

						<InputCheckbox class="form-check-input" @bind-Value="_selectedUser.IsBanned" style="display:none;" />
					</div>

					<div class="col-lg-4 col-12 mb-2 mb-lg-0 text-center d-flex justify-content-around">
						<div class="col d-flex-inline d-lg-flex">
						<label class="form-label col-lg-6 col-12 text-start pt-2 ps-1">Ban Bitiş Tarihi</label>
							<InputDate @bind-Value="_selectedUser.BannedDateUntil" min="@MinBannedDate" class="form-control" disabled="@(!_selectedUser.IsBanned)" />
						</div>
					</div>


				<div class="col-lg-2 col-12 mb-2 mb-lg-0 text-center d-flex justify-content-around">
						@if (!_isBusy)
						{
							<button type="submit" class="col btn btn-success">Kaydet</button>
						}
						else
						{
							<button class="col btn btn-success" type="button" disabled>
								<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
								İşelminiz Devam Ediyor. Lütfen Bekleyiniz.
							</button>
						}
					</div>
				</div>
			</EditForm>@if (_isSuccess)
			{
				<div class="d-flex mx-3">
					<div class="alert alert-success col">
						İşleminiz başarıyla gerçekleşti.
					</div>
				</div>
			}
		</div>
	}

	@if (!_isSuccess && _errorMessage != null)
	{
		<div class="col-lg-12 mx-auto my-3 border shadow-lg">

			<div class="my-3">
				<div class="d-flex mx-3">
					<div class="alert alert-danger col">
						@_errorMessage
					</div>
				</div>
			</div>
		</div>

	}
</div>


@code {

	private Guid _adminId;
	private List<BanUserViewModel>? Users = new();
	private BanUserViewModel _selectedUser = new();
	private bool _isUserSelected = false;
	private bool _isBusy = false;
	private bool _isSuccess = false;
	private string? _errorMessage = null;
	private string MinBannedDate => DateTime.Today.ToString("yyyy-MM-dd");


	protected override async Task OnInitializedAsync()
	{
		await GetAllUsersAsync();
	}

	private void UserSelected(BanUserViewModel user)
	{
		_isUserSelected = true;
		_selectedUser = user;
	}

	private async Task BanUserAsync(BanUserViewModel user)
	{
		if (_isBusy)
			return;
		_isBusy = true;
		try
		{
			var response = await BanUserApi.BanUserAsync(user, _adminId);
			if (response.IsSuccess)
			{
				_isSuccess = true;
				_errorMessage = null;
			}
			else
			{
				_isSuccess = false;
				_errorMessage = response.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isSuccess = false;
			_errorMessage = ex.Message;
		}
		finally
		{
			_isBusy = false;
			StartCountdown(5);
		}

	}

	private void ToggleActiveStatus(BanUserViewModel user)
	{
		user.IsBanned = !user.IsBanned;
		if (!user.IsBanned)
			_selectedUser.BannedDateUntil = null;

	}

	private async void StartCountdown(int countdown)
	{
		var timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

		try
		{
			while (countdown > 0 && await timer.WaitForNextTickAsync())
			{
				countdown--;
				await InvokeAsync(StateHasChanged);
			}
		}
		finally
		{
			timer.Dispose();

			_isSuccess = false;
			_errorMessage = null;

			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task GetAllUsersAsync()
	{

		try
		{
			var response = await BanUserApi.GetAllUserDtosAsync();
			if (response.IsSuccess)
			{
				Users = response.Data;
				_errorMessage = null;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isSuccess = false;
			}
		}
		catch (Exception ex)
		{
			_isSuccess = false;
			_errorMessage = ex.Message;
		}
		finally
		{

			_isUserSelected = false;
			_selectedUser = new();
			_adminId = Guid.Parse(AuthStateProvider.User?.id);

		}

	}
}