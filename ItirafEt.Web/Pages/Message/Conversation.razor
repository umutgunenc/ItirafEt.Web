@page "/conversations/{ConversationId:guid}"
@using ItirafEt.SharedComponents.Services

@inject NavigationManager NavigationManager
@inject IMessageApi MessageApi
@inject AuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


@if (_isLoading)
{
	<div class="d-flex justify-content-center align-items-center"
		 style="height:75vh">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}
else if (_isError)
{
	<div class="col-lg-7 mx-auto py-5">
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	</div>

}
else
{
	<div class="chat-container col-lg-7 mx-auto">
		<!-- Header -->
		<div class="chat-header d-flex align-items-center">
			<div class="position-relative me-3">
				<img src="@(string.IsNullOrEmpty(_conversationDto.ResponderUser.ProfilePictureUrl) ? "/anonymousIcon.png" : _conversationDto.ResponderUser.ProfilePictureUrl)"
					 class="profile-photo rounded-circle"
					 width="56"
					 height="56"
					 style="object-fit: cover; border: 2px solid #ffffff; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"
					 alt="Profile Resmi">
			</div>
			<div>
				<h5 class="mb-0" style="cursor:pointer" @onclick="NavigateToUserProfile">@_conversationDto.ResponderUser.UserName</h5>
				@* <small class="text-muted">Çevrimiçi</small> *@
			</div>
		</div>

		<!-- Mesajlar -->

		<div class="chat-messages bg-light-subtle reverse" @ref="_messagesDiv" id="messageDiv">
			@foreach (var message in _conversationMessages.Items)
			{
				var isMine = message.SenderId == _currentUserId;
				var baseClass = isMine ? "message-out" : "message-in bg-primary-subtle";
				var fullClass = $"{baseClass} chat-message d-flex flex-column";

				<div id="message-@message.Id" class="d-flex flex-column @fullClass">
					@if (!string.IsNullOrEmpty(message.PhotoUrl))
					{
						<div class="message-photo mb-2">
							@if (_photoCache.TryGetValue(message.PhotoUrl, out var base64Data))
							{
								<img src="@base64Data"
									 class="rounded"
									 style="max-width: 100%; object-fit: cover; pointer-events: none;" />
							}
							else
							{

								<span>Default Foto Error Ekle</span>
							}
						</div>
					}

					<div class="message-content">@message.Content</div>

					<div class="message-meta d-flex justify-content-between align-items-end mt-1">
						<small class="message-time pe-3 @(isMine ? "text-white-50" : "text-muted")">
							@if (message.CreatedDate.Day < DateTime.Now.Day)
							{
								@message.CreatedDate.ToString("dd MMMM yyyy HH:mm")
							}
							else
							{
								@message.CreatedDate.ToString("HH:mm")
							}
						</small>

						@if (isMine)
						{
							<div class="read-status">
								@if (message.IsRead)
								{
									<i class="bi bi-check2-all text-white"></i>
								}
								else
								{
									<i class="bi bi-check2"></i>
								}
							</div>
						}
					</div>
				</div>
			}
		</div>

		<div class="message-input">
			<div class="input-group align-items-center">
				<!-- Mesaj Metni -->
				<input type="text"
					   class="form-control rounded-pill"
					   placeholder="Bir mesaj yazın..."
					   @bind="_messageDto.Content"
					   @bind:event="oninput"
					   @onkeydown="HandleKeyPress" />

				<!-- Gizli file input (sadece .jpg/.jpeg/.png/.gif izinli) -->
				<InputFile id="uploadPhoto"
						   accept=".jpg,.jpeg,.png,.gif"
						   style="display: none;"
						   OnChange="OnFileSelected" />

				<!-- Fotoğraf Butonu: label for uploadPhoto olduğu için tıklayınca file dialog açılır -->
				<label for="uploadPhoto"
					   class="btn blue rounded-circle ms-3 align-items-center justify-content-center"
					   style="cursor: pointer;">
					<i class="bi bi-image text-white"></i>
				</label>

				<!-- Gönder Butonu -->
				<button class="btn blue rounded-circle ms-3 align-items-center justify-content-center"
						@onclick="() => SendMessageAsync(_messageDto)">
					<i class="bi bi-send-check text-white"></i>
				</button>
			</div>
			@if (_messageErrorMessage != null)
			{
				<div class="text-danger mx-2 my-2">
					@_messageErrorMessage
				</div>
			}
			@if (_messageSuccesMessage != null)
			{
				<div class="text-succes mx-2 my-2">
					@_messageSuccesMessage
				</div>
			}
		</div>
	</div>

}

<ModalComponent @ref="_sendPhotoModal" Title="Fotoğraf Gönder" TitleClass="mx-auto" ChildClass="py-0 mx-auto h-100 d-inline-block mb-0">
	<ChildContent>
		<div class="bg-light-subtle">
			<img src="@_previewImageUrl"
				 class="b-3"
				 style="
				 max-height: 60vh;
				 max-width: 100%;
				 height: auto;
				 width: -webkit-fill-available;
				 object-fit: contain;">
		</div>
		<div class="message-input bg-light-subtle px-1">
			<div class="input-group align-items-center">
				<input type="text"
					   class="form-control rounded-pill"
					   placeholder="Bir mesaj yazın..."
					   @bind="_messageDto.Content"
					   @bind:event="oninput"
					   @onkeydown="HandleKeyPress" />

				<button class="btn blue rounded-circle ms-3 align-items-center justify-content-center"
						@onclick="() => SendMessageWithPhotoAsync(_messageDto)">
					<i class="bi bi-send-check text-white"></i>
				</button>

			</div>
		</div>
	</ChildContent>
	<FooterContent>
		<button class="btn blue col text-white fw-medium" @onclick="_sendPhotoModal.Close">Kapat</button>
	</FooterContent>
</ModalComponent>


@code {

	[Parameter]
	public Guid ConversationId { get; set; }
	private ElementReference _messagesDiv;
	private DotNetObjectReference<Conversation>? _dotNetRef;
	private IBrowserFile? _selectedFile;
	private string? _previewImageUrl;
	private Dictionary<string, string> _photoCache = new();
	private ModalComponent _sendPhotoModal = new ModalComponent();
	private ConversationViewModel? _conversationDto;
	private InfiniteScrollState<MessageViewModel>? _conversationMessages = new();
	private CreateMessageViewModel _messageDto = new();
	private HubConnection? _hubConnection;
	private string? _errorMessage;
	private string? _messageErrorMessage;
	private string? _messageSuccesMessage;
	private bool _isError = false;
	private bool _isLoading = true;
	private bool _canUserReadMessage = true;
	private bool _hasScrolled = false;
	private bool _shouldPreserveScroll = false;
	private bool _isApiBusy = false;
	private Guid _currentUserId;

	protected override async Task OnParametersSetAsync()
	{
		GetCurrentUserId();

		await CanUserReadMessageAsync(ConversationId, _currentUserId);
		if (_canUserReadMessage)
		{
			await GetConversationAsync();
			await GetConversationMessagesAsync();
			await StartHubConnection();
			await ReadAllMessageAsync();
		}

	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (_conversationMessages?.Items?.Any() == true)
		{
			if (!_hasScrolled)
			{
				_hasScrolled = true;
				await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottom", _messagesDiv);
			}

			_dotNetRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("chatScrollHelper.setupInfiniteScroll", "messageDiv", _dotNetRef, 150);
		}

	}
	private async Task<string> GetMessagePhotoAsBase64Async(string fileName)
	{
		try
		{
			var stream = await MessageApi.GetPhotoAsync(fileName);

			if (stream == null)
				return string.Empty;

			using var memoryStream = new MemoryStream();
			await stream.CopyToAsync(memoryStream);
			var base64 = Convert.ToBase64String(memoryStream.ToArray());

			var extension = Path.GetExtension(fileName).ToLowerInvariant();
			var mime = extension switch
			{
				".jpg" or ".jpeg" => "image/jpeg",
				".png" => "image/png",
				".gif" => "image/gif",
				_ => "application/octet-stream"
			};

			return $"data:{mime};base64,{base64}";
		}
		catch
		{
			return string.Empty;
		}
	}
	private async Task GetConversationMessagesAsync()
	{
		try
		{
			var response = await MessageApi.GetConversationMessagesAsync(_conversationDto, DateTime.Now, 50);
			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
				return;
			}
			else
			{
				_conversationMessages = response.Data;
				foreach (var message in _conversationMessages.Items.Where(m => !string.IsNullOrEmpty(m.PhotoUrl)))
				{
					await GetMessagePhotoAsync(message);
				}
				_isLoading = false;

			}

		}
		catch (Exception)
		{

			throw;
		}
	}
	private async Task GetMessagePhotoAsync(MessageViewModel message)
	{
		if (string.IsNullOrEmpty(message.PhotoUrl) || _photoCache.ContainsKey(message.PhotoUrl))
			return;
		var base64 = await GetMessagePhotoAsBase64Async(message.PhotoUrl);
		if (!string.IsNullOrEmpty(base64))
		{
			_photoCache[message.PhotoUrl] = base64;
			await InvokeAsync(StateHasChanged);
		}
	}
	private async Task ReadAllMessageAsync()
	{
		foreach (var message in _conversationMessages.Items)
		{
			await ReadMessageAsync(message);
		}
	}
	private async Task ReadMessageAsync(MessageViewModel message)
	{

		if (message.IsRead)
			return;
		if (message.SenderId == _currentUserId)
			return;

		try
		{
			_isApiBusy = true;

			var result = await MessageApi.ReadMessageAsync(message.ConversationId, message);
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
			throw;
		}
		finally
		{
			_isApiBusy = false;
		}
	}
	private async Task SendMessageAsync(CreateMessageViewModel messageDto)
	{
		if (string.IsNullOrWhiteSpace(messageDto.Content))
			return;
		messageDto.ReceiverId = _conversationDto.ResponderUser.UserId.ToString();
		messageDto.SenderId = _currentUserId.ToString();
		messageDto.ConversationId = ConversationId.ToString();


		try
		{
			var response = await MessageApi.SendMessageAsync(messageDto);

			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
				return;
			}
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}
		finally
		{
			messageDto.Content = string.Empty;
		}
	}
	private async Task SendMessageWithPhotoAsync(CreateMessageViewModel messageDto)
	{
		if (_selectedFile == null)
		{
			_sendPhotoModal.Close();
			_messageErrorMessage = "Lütfen bir fotoğraf seçin.";
			return;
		}

		try
		{
			var stream = _selectedFile.OpenReadStream(10 * 1024 * 1024); // max 10MB
			var photoPart = new Refit.StreamPart(stream, _selectedFile.Name, _selectedFile.ContentType);

			var response = await MessageApi.SendMessageWithPhotoAsync(ConversationId.ToString(), messageDto.Content, _currentUserId.ToString(), _conversationDto.ResponderUser.UserId.ToString(), photoPart);

			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
				return;
			}
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}
		finally
		{
			messageDto.Content = string.Empty;
			_sendPhotoModal.Close();
		}

	}
	private async Task HandleKeyPress(KeyboardEventArgs e)
	{
		if (e.Key == "Enter")
			await SendMessageAsync(_messageDto);
	}
	private async Task OnFileSelected(InputFileChangeEventArgs e)
	{

		_selectedFile = e.File;

		if (_selectedFile != null)
		{
			_messageErrorMessage = null;
			_messageSuccesMessage = null;

			if (_selectedFile.Size > 10 * 1024 * 1024)
				_messageErrorMessage = "Dosya boyutu 10 MB'dan büyük olamaz.";
			else if (!IsValidImageType(_selectedFile.ContentType))
				_messageErrorMessage = "Sadece .jpg, .jpeg, .png ve .gif dosyaları yüklenebilir.";
			else
			{
				using var ms = new MemoryStream();
				await _selectedFile.OpenReadStream(10 * 1024 * 1024).CopyToAsync(ms);
				var bytes = ms.ToArray();
				_previewImageUrl = $"data:{_selectedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";
				_sendPhotoModal.Open();
			}

			StateHasChanged();
		}

	}
	private async Task StartHubConnection()
	{
		_hubConnection = new HubConnectionBuilder()
		.WithUrl("https://localhost:7292/messagehub")
		.WithAutomaticReconnect()
		.Build();

		_hubConnection.On<Guid, MessageViewModel>("SendMessageAsync", async (conversationId, messageDto) =>
		{
			await AddMessageAsync(messageDto);
			await ReadMessageAsync(messageDto);
		});

		_hubConnection.On<Guid, MessageViewModel>("ReadMessageAsync", async (conversationId, messageDto) =>
		{

			var message = _conversationMessages.Items.FirstOrDefault(m => m.Id == messageDto.Id);

			message.IsRead = messageDto.IsRead;
			message.ReadDate = messageDto.ReadDate;

			await InvokeAsync(StateHasChanged);

		});


		await _hubConnection.StartAsync();
		await _hubConnection.SendAsync("JoinMessageGroup", ConversationId);
	}
	private async Task SendPhotoAsync(MessageViewModel messageDto)
	{
		// Fotoğraf gönderme işlemi
		await Task.Delay(1000);
	}
	private async Task CanUserReadMessageAsync(Guid conversationId, Guid userId)
	{
		var result = await MessageApi.CanUserReadMessageApiAsync(conversationId, userId);
		try
		{
			if (!result.IsSuccess)
			{
				_isLoading = false;
				_canUserReadMessage = false;
				_isError = true;
				_errorMessage = result.ErrorMessage;
				return;
			}
		}
		catch (Exception)
		{
			_isLoading = false;
			_isError = true;
			_errorMessage = result.ErrorMessage;
		}

	}
	private async Task GetConversationAsync()
	{
		_errorMessage = null;
		_isError = false;
		_isLoading = true;
		try
		{
			var result = await MessageApi.GetConversationAsync(ConversationId, _currentUserId);

			if (!result.IsSuccess)
			{
				_isError = true;
				_isLoading = false;
				_errorMessage = result.ErrorMessage;
				return;
			}
			_conversationDto = result.Data;
			_isLoading = false;


			await InvokeAsync(async () =>
			{
				await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottom", _messagesDiv);
			});
		}
		catch (Exception ex)
		{
			_isError = true;
			_isLoading = false;
			_errorMessage = ex.Message;
		}
	}
	private async Task AddMessageAsync(MessageViewModel newMessage)
	{
		if (_conversationMessages?.Items?.Count == 0 || _conversationMessages == null)
			_conversationMessages = new InfiniteScrollState<MessageViewModel>();

		_conversationMessages.Items.Insert(0, newMessage);
		await GetMessagePhotoAsync(newMessage);
		StateHasChanged();

		await Task.Delay(100);
		await JSRuntime.InvokeVoidAsync("chatScrollHelper.scrollToBottomIfNeeded", _messagesDiv);

	}
	public async ValueTask DisposeAsync()
	{
		_dotNetRef?.Dispose();

		if (_hubConnection != null)
		{
			await _hubConnection.StopAsync();
			await _hubConnection.DisposeAsync();
		}
	}

	[JSInvokable("OnScrollToTopAsync")]
	public async Task OnScrollToTopAsync()
	{
		if (_conversationMessages.HasMore && !_isApiBusy && _conversationMessages?.Items?.Count >= 50 && _conversationMessages.NextBefore.HasValue)
		{
			_isApiBusy = true;
			try
			{
				var response = await MessageApi.GetConversationMessagesAsync(_conversationDto, _conversationMessages.NextBefore, 50);
				if (response.IsSuccess)
				{
					foreach (var message in response.Data.Items.Where(m => !string.IsNullOrEmpty(m.PhotoUrl)))
					{
						await GetMessagePhotoAsync(message);
					}
					_conversationMessages.Items.AddRange(response.Data.Items);
					_conversationMessages.NextBefore = response.Data.NextBefore;
					_shouldPreserveScroll = true;

					foreach (var message in response.Data.Items)
					{
						await ReadMessageAsync(message);
					}
					await InvokeAsync(StateHasChanged);

				}
				else
				{
					_isError = true;
					_errorMessage = response.ErrorMessage;
				}
			}
			catch (Exception ex)
			{

				_isError = true;
				_errorMessage = ex.Message;
			}
			finally
			{
				_isApiBusy = false;
			}

		}

	}

	private bool IsValidImageType(string contentType)
	{
		var validTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif" };

		return validTypes.Contains(contentType.ToLowerInvariant());
	}
	private void GetCurrentUserId()
	{
		_currentUserId = Guid.TryParse(AuthStateProvider.User?.id, out var g) ? g : Guid.Empty;
	}
	private void NavigateToUserProfile()
	{
		NavigationManager.NavigateTo($"/profile/{_conversationDto.ResponderUser.UserId}");
	}
}
