@page "/inbox"
@inject IMessageApi MessageApi
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<p>	_inboxDtos.count @_inboxDtos.Count</p>

<div class="col-lg-8 col mx-auto py-5">

	@if (_isError)
	{
		<div class="alert alert-danger" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
		<div class="list-group">

			@foreach (var inboxItem in _inboxDtos)
			{

				var now = DateTime.Now;
				var diff = now - inboxItem.LastMessageDate;
				string timeText;

				if (diff.TotalMinutes < 1)
				{
					timeText = "şimdi";
				}
				else if (diff.TotalMinutes < 60)
				{
					timeText = $"{(int)diff.TotalMinutes} dk önce";
				}
				else if (diff.TotalHours < 24)
				{
					timeText = $"{(int)diff.TotalHours} saat önce";
				}
				else
				{
					timeText = inboxItem.LastMessageDate.ToString("dd MMMM yyyy");
				}

				<a @onclick="()=>NavigateToConversation(inboxItem.ConversationId)" class="list-group-item list-group-item-action d-flex gap-3 py-3" aria-current="true">
					<img src="@inboxItem.SenderUserProfileImageUrl" alt="" width="32" height="32" class="rounded-circle flex-shrink-0">
					<div class="d-flex gap-2 w-100 justify-content-between">
						<div>
							<h6 class="mb-0">
								@inboxItem.SenderUserUserName
								@if (inboxItem.UnreadMessageCount > 0)
								{
									<span class="badge bg-danger ms-2">@inboxItem.UnreadMessageCount</span>
								}
							</h6>
							<p class="mb-0 opacity-75">@inboxItem.LastMessagePrewiew</p>
						</div>
						<small class="opacity-50 text-nowrap">@timeText</small>
					</div>
				</a>
			}
		</div>
	}
</div>


@code {

	private Guid _currentUserId;
	private List<InboxDto> _inboxDtos = new List<InboxDto>();
	private bool _isError = false;
	private string? _errorMessage;


	protected override async Task OnInitializedAsync()
	{
		GetUserId();
		await GetUserMessages();
	}


	private void GetUserId()
	{
		if (Guid.TryParse(AuthStateProvider.User?.id, out Guid parsedId))
			_currentUserId = parsedId;
	}

	private async Task GetUserMessages()
	{

		try
		{
			var response = await MessageApi.GetUserMessagesAsync(_currentUserId);
			if (!response.IsSuccess)
			{
				_isError = true;
				_errorMessage = response.ErrorMessage;
			}
			else
				_inboxDtos = response.Data;
		}
		catch (Exception ex)
		{
			_isError = true;
			_errorMessage = ex.Message;
		}
	}

	private void NavigateToConversation(Guid conversationId) {
		NavigationManager.NavigateTo($"/conversations/{conversationId}");
	}

}
