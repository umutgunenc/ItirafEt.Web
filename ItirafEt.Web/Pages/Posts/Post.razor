@page "/posts/{postId:int}"
@inject IPostApi PostApi
@inject IReactionApi ReactionApi
@inject ICommentApi CommentApi
@inject IPostViewApi PostViewApi
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<div class="col-md-8 col mx-auto">
	<div class="card shadow-lg rounded-4 border-1 mb-3 text-bg-light">
		@if (_isPostHaveError)
		{
			<div class="alert alert-danger m-3" role="alert">
				@_errorMessage
			</div>
		}
		else
		{
			@if (_isBusy)
			{
				<div class="d-flex justify-content-center align-items-center" style="height: 20vh;">
					<div class="spinner-border text-primary fs-5" role="status" style="width: 3rem; height: 3rem;">
						<span class="visually-hidden">Loading...</span>
					</div>
				</div>
			}
			else
			{
				<div class="card-body">
					<h5 class="card-title fw-bold text-break">@_postDto.Title</h5>

					<p class="card-text text-break"
					   style="text-align: justify;
					text-justify: inter-word;
					white-space: pre-wrap;">
						@_postDto.Content
					</p>

					<div class="d-flex flex-column flex-md-row justify-content-between">
						<!-- Desktop Left (md+) -->
						<div class="d-none d-md-flex gap-4 align-items-start order-md-1">
							<!-- Beğeni -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-up{(_isAlreadyLiked ? "-fill":"")} fs-5 text-primary" )"
								   style="cursor:pointer" @onclick="LikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowLikesAsync">
									@_likeCount
								</span>
							</div>
							<!-- Beğenmeme -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-down{(_isAlreadyDisliked ? "-fill":"")} fs-5 text-danger" )"
								   style="cursor:pointer" @onclick="DislikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowDislikesAsync">
									@_dislikeCount
								</span>
							</div>
							<!-- Şikayet -->
							@if (!_isPostOwner)
							{
								<div class="d-flex flex-column align-items-center">
									<i class="bi bi-exclamation-circle fs-5 text-danger"
									   style="cursor:pointer" @onclick="ReportAsync"></i>
									<span class="text-muted small">Şikayet</span>
								</div>
							}
						</div>

						<!-- Right Section (Always) -->
						<div class="order-md-2 mb-2 mb-md-0 text-end">
							<!-- Tarih -->
							<div class="text-muted small">
								@_postDto.CreatedDate.ToString("dd/MM/yyyy HH:mm")
								@if (_postDto.UpdatedDate.HasValue)
								{
									@($" - {_postDto.UpdatedDate.Value.ToString("dd/MM/yyyy HH:mm")}")
								}
							</div>
							<!-- Görüntülenme -->
							<div class="text-muted small mt-2" style="cursor:pointer" @onclick="ShowViewsAsync">
								<i class="bi bi-eye me-1"></i>@_postViewCount
							</div>
						</div>

						<!-- Mobile Bottom (md-) -->
						<div class="d-flex d-md-none justify-content-end gap-4 mt-2 order-3">
							<!-- Beğeni -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-up{(_isAlreadyLiked ? "-fill":"")} fs-5 text-primary" )"
								   style="cursor:pointer" @onclick="LikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowLikesAsync">
									@_likeCount
								</span>
							</div>
							<!-- Beğenmeme -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-down{(_isAlreadyDisliked ? "-fill":"")} fs-5 text-danger" )"
								   style="cursor:pointer" @onclick="DislikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowDislikesAsync">
									@_dislikeCount
								</span>
							</div>
							<!-- Şikayet -->
							@if (!_isPostOwner)
							{
								<div class="d-flex flex-column align-items-center">
									<i class="bi bi-exclamation-circle fs-5 text-danger"
									   style="cursor:pointer" @onclick="ReportAsync"></i>
									<span class="text-muted small">Şikayet</span>
								</div>
							}
						</div>
					</div>

					<hr />

					<div class="d-flex flex-column gap-2 mb-4">
						<!-- Üst Bilgi Satırı -->
						<div class="d-flex align-items-center gap-3">
							<!-- Profil Fotoğrafı -->
							<img src="https://cdn05.zipify.com/bWSYBuu1Sq051fHeVVXWQ0o5Oak=/fit-in/3840x0/8b6f8bed855a41dfb6f5d7fe89d2d86b/pot013-blog-hero-horizontal-51.jpeg"
								 class="rounded-circle"
								 width="56" height="56"
								 style="object-fit: cover; border: 2px solid #ffffff; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">

							<!-- Kullanıcı Bilgileri -->
							<div class="d-flex flex-column">
								<div class="d-flex align-items-center gap-2">
									<h5 class="mb-0" style="font-weight: 700; color: #2d3436;">@_postDto.UserName</h5>
								</div>

								<div class="d-flex  align-items-center justify-content-between">

									<div class="d-flex align-items-center gap-2">
										<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
											@_postDto.UserAge
										</span>
										@if (_postDto.UserGenderId == (int)GenderEnum.Male)
										{
											<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-male me-1"></i>Erkek
											</span>
										}
										else if (_postDto.UserGenderId == (int)GenderEnum.Female)
										{
											<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-female me-1"></i>Kadın
											</span>
										}

										<a href="#" style="text-decoration: none; color:lightseagreen;" @onclick="SendMessage">
											<i class="bi bi-chat-right-heart-fill" style="font-size: 1.25rem;"></i>
										</a>
									</div>



								</div>
							</div>
						</div>



					</div>

					<div class="mt-4">
						<h6 class="fw-bold" @onclick="ShowComments" style="cursor:pointer">
							Yorumlar @($"({_comments?.Count ?? 0})")
						</h6>
					</div>
					@if (_showComments)
					{
						<div class="m-4">
							@if (_comments?.Count > 0)
							{
								<EditForm Model="_commentModel" OnValidSubmit="AddCommentAsync">
									<DataAnnotationsValidator />

									<div class="mb-3">
										<label for="yorum" class="form-label fw-bold">Yorumunuz</label>
										<InputTextArea id="yorum"
													   class="form-control"
													   placeholder="Yorum yazın..."
													   @bind-Value="_commentModel.Content"
													   rows="4" />
										<ValidationMessage For="@(() => _commentModel.Content)" />
									</div>

									<div class="my-3">
										<button type="submit" class="btn btn-primary col-12">Gönder</button>
									</div>
								</EditForm>

								<div class="card mb-2 shadow-sm">
									<div class="card-body p-2">
										<!-- Yorum listesi -->
										@foreach (var comment in _comments)
										{
											<div class="d-flex justify-content-between">
												<div>
													<img src="https://cdn05.zipify.com/bWSYBuu1Sq051fHeVVXWQ0o5Oak=/fit-in/3840x0/8b6f8bed855a41dfb6f5d7fe89d2d86b/pot013-blog-hero-horizontal-51.jpeg" class="rounded-circle" width="24" height="24" style="object-fit: cover;" />

													<strong class="ms-2">@comment.UserName</strong>

													<small class="text-muted ms-2">@comment.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
												</div>
												<button class="btn btn-sm btn-link text-primary" @onclick="() => ToggleReplyBox(comment.Id)">
													Cevapla
												</button>
											</div>
											<p class="mb-1" style="white-space: pre-wrap;">@comment.Content</p>

											<!-- Reply input -->
											@if (_replyToCommentId == comment.Id)
											{
												<div class="input-group mb-2">
													<input type="text"
														   class="form-control form-control-sm"
														   placeholder="Cevabınızı yazın..."
														   @bind="_replyText" />
													<div class="input-group-append">
														<button class="btn btn-sm btn-outline-primary"
																@onclick="() => AddReplyAsync(comment.Id)">
															Cevapla
														</button>
													</div>
												</div>
											}

											<!-- Alt yorumlar (replies) -->
											@if (comment.CommentReplies?.Any() == true)
											{
												<div class="ms-5">
													@foreach (var reply in comment.CommentReplies)
													{
														<div class="mb-1">
															<div class="card-text p-2">
																<div class="d-flex justify-content-between">
																	<div>
																		<img src="https://cdn05.zipify.com/bWSYBuu1Sq051fHeVVXWQ0o5Oak=/fit-in/3840x0/8b6f8bed855a41dfb6f5d7fe89d2d86b/pot013-blog-hero-horizontal-51.jpeg" class="rounded-circle ms-2" width="24" height="24" style="object-fit: cover;" />

																		<strong class="ms-2">@comment.UserName</strong>															<small class="text-muted ms-2">@reply.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
																	</div>
																</div>
																<p class="mb-0" style="white-space: pre-wrap;">@reply.Content</p>
															</div>
														</div>
													}
												</div>
											}
										}
									</div>
								</div>
							}
							@if (_comments?.Count == null)
							{
								<div class="alert alert-info" role="alert">
									@_commentErrorMessage
								</div>

								<EditForm Model="_commentModel" OnValidSubmit="AddCommentAsync">
									<DataAnnotationsValidator />

									<div class="mb-3">
										<label for="yorum" class="form-label fw-bold">Yorumunuz</label>
										<InputTextArea id="yorum"
													   class="form-control"
													   placeholder="Yorum yazın..."
													   @bind-Value="_commentModel.Content"
													   rows="4" />
										<ValidationMessage For="@(() => _commentModel.Content)" />
									</div>

									<div class="my-3">
										<button type="submit" class="btn btn-primary col-12">Gönder</button>
									</div>
								</EditForm>
							}
							else if (_isCommentsHaveError)
							{
								<div class="alert alert-danger" role="alert">
									@_commentErrorMessage
								</div>
							}
						</div>
					}
				</div>
			}
		}
	</div>
</div>


@code {
	[Parameter]
	public int postId { get; set; }

	private PostDto _postDto = new();
	private CommentsDto _commentModel = new();
	private List<CommentsDto>? _comments = new();
	private List<ReactionDto>? _reactions = new();
	private HubConnection _reactionHubConnection;
	private HubConnection _commentHubConnection;
	private HubConnection _postViewHubConnection;

	private Guid? _currentUserId;
	private int? _likeCount;
	private int? _dislikeCount;
	private int? _newReactionId;
	private int? _oldReactionId;
	private int? _loggedInUserLastReaction;
	private int? _postViewCount;
	private bool _isBusy = true;
	private bool _isPostOwner = false;
	private bool _isUserLoggedIn = false;
	private bool _isAlreadyLiked = false;
	private bool _isAlreadyDisliked = false;
	private bool _showComments = false;
	private bool _isCommentsHaveError = false;
	private bool _isPostHaveError = false;
	private string _newCommentText;
	private string? _errorMessage;
	private string? _commentErrorMessage;
	private List<string> allowedRoles = new List<string>
	{
		nameof(UserRoleEnum.SuperAdmin),
		nameof(UserRoleEnum.Admin),
		nameof(UserRoleEnum.Moderator),
		nameof(UserRoleEnum.SuperUser)
	};

	protected override async Task OnInitializedAsync()
	{
		await StartReactionHubConnectionAsync();
		await StartPostViewHubConnectionAsync();
		await StartTasksAsync();
		await GetPostViewCountAsync();
		CheckUserLoggedIn();
		IsUserPostOwner(_isPostHaveError);
		UpdatePostReactionCounts();
		UpdatePostReactionButtons();
		await ReadPostAsync();
		_isBusy = false;
	}

	private async Task LikePostAsync()
	{
		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}
		try
		{
			var result = await ReactionApi.LikePostAsync(postId, _currentUserId.Value);
			if (result.IsSuccess)
			{
				var reaction = result.Data;
				var isUpdated = result.isUpdated;
				await _reactionHubConnection.SendAsync("NotifyPostLikedOrDisliked", postId, reaction, isUpdated);
				UpdateReactions(reaction, (bool)isUpdated);
			}
			else
				_errorMessage = result.ErrorMessage;
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}
	}
	private async Task DislikePostAsync()
	{
		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}
		try
		{
			var result = await ReactionApi.DislikePostAsync(postId, _currentUserId.Value);
			if (result.IsSuccess)
			{
				var reaction = result.Data;
				var isUpdated = result.isUpdated;
				await _reactionHubConnection.SendAsync("NotifyPostLikedOrDisliked", postId, reaction, isUpdated);
				UpdateReactions(reaction, isUpdated);
			}
			else
				_errorMessage = result.ErrorMessage;
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
		}

	}
	private async Task ReportAsync()
	{
		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}
		await Task.Delay(1000);
	}

	private async Task ShowLikesAsync()
	{
		await Task.Delay(1000);
	}
	private async Task ShowDislikesAsync()
	{
		await Task.Delay(1000);
	}
	private async Task ShowViewsAsync()
	{
		await Task.Delay(1000);

	}


	private async Task ReadPostAsync()
	{
		if (!_isUserLoggedIn)
			return;
		try
		{
			var response = await PostViewApi.ReadPostAsync(postId, _currentUserId);
			if (response.IsSuccess)
			{
				var (viewCount, id) = response.Data;
				await _postViewHubConnection.SendAsync("NotifyPostRead", postId, viewCount);
				// await _postViewHubConnection.SendAsync("NotifyPostRead", postId);
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}

	private void CheckUserLoggedIn()
	{
		_isUserLoggedIn = AuthStateProvider.IsLoggedIn;
	}
	private void NavigateToLogin()
	{
		NavigationManager.NavigateTo("/auth/login");
	}
	private void NavigateToPricing()
	{
		NavigationManager.NavigateTo("/pricing");
	}

	private void ShowComments()
	{
		_showComments = !_showComments;
	}


	private void UpdatePostReactionCounts()
	{
		_likeCount = _reactions?.Count(r => r.ReactionTypeId == (int)ReactionTypeEnum.Like) ?? 0;
		_dislikeCount = _reactions?.Count(r => r.ReactionTypeId == (int)ReactionTypeEnum.Dislike) ?? 0;
	}

	private void UpdatePostReactionButtons()
	{

		_isAlreadyLiked = _reactions?.Any(r => r.ReactingUserId == _currentUserId && r.ReactionTypeId == (int)ReactionTypeEnum.Like) ?? false;
		_isAlreadyDisliked = _reactions?.Any(r => r.ReactingUserId == _currentUserId && r.ReactionTypeId == (int)ReactionTypeEnum.Dislike) ?? false;
	}

	private void UpdateReactions(ReactionDto? reaction, bool? isReactionUpdated)
	{
		if (isReactionUpdated == true)
		{
			var index = _reactions?.FindIndex(r => r.ReactingUserId == reaction.ReactingUserId) ?? -1;
			if (index >= 0 && _reactions != null)
				_reactions[index] = reaction;
		}
		else
			_reactions?.Add(reaction);

		UpdatePostReactionCounts();
		UpdatePostReactionButtons();
	}

	private async Task StartReactionHubConnectionAsync()
	{
		_reactionHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/reactionhub")
					.WithAutomaticReconnect()
					.Build();

		_reactionHubConnection.On<ReactionDto, bool>("PostLikedOrDisliked", async (reaction, isReactionUpdated) =>
		{
			UpdateReactions(reaction, isReactionUpdated);
			StateHasChanged();
		});

		await _reactionHubConnection.StartAsync();
		await _reactionHubConnection.SendAsync("JoinPostReactionGroup", postId);

	}

	private async Task StartPostViewHubConnectionAsync()
	{
		_postViewHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/postviewhub")
					.WithAutomaticReconnect()
					.Build();



		_postViewHubConnection.On<int, int, int>("PostRead", (categoryId, updatedPostId, viewCount) =>
		{
			if (updatedPostId == postId)
			{
				_postViewCount = viewCount;
				StateHasChanged();
			}
		});

		await _postViewHubConnection.StartAsync();
		await _postViewHubConnection.SendAsync("JoinPostPostCountGroup", postId);
		await _postViewHubConnection.SendAsync("JoinCategoryPostCountGroup", _postDto.CategoryId);
	}


	private async Task StartTasksAsync()
	{
		var postTask = PostApi.GetPostByIdAsync(postId);
		var reactionsTask = ReactionApi.GetPostReactionsAsync(postId);
		var commentsTask = CommentApi.GetPostCommentsAsync(postId);
		await Task.WhenAll(postTask, reactionsTask, commentsTask);

		var reactionsTaskResult = await reactionsTask;
		GetPost(postTask.Result);
		GetComments(commentsTask.Result);
		GetReactions(reactionsTask.Result);
	}

	private async Task GetPostViewCountAsync()
	{
		var response = await PostViewApi.GetPostReadCountAsync(postId);
		if (response.IsSuccess)
			_postViewCount = response.Data;
	}

	private void IsUserPostOwner(bool IsPostError)
	{
		if (IsPostError)
			return;

		if (_postDto == null)
			return;

		if (Guid.TryParse(AuthStateProvider.User?.id, out Guid parsedId))
		{
			_currentUserId = parsedId;
			_isPostOwner = _postDto.UserId == _currentUserId;
		}
		else
			_isPostOwner = false;
	}

	private string GetUserGenderName(int genderId)
	{
		switch (genderId)
		{
			case (int)GenderEnum.Male:
				return "Erkek";
			case (int)GenderEnum.Female:
				return "Kadın";
			default:
				return "";
		}
	}

	private void GetPost(ApiResponses<PostDto> response)
	{
		try
		{
			if (response.IsSuccess)
			{
				_postDto = response.Data;
				_errorMessage = null;
				_isPostHaveError = false;

			}
			else
			{
				_postDto = null;
				_isPostHaveError = true;
				_errorMessage = response.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetReactions(ApiResponses<List<ReactionDto>> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_reactions = response.Data;
				if (_errorMessage != null)
					_errorMessage = null;
				_isPostHaveError = false;
			}
			else
			{
				_reactions = null;
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetComments(ApiResponses<List<CommentsDto>> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_comments = response.Data;
				_commentErrorMessage = null;
			}
			else
			{
				_comments = null;
				_commentErrorMessage = response.ErrorMessage;
			}
			_isCommentsHaveError = false;
		}
		catch (Exception ex)
		{
			_isCommentsHaveError = true;
			_commentErrorMessage = ex.Message;
		}
	}




	private void SendMessage()
	{

		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}
		var userRole = AuthStateProvider.User?.roleId;

		if (allowedRoles.Contains(userRole))
		{
			// Mesaj gönderme işlemi
			// Mesaj gönderme API çağrısı yapılabilir
			// Örnek: await MessageApi.SendMessageAsync(_postDto.UserId, messageContent);
		}
		else
		{
			NavigateToPricing();
		}
	}

	// Hangi yoruma cevap kutusu açık
	private int? _replyToCommentId;

	// Cevap metni
	private string _replyText;

	private async Task AddCommentAsync()
	{
		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}
		await Task.Delay(1000);
		if (string.IsNullOrWhiteSpace(_commentModel.Content))
			return;
		_newCommentText = _newCommentText.Trim();
		if (string.IsNullOrWhiteSpace(_commentModel.Content))
			return;

		try
		{
			await CommentApi.AddCommentAsync(postId, (Guid)_currentUserId, _commentModel);

		}
		catch (Exception)
		{

			throw;
		}




		_commentModel.Content = string.Empty;
	}

	private void ToggleReplyBox(int commentId)
	{
		if (_replyToCommentId == commentId)
		{
			_replyToCommentId = null;
			_replyText = string.Empty;
		}
		else
		{
			_replyToCommentId = commentId;
			_replyText = string.Empty;
		}
	}

	private async Task AddReplyAsync(int parentCommentId)
	{
		await Task.Delay(1000);
		// if (string.IsNullOrWhiteSpace(_replyText))
		// 	return;

		// // API çağrısı ile cevabı ekleyin...
		// // await _commentService.AddReply(postId: _postDto.Id, parentCommentId, _replyText);

		// var parent = _postDto.Comments.First(c => c.Id == parentCommentId);
		// parent.Replies.Add(new ReplyDto
		// 	{
		// 		Id = /*dönen id*/,
		// 		UserName = _currentUserName,
		// 		Content = _replyText,
		// 		CreatedDate = DateTime.Now
		// 	});

		// _replyToCommentId = null;
		// _replyText = string.Empty;
	}

}


