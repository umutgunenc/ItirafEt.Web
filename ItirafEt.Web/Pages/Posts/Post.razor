@page "/posts/{postId:int}"
@inject IPostApi PostApi
@inject IReactionApi ReactionApi
@inject ICommentApi CommentApi
@inject IPostViewApi PostViewApi
@inject IMessageApi MessageApi
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<div class="col-lg-8 col mx-auto py-5 px-2">
	<div class="card shadow-lg rounded-4 border-1 mb-3 text-bg-light">
		@if (_isPostHaveError)
		{
			<div class="alert alert-danger m-3" role="alert">
				@_errorMessage
			</div>
		}
		else
		{
			@if (_isBusy)
			{
				<div class="d-flex justify-content-center align-items-center" style="height: 20vh;">
					<div class="spinner-border text-primary fs-5" role="status" style="width: 3rem; height: 3rem;">
						<span class="visually-hidden">Loading...</span>
					</div>
				</div>
			}
			else
			{

				<div class="card-body">
					<h5 class="card-title fw-bold text-break">@_postDto.Title</h5>

					<p class="card-text text-break"
					   style="text-align: justify;
					text-justify: inter-word;
					white-space: pre-wrap;">
						@_postDto.Content
					</p>

					<div class="d-flex flex-column flex-md-row justify-content-between">
						<!-- Desktop Left (md+) -->
						<div class="d-none d-md-flex gap-4 align-items-start order-md-1">
							<!-- Beğeni -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-up{(_isAlreadyLiked ? "-fill":"")} fs-5 text-primary" )"
								   style="cursor:pointer" @onclick="LikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowLikes">
									@_likeCount
								</span>
							</div>
							<!-- Beğenmeme -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-down{(_isAlreadyDisliked ? "-fill":"")} fs-5 text-danger" )"
								   style="cursor:pointer" @onclick="DislikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowDislikes">
									@_dislikeCount
								</span>
							</div>
							<!-- Şikayet -->
							@if (!_isPostOwner)
							{
								<div class="d-flex flex-column align-items-center">
									<i class="bi bi-exclamation-circle fs-5 text-danger"
									   style="cursor:pointer" @onclick="ReportPost"></i>
									<span class="text-muted small">Şikayet</span>
								</div>
							}
						</div>

						<!-- Right Section (Always) -->
						<div class="order-md-2 mb-2 mb-md-0 text-end">
							<!-- Tarih -->
							<div class="text-muted small">
								@_postDto.CreatedDate.ToString("dd/MM/yyyy HH:mm")
								@if (_postDto.UpdatedDate.HasValue)
								{
									@($" - {_postDto.UpdatedDate.Value.ToString("dd/MM/yyyy HH:mm")}")
								}
							</div>
							<!-- Görüntülenme -->
							<div class="text-muted small mt-2" style="cursor:pointer" @onclick="ShowViwers">
								<i class="bi bi-eye me-1"></i>@_postViewCount
							</div>
						</div>

						<!-- Mobile Bottom (md-) -->
						<div class="d-flex d-md-none justify-content-end gap-4 mt-2 order-3">
							<!-- Beğeni -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-up{(_isAlreadyLiked ? "-fill":"")} fs-5 text-primary" )"
								   style="cursor:pointer" @onclick="LikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowLikes">
									@_likeCount
								</span>
							</div>
							<!-- Beğenmeme -->
							<div class="d-flex flex-column align-items-center">
								<i class="@( $"bi bi-hand-thumbs-down{(_isAlreadyDisliked ? "-fill":"")} fs-5 text-danger" )"
								   style="cursor:pointer" @onclick="DislikePostAsync"></i>
								<span class="text-muted small" style="cursor:pointer" @onclick="ShowDislikes">
									@_dislikeCount
								</span>
							</div>
							<!-- Şikayet -->
							@if (!_isPostOwner)
							{
								<div class="d-flex flex-column align-items-center">
									<i class="bi bi-exclamation-circle fs-5 text-danger"
									   style="cursor:pointer" @onclick="ReportPost"></i>
									<span class="text-muted small">Şikayet</span>
								</div>
							}
						</div>
					</div>

					<hr />

					<div class="d-flex flex-column gap-2 mb-4">
						<!-- Üst Bilgi Satırı -->
						<div class="d-flex align-items-center gap-3">
							<!-- Profil Fotoğrafı -->
							<img src="@(string.IsNullOrEmpty(_postDto.UserProfileImageUrl)? "/anonymousIcon.png" : _postDto.UserProfileImageUrl)"
								 class="profile-photo rounded-circle"
								 width="56" height="56">

							<!-- Kullanıcı Bilgileri -->
							<div class="d-flex flex-column">
								<div class="d-flex align-items-center gap-2 mb-2">
									<h5 class="mb-0" style="font-weight: 700; color: #2d3436; cursor:pointer" @onclick="ShowUserProfile">@_postDto.UserName</h5>
								</div>

								<div class="d-flex  align-items-center justify-content-between">

									<div class="d-flex align-items-center gap-2">
										<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
											@_postDto.UserAge
										</span>
										@if (_postDto.UserGenderId == (int)GenderEnum.Male)
										{
											<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-male me-1"></i>Erkek
											</span>
										}
										else if (_postDto.UserGenderId == (int)GenderEnum.Female)
										{
											<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-female me-1"></i>Kadın
											</span>
										}
										@if (_currentUserId != _postDto.UserId)
										{
											<a style="text-decoration: none; color:lightseagreen; cursor:pointer" @onclick="()=>SendMessageAsync(_postDto.UserId)">
												<i class="bi bi-chat-right-heart-fill" style="font-size: 1.25rem;"></i>
											</a>
										}
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="mt-4">
						<h6 class="fw-bold" @onclick="ShowComments" style="cursor:pointer">
							Yorumlar @($"({_comments?.Count ?? 0})")
						</h6>
					</div>
					@if (_showComments)
					{
						<div class="my-4">
							@if (_comments?.Count > 0)
							{
								<EditForm Model="_commentModel" OnValidSubmit="AddCommentAsync">
									<DataAnnotationsValidator />

									<div class="mb-3">
										<InputTextArea id="yorum"
													   class="form-control"
													   placeholder="Yorum yazın..."
													   @bind-Value="_commentModel.Content"
													   rows="4" />
										<ValidationMessage For="@(() => _commentModel.Content)" />
									</div>

									<div class="my-3">
										<button type="submit" class="btn blue col-12 text-white fw-medium" disabled="@_isApiBusy">Gönder</button>
									</div>
								</EditForm>

								<div class="card mb-2 shadow-sm">
									<div class="card-body p-2">
										<!-- Yorum listesi -->
										@foreach (var comment in _comments)
										{
											<div class="d-flex justify-content-between">
												<div>
													<img src="@(string.IsNullOrEmpty(comment.CommentUserProfilPhotoUrl)? "/anonymousIcon.png" : comment.CommentUserProfilPhotoUrl)"
													class="profile-photo rounded-circle" 
													width="24" height="24" />
													<strong class="ms-2">@comment.UserName</strong>
													<small class="text-muted ms-2">@comment.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
												</div>
												<button class="btn btn-sm btn-link text-primary" @onclick="() => ToggleReplyBox(comment.Id)">
													Cevapla
												</button>
											</div>
											<p class="mb-1" style="white-space: pre-wrap;">@comment.Content</p>

											<!-- Reply input -->
											@if (_replyToCommentId == comment.Id)
											{
												<EditForm Model="_replyModel"
														  OnValidSubmit="()=>AddReplyAsync(comment.Id)">
													<DataAnnotationsValidator />
													<div class="input-group mb-2">
														<input type="text"
															   class="form-control form-control-sm"
															   placeholder="Cevabınızı yazın..."
															   @bind="_replyModel.Content" />
														<div class="input-group-append">
															<button class="btn btn-sm btn-outline-primary" type="submit">
																@* @onclick="() => AddReplyAsync(comment.Id)" *@
																Cevapla
															</button>
														</div>

													</div>
													<ValidationMessage For="@(() => _replyModel.Content)" />

												</EditForm>
											}
											<!-- Alt yorumlar (replies) -->
											@if (comment.CommentReplies?.Any() == true)
											{
												<div class="ms-5">
													@foreach (var reply in comment.CommentReplies)
													{
														<div class="mb-1">
															<div class="card-text p-2">
																<div class="d-flex justify-content-between">
																	<div>
													<img src="@(string.IsNullOrEmpty(comment.CommentUserProfilPhotoUrl)? "/anonymousIcon.png" : comment.CommentUserProfilPhotoUrl)"
													class="profile-photo rounded-circle ms-2" width="24" height="24" />
																		<strong class="ms-2">@comment.UserName</strong>
																		<small class="text-muted ms-2">@reply.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
																	</div>
																</div>
																<p class="mb-0" style="white-space: pre-wrap;">@reply.Content</p>
															</div>
														</div>
													}
												</div>
											}
										}
									</div>
								</div>
							}
							@if (_comments?.Count == null)
							{
								<div class="alert alert-info" role="alert">
									@_commentErrorMessage
								</div>

								<EditForm Model="_commentModel"
										  OnValidSubmit="AddCommentAsync">
									<DataAnnotationsValidator />

									<div class="mb-3">
										<InputTextArea id="yorum"
													   class="form-control"
													   placeholder="Yorum yazın..."
													   @bind-Value="_commentModel.Content"
													   rows="4" />
										<ValidationMessage For="@(() => _commentModel.Content)" />
									</div>

									<div class="my-3">
										<button type="submit" class="btn blue col-12 text-white fw-medium" disabled="@_isApiBusy">Gönder</button>
									</div>
								</EditForm>
							}
							else if (_isCommentsHaveError)
							{
								<div class="alert alert-danger" role="alert">
									@_commentErrorMessage
								</div>
							}
						</div>
					}
				</div>
			}
		}
	</div>
</div>

<ModalComponent @ref="_likesModel" Title="Beğeneler" TitleClass="mx-auto" ChildClass="mb-3">
	<ChildContent>
		@if (_reactions.Any(r => r.ReactionTypeId == (int)ReactionTypeEnum.Like))
		{
			@foreach (var reaction in _reactions.OrderByDescending(x => x.CreatedDate))
			{
				@if (reaction.ReactionTypeId == (int)ReactionTypeEnum.Like)
				{
					<div class="card mb-4 shadow border-0" style="border-radius: 1rem;">
						<div class="d-flex flex-column gap-2 my-3 mx-2">
							<!-- Üst Bilgi Satırı -->
							<div class="d-flex align-items-center gap-2 gap-md-4">
								<!-- Profil Fotoğrafı -->
								<img src="@(string.IsNullOrEmpty(reaction.ReactingUserProfileImageUrl)? "/anonymousIcon.png" : reaction.ReactingUserProfileImageUrl)"
									 class="profile-photo rounded-circle"
									 width="56" height="56">
								<div class="d-flex flex-column">
									<div class="d-flex align-items-center gap-1 gap-sm-3 mb-2">
										<h5 class="mb-0" style="font-weight: 700; color: #2d3436; cursor:pointer" @onclick="()=>ShowUserProfile(reaction.ReactingUserId)">@reaction.ReactingUserUserName</h5>
										<small>
											@reaction.CreatedDate.ToString("HH:mm dd/MM/yyyy")
										</small>
									</div>

									<div class="d-flex align-items-center justify-content-between">

										<div class="d-flex align-items-center gap-2">
											<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												@reaction.ReactingUserAge
											</span>
											@if (reaction.ReactingUserGenderId == (int)GenderEnum.Male)
											{
												<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
													<i class="bi bi-gender-male me-1"></i>Erkek
												</span>
											}
											else if (reaction.ReactingUserGenderId == (int)GenderEnum.Female)
											{
												<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
													<i class="bi bi-gender-female me-1"></i>Kadın
												</span>
											}
											@if (_currentUserId != reaction.ReactingUserId)
											{
												<a style="text-decoration: none; color:lightseagreen; cursor:pointer" @onclick="()=>SendMessageAsync(reaction.ReactingUserId)">
													<i class="bi bi-chat-right-heart-fill" style="font-size: 1.25rem;"></i>
												</a>
											}

										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			}
		}
		else
		{
			<div class="alert alert-info" role="alert">
				Gönderi Henüz Beğenilmedi.
			</div>
		}
	</ChildContent>
	<FooterContent>
		<button class="btn blue col text-white fw-medium" @onclick="_likesModel.Close">Kapat</button>
	</FooterContent>
</ModalComponent>

<ModalComponent @ref="_dislikeModel" Title="Beğenmeyenler" TitleClass="mx-auto" ChildClass="mb-3">
	<ChildContent>
		@if (_reactions.Any(r => r.ReactionTypeId == (int)ReactionTypeEnum.Dislike))
		{
			@foreach (var reaction in _reactions.OrderByDescending(x => x.CreatedDate))
			{
				@if (reaction.ReactionTypeId == (int)ReactionTypeEnum.Dislike)
				{
					<div class="card mb-4 shadow border-0" style="border-radius: 1rem;">
						<div class="d-flex flex-column gap-2 my-3 mx-2">
							<!-- Üst Bilgi Satırı -->
							<div class="d-flex align-items-center gap-2 gap-sm-4">
								<!-- Profil Fotoğrafı -->
								<img src="@(string.IsNullOrEmpty(reaction.ReactingUserProfileImageUrl)? "/anonymousIcon.png" : reaction.ReactingUserProfileImageUrl)"
									 class="profile-photo rounded-circle"
									 width="56" height="56">
								<div class="d-flex flex-column">
									<div class="d-flex align-items-center gap-1 gap-sm-3 mb-2">
										<h5 class="mb-0" style="font-weight: 700; color: #2d3436; cursor:pointer" @onclick="()=>ShowUserProfile(reaction.ReactingUserId)">@reaction.ReactingUserUserName</h5>
										<small>
											@reaction.CreatedDate.ToString("HH:mm dd/MM/yyyy")
										</small>
									</div>

									<div class="d-flex align-items-center justify-content-between">

										<div class="d-flex align-items-center gap-2">
											<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												@reaction.ReactingUserAge
											</span>
											@if (reaction.ReactingUserGenderId == (int)GenderEnum.Male)
											{
												<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
													<i class="bi bi-gender-male me-1"></i>Erkek
												</span>
											}
											else if (reaction.ReactingUserGenderId == (int)GenderEnum.Female)
											{
												<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
													<i class="bi bi-gender-female me-1"></i>Kadın
												</span>
											}
											@if (_currentUserId != reaction.ReactingUserId)
											{
												<a style="text-decoration: none; color:lightseagreen; cursor:pointer" @onclick="()=>SendMessageAsync(reaction.ReactingUserId)">
													<i class="bi bi-chat-right-heart-fill" style="font-size: 1.25rem;"></i>
												</a>
											}

										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
			}
		}
		else
		{
			<div class="alert alert-info" role="alert">
				Gönderiyi beğenmeyen yok.
			</div>
		}
	</ChildContent>
	<FooterContent>
		<button class="btn blue col text-white fw-medium" @onclick="_dislikeModel.Close">Kapat</button>
	</FooterContent>
</ModalComponent>

<ModalComponent @ref="_viewerModel" Title="Okuyanlar" TitleClass="mx-auto" ChildClass="mb-3">
	<ChildContent>

		@if (_viewers.Count == 0)
		{
			<div class="alert alert-info" role="alert">
				Gönderiyi beğenmeyen yok.
			</div>
		}
		else
		{
			@foreach (var viewer in _viewers.OrderByDescending(x => x.ReadDate))
			{

				<div class="card mb-4 shadow border-0" style="border-radius: 1rem;">
					<div class="d-flex flex-column gap-2 my-3 mx-2">
						<!-- Üst Bilgi Satırı -->
						<div class="d-flex align-items-center gap-2 gap-sm-4">
							<!-- Profil Fotoğrafı -->
							<img src="@(string.IsNullOrEmpty(viewer.PostViewerUserProfileImageUrl)? "/anonymousIcon.png" : viewer.PostViewerUserProfileImageUrl)"
								 class="profile-photo rounded-circle"
								 width="56" height="56"
								 style="object-fit: cover; border: 2px solid #ffffff; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
							<div class="d-flex flex-column">
								<div class="d-flex align-items-center gap-1 gap-md-3 mb-2">
									<h5 class="mb-0" style="font-weight: 700; color: #2d3436; cursor:pointer" @onclick="()=>ShowUserProfile(viewer.PostViewerUserId)">@viewer.PostViewerUserName</h5>
									<small>
										@viewer.ReadDate.ToString("HH:mm dd/MM/yyyy")
									</small>
								</div>

								<div class="d-flex align-items-center justify-content-between">

									<div class="d-flex align-items-center gap-2">
										<span style="background: #f2f2f2; color: #636e72; border: 1px solid #dee2e6; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
											@viewer.PostViewerAge
										</span>
										@if (viewer.PostViewerGenderId == (int)GenderEnum.Male)
										{
											<span style="background: rgba(9, 132, 227, 0.1); color: #0984e3; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-male me-1"></i>Erkek
											</span>
										}
										else if (viewer.PostViewerGenderId == (int)GenderEnum.Female)
										{
											<span style="background: rgba(232, 67, 147, 0.1); color: #e84393; border-radius: 20px; padding: 4px 12px; font-size: 0.8rem;">
												<i class="bi bi-gender-female me-1"></i>Kadın
											</span>
										}
										@if (_currentUserId != viewer.PostViewerUserId)
										{
											<a style="text-decoration: none; color:lightseagreen; cursor:pointer" @onclick="()=>SendMessageAsync(viewer.PostViewerUserId)">
												<i class="bi bi-chat-right-heart-fill" style="font-size: 1.25rem;"></i>
											</a>
										}


									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		}
	</ChildContent>
	<FooterContent>
		<button class="btn blue col text-white fw-medium" @onclick="_viewerModel.Close">Kapat</button>
	</FooterContent>
</ModalComponent>

<ModalComponent @ref="_sendMessageErrorModel" Title="Hata" TitleClass="mx-auto" ChildClass="mb-3">
	<ChildContent>

		<div class="alert alert-danger" role="alert">
			@_sendMessageError
		</div>

	</ChildContent>
	<FooterContent>
		<button class="btn blue col text-white fw-medium" @onclick="_sendMessageErrorModel.Close">Kapat</button>
	</FooterContent>
</ModalComponent>
@code {
	[Parameter]
	public int postId { get; set; }

	private PostDto? _postDto = new();
	private CommentsDto _commentModel = new();
	private CommentsDto _replyModel = new();
	private List<CommentsDto>? _comments = new();
	private List<ReactionDto> _reactions = new();
	private List<PostViewersDto>? _viewers = new();
	private ConversationDto? _conversationDto = new();
	private HubConnection? _reactionHubConnection;
	private HubConnection? _commentHubConnection;
	private HubConnection? _postViewHubConnection;
	private ModalComponent? _likesModel;
	private ModalComponent? _dislikeModel;
	private ModalComponent? _viewerModel;
	private ModalComponent? _sendMessageErrorModel;
	private Guid? _currentUserId;
	private List<string> allowedRoles = new List<string>
	{
		nameof(UserRoleEnum.SuperAdmin),
		nameof(UserRoleEnum.Admin),
		nameof(UserRoleEnum.Moderator),
		nameof(UserRoleEnum.SuperUser)
	};
	private int? _likeCount;
	private int? _dislikeCount;
	private int? _postViewCount;
	private int? _replyToCommentId;
	private bool _isApiBusy = false;
	private bool _isBusy = true;
	private bool _isPostOwner = false;
	private bool _isUserLoggedIn = false;
	private bool _isAlreadyLiked = false;
	private bool _isAlreadyDisliked = false;
	private bool _showComments = false;
	private bool _isCommentsHaveError = false;
	private bool _isPostHaveError = false;
	private string? _newCommentText;
	private string? _errorMessage;
	private string? _commentErrorMessage;
	private string? _replyText;
	private string? _userRoleId = null;
	private string? _sendMessageError;

	protected override async Task OnParametersSetAsync()
	{
		ResetPage();
		CheckUserLoggedIn();
		GetUserRoleId();
		IsUserPostOwner();

		await StartTasksWithUserRoleAsync();

		await StartReactionHubConnectionAsync();
		await StartPostViewHubConnectionAsync();
		await StartCommentHubConnectionAsync();

		if (allowedRoles.Contains(_userRoleId))
		{
			UpdatePostReactionCounts();
			UpdatePostReactionButtons();
		}

		await ReadPostAsync();


		_isBusy = false;

	}
	private void ResetPage()
	{
		_isPostHaveError = false;
		_isApiBusy = false;
		_isBusy = true;
		_showComments = false;
		_isCommentsHaveError = false;
		_commentErrorMessage = null;

	}
	private async Task StartReactionHubConnectionAsync()
	{
		_reactionHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/reactionhub")
					.WithAutomaticReconnect()
					.Build();



		if (!allowedRoles.Contains(_userRoleId))
		{
			_reactionHubConnection.On<int?, int, Guid>("PostLikedOrDislikedAnonymousAsync", (oldReactionId, newReactionId, userId) =>
			{
				UpdateReactions(oldReactionId, newReactionId, userId);
				StateHasChanged();
			});
		}
		else
		{
			_reactionHubConnection.On<ReactionDto, bool>("PostLikedOrDislikedAsync", (reaction, isReactionUpdated) =>
			{
				UpdateReactions(reaction, isReactionUpdated);
				StateHasChanged();
			});
		}

		await _reactionHubConnection.StartAsync();
		await _reactionHubConnection.SendAsync("JoinPostReactionGroup", postId);

	}
	private async Task StartPostViewHubConnectionAsync()
	{
		_postViewHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/postviewhub")
					.WithAutomaticReconnect()
					.Build();


		if (allowedRoles.Contains(_userRoleId))
		{
			_postViewHubConnection.On<int, PostViewersDto>("PostViewedAsync", (postId, postViewerDto) =>
			{
				if (_viewers == null)
					_viewers = new List<PostViewersDto>();

				_viewers.Add(postViewerDto);
				_postViewCount = _viewers.Count;

				StateHasChanged();
			});
		}
		else
		{
			_postViewHubConnection.On<int>("PostViewedAnonymousAsync", postId =>
			{
				_postViewCount++;
				StateHasChanged();

			});
		}

		await _postViewHubConnection.StartAsync();
		await _postViewHubConnection.SendAsync("JoinPostPostViewCountGroup", postId);

	}
	private async Task StartCommentHubConnectionAsync()
	{
		_commentHubConnection = new HubConnectionBuilder()
		.WithUrl("https://localhost:7292/commenthub")
		.WithAutomaticReconnect()
		.Build();

		_commentHubConnection.On<CommentsDto, bool>("CommentAddedOrDeletedAsync", (commentDto, isAdded) =>
		{

			if (isAdded)
			{
				if (_comments == null)
					_comments = new List<CommentsDto>
				();
				_comments.Insert(0, commentDto);
			}
			else
				_comments.Remove(commentDto);

			StateHasChanged();
		});

		_commentHubConnection.On<CommentsDto, bool>("ReplyAddedOrDeletedAsync", (replyDto, isAdded) =>
		{
			var comment = _comments.FirstOrDefault(c => c.Id == replyDto.ParentCommentId);
			if (comment != null)
			{
				if (comment.CommentReplies == null)
					_comments.FirstOrDefault(c => c.Id == replyDto.ParentCommentId).CommentReplies = new List<CommentsDto>
						();

				if (isAdded)
					_comments.FirstOrDefault(c => c.Id == replyDto.ParentCommentId)?.CommentReplies.Add(replyDto);
				else
					_comments.FirstOrDefault(c => c.Id == replyDto.ParentCommentId).CommentReplies.RemoveAll(r => r.Id == replyDto.Id);
			}

			StateHasChanged();
		});

		await _commentHubConnection.StartAsync();
		await _commentHubConnection.SendAsync("JoinPostCommentGroup", postId);
	}
	private async Task StartTasksWithUserRoleAsync()
	{
		if (!_isUserLoggedIn)
		{
			var postTask = PostApi.GetPostByIdAsync(postId);
			var commentsTask = CommentApi.GetPostCommentsAsync(postId);
			var postViewCountTask = PostViewApi.GetPostViewCountAsync(postId);
			var postLikeCountTask = ReactionApi.GetPostLikeCountAsync(postId);
			var postDislikeCountTask = ReactionApi.GetPostDislikeCountAsync(postId);

			await Task.WhenAll(postTask, commentsTask, postViewCountTask, postLikeCountTask, postDislikeCountTask);

			GetPost(postTask.Result);
			GetComments(commentsTask.Result);
			GetPostViewCount(postViewCountTask.Result);
			GetPostLikeCount(postLikeCountTask.Result);
			GetPostDislikeCount(postDislikeCountTask.Result);
		}
		else if (allowedRoles.Contains(_userRoleId))
		{
			var postTask = PostApi.GetPostByIdAsync(postId);
			var commentsTask = CommentApi.GetPostCommentsAsync(postId);
			var reactionsTask = ReactionApi.GetPostReactionsAsync(postId);
			var viewersTask = PostViewApi.GetPostsViewersAsync(postId);

			await Task.WhenAll(postTask, commentsTask, reactionsTask, viewersTask);

			GetPost(postTask.Result);
			GetComments(commentsTask.Result);
			GetReactions(reactionsTask.Result);
			GetPostViewers(viewersTask.Result);

		}
		else
		{
			var postTask = PostApi.GetPostByIdAsync(postId);
			var commentsTask = CommentApi.GetPostCommentsAsync(postId);
			var postLikeCountTask = ReactionApi.GetPostLikeCountAsync(postId);
			var postDislikeCountTask = ReactionApi.GetPostDislikeCountAsync(postId);
			var userReactionTask = ReactionApi.GetUserReactionTypeIdAsync(postId, _currentUserId);
			var postViewCountTask = PostViewApi.GetPostViewCountAsync(postId);

			await Task.WhenAll(postTask, commentsTask, postLikeCountTask, postDislikeCountTask, userReactionTask, postViewCountTask);

			GetPost(postTask.Result);
			GetComments(commentsTask.Result);
			GetPostLikeCount(postLikeCountTask.Result);
			GetPostDislikeCount(postDislikeCountTask.Result);
			GetUserReactionTypeId(userReactionTask.Result);
			GetPostViewCount(postViewCountTask.Result);
		}
	}

	private void CheckUserLoggedIn()
	{
		_isUserLoggedIn = AuthStateProvider.IsLoggedIn;
	}
	private void GetUserRoleId()
	{
		if (_isUserLoggedIn)
			_userRoleId = AuthStateProvider.User?.roleId;
		else
			_userRoleId = null;
	}
	private void IsUserPostOwner()
	{

		if (_postDto == null)
			return;
		if (_userRoleId == null)
			return;

		if (Guid.TryParse(AuthStateProvider.User?.id, out Guid parsedId))
		{
			_currentUserId = parsedId;
			_isPostOwner = _postDto.UserId == _currentUserId;
		}
		else
			_isPostOwner = false;
	}

	private void NavigateToLogin()
	{
		NavigationManager.NavigateTo("/login");
	}
	private void NavigateToPricing()
	{
		NavigationManager.NavigateTo("/pricing");
	}
	private void NavigateToSendConversation(Guid conversationId)
	{
		NavigationManager.NavigateTo($"/conversations/{conversationId}");
	}
	private async Task LikePostAsync()
	{
		if (_isApiBusy)
			return;
		_isApiBusy = true;
		if (!_isUserLoggedIn)
		{
			_isApiBusy = false;
			NavigateToLogin();
			return;
		}
		try
		{
			var result = await ReactionApi.LikePostAsync(postId, _currentUserId.Value);
			if (!result.IsSuccess)
			{
				_isPostHaveError = true;
				_errorMessage = result.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
		_isApiBusy = false;
	}
	private async Task DislikePostAsync()
	{
		if (_isApiBusy)
			return;
		_isApiBusy = true;
		if (!_isUserLoggedIn)
		{
			_isApiBusy = false;
			NavigateToLogin();
			return;
		}
		try
		{
			var result = await ReactionApi.DislikePostAsync(postId, _currentUserId.Value);
			if (!result.IsSuccess)
			{
				_isPostHaveError = true;
				_errorMessage = result.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
		_isApiBusy = false;

	}
	private void ReportPost()
	{
		if (!_isUserLoggedIn)
			NavigateToLogin();
	}
	private async Task SendMessageAsync(Guid receiverUserId)
	{

		if (!_isUserLoggedIn)
		{
			NavigateToLogin();
			return;
		}

		if (receiverUserId == _currentUserId)
			return;

		var response = await MessageApi.GetConversationDtoAsync(_currentUserId.Value, receiverUserId);
		_sendMessageErrorModel.Close();
		_sendMessageError = null;
		try
		{
			if (response.IsSuccess)
			{
				_conversationDto = response.Data;
				NavigateToSendConversation(_conversationDto.ConversationId);
			}
			else
			{
				var userRole = AuthStateProvider.User?.roleId;
				if (!allowedRoles.Contains(userRole))
					NavigateToPricing();
				else
				{
					_sendMessageErrorModel.Open();
					_sendMessageError = response.ErrorMessage;
				}

			}
		}
		catch (Exception ex)
		{
			_sendMessageErrorModel.Open();
			_sendMessageError = ex.Message;
		}







		// if (allowedRoles.Contains(userRole))
		// {
		// 	var response = await MessageApi.GetConversationDtoAsync(_currentUserId.Value, receiverUserId);
		// 	_sendMessageErrorModel.Close();
		// 	_sendMessageError = null;
		// 	try
		// 	{
		// 		if (response.IsSuccess)
		// 		{
		// 			_conversationDto = response.Data;
		// 			NavigateToSendConversation(_conversationDto.ConversationId);
		// 		}
		// 		else
		// 		{
		// 			_sendMessageErrorModel.Open();
		// 			_sendMessageError = response.ErrorMessage;
		// 		}
		// 	}
		// 	catch (Exception ex)
		// 	{
		// 		_sendMessageErrorModel.Open();
		// 		_sendMessageError = ex.Message;
		// 	}
		// }
		// else
		// 	NavigateToPricing();
	}
	private void ShowLikes()
	{
		if (!allowedRoles.Contains(_userRoleId))
		{
			NavigateToPricing();
			return;
		}

		_likesModel.Open();
	}
	private void ShowDislikes()
	{
		if (!allowedRoles.Contains(_userRoleId))
		{
			NavigateToPricing();
			return;
		}

		_dislikeModel.Open();
	}
	private void ShowComments()
	{
		_showComments = !_showComments;
	}
	private void ToggleReplyBox(int commentId)
	{
		if (_replyToCommentId == commentId)
		{
			_replyToCommentId = null;
			_replyText = string.Empty;
		}
		else
		{
			_replyToCommentId = commentId;
			_replyText = string.Empty;
		}
	}

	private void ShowViwers()
	{
		if (!allowedRoles.Contains(_userRoleId))
		{
			NavigateToPricing();
			return;
		}

		_viewerModel.Open();
	}
	private async Task ReadPostAsync()
	{
		if (!_isUserLoggedIn)
			return;

		var response = await PostViewApi.ReadPostAsync(postId, _currentUserId);
		try
		{
			if (!response.IsSuccess)
			{
				_isPostHaveError = true;
				_errorMessage = response.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void UpdatePostReactionCounts()
	{
		_likeCount = _reactions?.Count(r => r.ReactionTypeId == (int)ReactionTypeEnum.Like) ?? 0;
		_dislikeCount = _reactions?.Count(r => r.ReactionTypeId == (int)ReactionTypeEnum.Dislike) ?? 0;
	}
	private void UpdatePostReactionButtons()
	{
		_isAlreadyLiked = _reactions?.Any(r => r.ReactingUserId == _currentUserId && r.ReactionTypeId == (int)ReactionTypeEnum.Like) ?? false;
		_isAlreadyDisliked = _reactions?.Any(r => r.ReactingUserId == _currentUserId && r.ReactionTypeId == (int)ReactionTypeEnum.Dislike) ?? false;
	}
	private void UpdateReactions(ReactionDto reaction, bool? isReactionUpdated)
	{
		if (isReactionUpdated == true)
		{
			var index = _reactions?.FindIndex(r => r.ReactingUserId == reaction.ReactingUserId) ?? -1;
			if (index >= 0 && _reactions != null)
				_reactions[index] = reaction;
		}
		else
			_reactions?.Add(reaction);

		UpdatePostReactionCounts();
		UpdatePostReactionButtons();
	}

	private void UpdateReactions(int? oldReactionId, int newReactionId, Guid UserId)
	{
		var oldLikeCount = _likeCount;
		var oldDislikeCount = _dislikeCount;
		if (oldReactionId == null || oldReactionId == (int)ReactionTypeEnum.Cancelled)
		{
			if (newReactionId == (int)ReactionTypeEnum.Like)
				_likeCount++;
			else
				_dislikeCount++;
		}
		else if (oldReactionId == (int)ReactionTypeEnum.Like)
		{
			if (newReactionId == (int)ReactionTypeEnum.Dislike)
			{
				_likeCount--;
				_dislikeCount++;
			}
			else
				_likeCount--;
		}
		else if (oldReactionId == (int)ReactionTypeEnum.Dislike)
		{
			if (newReactionId == (int)ReactionTypeEnum.Like)
			{
				_dislikeCount--;
				_likeCount++;
			}
			else
				_dislikeCount--;
		}


		if (_currentUserId == UserId)
		{
			if (newReactionId == (int)ReactionTypeEnum.Like)
			{
				_isAlreadyLiked = true;
				_isAlreadyDisliked = false;
			}
			else if (newReactionId == (int)ReactionTypeEnum.Dislike)
			{
				_isAlreadyLiked = false;
				_isAlreadyDisliked = true;
			}
			else
			{
				_isAlreadyLiked = false;
				_isAlreadyDisliked = false;
			}

		}
	}

	private string GetUserGenderName(int genderId)
	{
		switch (genderId)
		{
			case (int)GenderEnum.Male:
				return "Erkek";
			case (int)GenderEnum.Female:
				return "Kadın";
			default:
				return "";
		}
	}
	private void GetUserReactionTypeId(ApiResponses<int?> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{

				if (response.Data == (int)ReactionTypeEnum.Like)
					_isAlreadyLiked = true;
				else if (response.Data == (int)ReactionTypeEnum.Dislike)
					_isAlreadyDisliked = true;
				else
				{
					_isAlreadyLiked = false;
					_isAlreadyDisliked = false;
				}


				if (_errorMessage != null)
					_errorMessage = null;
				_isPostHaveError = false;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetPost(ApiResponses<PostDto> response)
	{
		try
		{
			if (response.IsSuccess)
			{
				_postDto = response.Data;
				_errorMessage = null;
				_isPostHaveError = false;

			}
			else
			{
				_postDto = null;
				_isPostHaveError = true;
				_errorMessage = response.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetReactions(ApiResponses<List<ReactionDto>> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_reactions = response.Data;
				if (_errorMessage != null)
					_errorMessage = null;
				_isPostHaveError = false;
			}
			else
			{
				_reactions = null;
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetPostLikeCount(ApiResponses<int> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_likeCount = response.Data;
				if (_errorMessage != null)
					_errorMessage = null;
				_isPostHaveError = false;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetPostDislikeCount(ApiResponses<int> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_dislikeCount = response.Data;
				_isPostHaveError = false;

				if (_errorMessage != null)
					_errorMessage = null;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetPostViewCount(ApiResponses<int> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_postViewCount = response.Data;
				_isPostHaveError = false;

				if (_errorMessage != null)
					_errorMessage = null;
			}
			else
			{
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}
		}
		catch (Exception ex)
		{
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}
	private void GetComments(ApiResponses<List<CommentsDto>> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_comments = response.Data
					.OrderByDescending(c => c.CreatedDate)
					.ToList();
				_commentErrorMessage = null;
			}
			else
			{
				_comments = null;
				_commentErrorMessage = response.ErrorMessage;
			}
			_isCommentsHaveError = false;
		}
		catch (Exception ex)
		{
			_isCommentsHaveError = true;
			_commentErrorMessage = ex.Message;
		}
	}
	private void GetPostViewers(ApiResponses<List<PostViewersDto>> response)
	{
		if (_isPostHaveError)
			return;
		try
		{
			if (response.IsSuccess)
			{
				_viewers = response.Data;
				_postViewCount = _viewers.Count;
				_errorMessage = null;
				_isPostHaveError = false;
			}
			else
			{
				_viewers = null;
				_errorMessage = response.ErrorMessage;
				_isPostHaveError = true;
			}

		}
		catch (Exception ex)
		{
			_viewers = null;
			_isPostHaveError = true;
			_errorMessage = ex.Message;
		}
	}

	private void ShowUserProfile()
	{
		NavigationManager.NavigateTo($"/profile/{_postDto.UserId}");
	}
	private void ShowUserProfile(Guid UserId)
	{
		NavigationManager.NavigateTo($"/profile/{UserId}");
	}

	private async Task AddCommentAsync()
	{
		if (_isApiBusy)
			return;
		_isApiBusy = true;
		if (!_isUserLoggedIn)
		{
			_isApiBusy = false;

			NavigateToLogin();
			return;
		}
		if (string.IsNullOrWhiteSpace(_commentModel.Content))
		{
			_isApiBusy = false;
			return;
		}

		_newCommentText = _commentModel.Content.Trim();
		if (string.IsNullOrWhiteSpace(_newCommentText))
		{
			_isApiBusy = false;
			return;
		}

		try
		{
			var result = await CommentApi.AddCommentAsync(postId, (Guid)_currentUserId, _commentModel);
			if (!result.IsSuccess)
			{
				_isCommentsHaveError = true;
				_commentErrorMessage = result.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isCommentsHaveError = true;
			_commentErrorMessage = ex.Message;
		}
		_commentModel.Content = string.Empty;
		_isApiBusy = false;

	}

	private async Task AddReplyAsync(int parentCommentId)
	{
		if (_isApiBusy)
			return;

		_isApiBusy = true;

		if (!_isUserLoggedIn)
		{
			_isApiBusy = false;
			NavigateToLogin();
			return;
		}
		if (string.IsNullOrWhiteSpace(_replyModel.Content))
		{
			_isApiBusy = false;
			return;
		}
		var _newReplyText = _replyModel.Content.Trim();
		if (string.IsNullOrWhiteSpace(_newReplyText))
		{
			_isApiBusy = false;
			return;
		}

		try
		{
			var result = await CommentApi.AddReplyCommentAsync(postId, parentCommentId, (Guid)_currentUserId, _replyModel);
			if (!result.IsSuccess)
			{
				_isCommentsHaveError = true;
				_commentErrorMessage = result.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_isCommentsHaveError = true;
			_commentErrorMessage = ex.Message;
		}
		_replyModel.Content = string.Empty;
		_replyToCommentId = null;
		_isApiBusy = false;
	}

}


