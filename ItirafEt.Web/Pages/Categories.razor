@page "/categories/{CategoryId:int}"

@inject ICategoryApi CategoryApi
@inject NavigationManager NavigationManager


<div class="col-md-8 col mx-auto">

	<h3>Gönderiler</h3>
	@if (_isError)
	{
		<div class="alert alert-danger m-3" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
		<div class="row g-2 my-3">
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByDate" autocomplete="off"
				@onchange="@(() => SetOrderAsync(true,false,false))" checked>
				<label class="btn btn-outline-success w-100" for="orderByDate">En Yeniler</label>
			</div>
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByView" autocomplete="off"
				@onchange="@(() => SetOrderAsync(false,true,false))">
				<label class="btn btn-outline-success w-100 px-0" for="orderByView">En Çok Okunanlar</label>
			</div>
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByLike" autocomplete="off"
				@onchange="@(() => SetOrderAsync(false,false,true))">
				<label class="btn btn-outline-success w-100 px-0" for="orderByLike">En Çok Beğenilenler</label>
			</div>
		</div>

		if (_posts != null)
		{
			foreach (var post in _posts)
			{
				<div class="card mb-3">
					<div class="card-body" style="cursor:pointer" @onclick="@(() => NavigateToPost(post.PostId))">
						<h5 class="card-title">@post.PostTitle</h5>
						<p class="card-text">@post.PostContentReview</p>
						<p class="card-text"><small class="text-muted">@post.PostCreatorUserName | @post.PostCreatedDate.ToString("dd.MM.yyyy HH:mm")</small></p>
						<p class="card-text"><small class="text-muted"> Okunma Sayısı :@post.PostViewCount</small></p>						
						<p class="card-text"><small class="text-muted"> Beğenilme Sayısı :@post.PostLikeCount</small></p>
					</div>
				</div>
			}
		}

		@if (_isLoading)
		{
			<div class="d-flex justify-content-center align-items-center" style="height: 20vh;">
				<div class="spinner-border text-primary fs-5" role="status" style="width: 3rem; height: 3rem;">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		else if (!_hasMore)
		{
			<p class="text-center text-muted">@_errorMessage</p>
		}
	}


</div>
@code {
	[Parameter] public int CategoryId { get; set; }

	private List<PostInfoDto> _posts = new();
	private List<PostInfoDto> _postsDateOrdered = new();
	private List<PostInfoDto> _postsViewCountOrdered = new();
	private List<PostInfoDto> _postsLikeCountOrdered = new();
	private HubConnection _postViewHubConnection;
	private int _currentPage = 1;
	private int _pageSize = 10;
	private bool _isLoading = false;
	private bool _hasMore = true;
	private bool _isError = false;
	private bool _isDateOrdered = true;
	private bool _isCountOrdered = false;
	private bool _isLikeOrdered = false;


	private string? _errorMessage = null;


	[Inject] IJSRuntime JSRuntime { get; set; }

	// Sayfa ilk yüklendiğinde veya CategoryId değiştiğinde bu metod çalışacak.
	protected override async Task OnParametersSetAsync()
	{
		// Kategori değiştiğinde gönderileri sıfırlayıp yeniden yükleyeceğiz
		ResetParameters();
		await StartPostViewHubConnectionAsync();
		await LoadMorePosts();
	}

	private void ResetParameters()
	{
		_posts.Clear();
		_postsDateOrdered.Clear();
		_postsViewCountOrdered.Clear();
		_postsLikeCountOrdered.Clear();
		_currentPage = 1;
		_hasMore = true;
		_isError = false;
		_errorMessage = null;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var dotNetRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("addScrollListener", dotNetRef);
		}
	}

	[JSInvokable]
	public async Task OnScrollToBottom()
	{
		await LoadMorePosts();
	}

	private async Task LoadMorePosts()
	{
		if (_isLoading || !_hasMore) return;

		if (_isDateOrdered)
		{
			_isLoading = true;
			_errorMessage = null;
			try
			{
				var response = await CategoryApi.GetCategoryPostsOrderByDateAsync(CategoryId, _currentPage, _pageSize);

				if (response is not null && response.IsSuccess && response.Data?.Any() == true)
				{
					_postsDateOrdered.AddRange(response.Data);
					_posts = _postsDateOrdered;
					_currentPage++;
				}
				else
				{
					_hasMore = false;
					_errorMessage = response?.ErrorMessage;
				}

				_isLoading = false;
				StateHasChanged();
			}
			catch (Exception ex)
			{

				throw;
			}
		}
		else if (_isCountOrdered)
		{
			_isLoading = true;
			_errorMessage = null;
			try
			{
				var response = await CategoryApi.GetCategoryPostsOrderByViewCountAsync(CategoryId, _currentPage, _pageSize);

				if (response is not null && response.IsSuccess && response.Data?.Any() == true)
				{
					_postsViewCountOrdered.AddRange(response.Data);
					_posts = _postsViewCountOrdered;
					_currentPage++;
				}
				else
				{
					_hasMore = false;
					_errorMessage = response?.ErrorMessage;
				}

				_isLoading = false;
				StateHasChanged();
			}
			catch (Exception ex)
			{

				throw;
			}
		}
		else
		{
			_isLoading = true;
			_errorMessage = null;
			try
			{
				var response = await CategoryApi.GetCategoryPostsOrderByLikeCountAsync(CategoryId, _currentPage, _pageSize);

				if (response is not null && response.IsSuccess && response.Data?.Any() == true)
				{
					_postsLikeCountOrdered.AddRange(response.Data);
					_posts = _postsLikeCountOrdered;
					_currentPage++;
				}
				else
				{
					_hasMore = false;
					_errorMessage = response?.ErrorMessage;
				}

				_isLoading = false;
				StateHasChanged();
			}
			catch (Exception ex)
			{

				throw;
			}
		}

	}
	private void NavigateToPost(int postId)
	{
		NavigationManager.NavigateTo($"/posts/{postId}");
	}

	private async Task StartPostViewHubConnectionAsync()
	{
		_postViewHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/postviewhub")
					.WithAutomaticReconnect()
					.Build();

		_postViewHubConnection.On<int, int, int>("PostRead", (categoryId, updatedPostId, viewCount) =>
		{
			foreach (var post in _posts)
			{
				if (post.PostId == updatedPostId)
				{
					post.PostViewCount = viewCount;
					StateHasChanged();
					break;
				}
			}
		});
		await _postViewHubConnection.StartAsync();
		await _postViewHubConnection.SendAsync("JoinCategoryPostCountGroup", CategoryId);
	}

	private async Task SetOrderAsync(bool orderByDate, bool orderByViewCount, bool orderByLikeCount)
	{
		_isDateOrdered = orderByDate;
		_isCountOrdered = orderByViewCount;
		_isLikeOrdered = orderByLikeCount;
		_currentPage = 1;
		_hasMore = true;
		_posts.Clear();
		await LoadMorePosts();
	}
}
