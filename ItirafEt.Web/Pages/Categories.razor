@page "/categories/{CategoryId:int}"

@inject ICategoryApi CategoryApi
@inject NavigationManager NavigationManager


<div class="col-md-8 col mx-auto">

	<h3>Gönderiler</h3>
	@if (_isError)
	{
		<div class="alert alert-danger m-3" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
		if (_posts !=null)
		{
			foreach (var post in _posts)
			{
				<div class="card mb-3">
					<div class="card-body" style="cursor:pointer" @onclick="@(() => NavigateToPost(post.PostId))">
						<h5 class="card-title">@post.PostTitle</h5>
						<p class="card-text">@post.PostContentReview</p>
						<p class="card-text"><small class="text-muted">@post.PostCreatorUserName | @post.PostCreatedDate.ToString("dd.MM.yyyy")</small></p>
					</div>
				</div>
			}
		}

		@if (_isLoading)
		{
			<p class="text-center">Yükleniyor...</p>
		}
		else if (!_hasMore)
		{
			<p class="text-center text-muted">@_errorMessage</p>
		}
	}


</div>
@code {
	[Parameter] public int CategoryId { get; set; }

	private List<PostInfoDto> _posts = new();
	private int _currentPage = 1;
	private int _pageSize = 10;
	private bool _isLoading = false;
	private bool _hasMore = true;
	private bool _isError = false;
	private string? _errorMessage = null;


	[Inject] IJSRuntime JSRuntime { get; set; }

	// Sayfa ilk yüklendiğinde veya CategoryId değiştiğinde bu metod çalışacak.
	protected override async Task OnParametersSetAsync()
	{
		// Kategori değiştiğinde gönderileri sıfırlayıp yeniden yükleyeceğiz
		ResetParameters();
		await LoadMorePosts();
	}

	private void ResetParameters()
	{
		_posts.Clear();
		_currentPage = 1;
		_hasMore = true;
		_isError = false;
		_errorMessage = null;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var dotNetRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("addScrollListener", dotNetRef);
		}
	}

	[JSInvokable]
	public async Task OnScrollToBottom()
	{
		await LoadMorePosts();
	}

	private async Task LoadMorePosts()
	{
		if (_isLoading || !_hasMore) return;

		_isLoading = true;
		_errorMessage = null;
		try
		{
			var response = await CategoryApi.GetCategoryPostsAsync(CategoryId, _currentPage, _pageSize);

			if (response is not null && response.IsSuccess && response.Data?.Any() == true)
			{
				_posts.AddRange(response.Data);
				_currentPage++;
			}
			else
			{
				_hasMore = false;
				_errorMessage = response?.ErrorMessage;
			}

			_isLoading = false;
			StateHasChanged();
		}
		catch (Exception ex)
		{

			throw;
		}

	}

	private void NavigateToPost(int postId)
	{
		NavigationManager.NavigateTo($"/posts/{postId}");
	}
}
