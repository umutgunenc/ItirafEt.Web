@page "/categories/{CategoryId:int}"

@inject ICategoryApi CategoryApi
@inject NavigationManager NavigationManager
@inject InfiniteScrollState<PostInfoDto> State
@inject ILocalStorageService LocalStorage
@inject IScrollHelper ScrollHelper
@inject IJSRuntime JSRuntime 

<div class="col-md-8 col mx-auto">

	<h3>Gönderiler</h3>
	@if (_isError)
	{
		<div class="alert alert-danger m-3" role="alert">
			@_errorMessage
		</div>
	}
	else
	{
@* 		<div class="row g-2 my-3">
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByDate" autocomplete="off"
				@onchange="@(() => SetOrderAsync(true,false,false))" checked="@_isDateOrdered">
				<label class="btn btn-outline-success w-100" for="orderByDate">En Yeniler</label>
			</div>
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByView" autocomplete="off"
				@onchange="@(() => SetOrderAsync(false,true,false))" checked="@_isCountOrdered">
				<label class="btn btn-outline-success w-100 px-0" for="orderByView">En Çok Okunanlar</label>
			</div>
			<div class="col-12 col-lg">
				<input type="radio" class="btn-check" name="orderOptions" id="orderByLike" autocomplete="off"
				@onchange="@(() => SetOrderAsync(false,false,true))" checked="@_isLikeOrdered">
				<label class="btn btn-outline-success w-100 px-0" for="orderByLike">En Çok Beğenilenler</label>
			</div>
		</div> *@

		<div class="btn-group btn-group-sm w-100 my-3" role="group" aria-label="Sıralama Seçenekleri">
			<input type="radio"
				   class="btn-check"
				   name="orderOptions"
				   id="orderByDate"
				   autocomplete="off"
				   @onchange="() => SetOrderAsync(true, false, false)"
				   checked="@_isDateOrdered" />
			<label class="btn btn-outline-primary rounded-start"
				   for="orderByDate">
				<i class="bi bi-clock-fill me-1"></i>
				En Yeniler
			</label>

			<input type="radio"
				   class="btn-check"
				   name="orderOptions"
				   id="orderByView"
				   autocomplete="off"
				   @onchange="() => SetOrderAsync(false, true, false)"
				   checked="@_isCountOrdered" />
			<label class="btn btn-outline-primary"
				   for="orderByView">
				<i class="bi bi-eye-fill me-1"></i>
				En Çok Okunanlar
			</label>

			<input type="radio"
				   class="btn-check"
				   name="orderOptions"
				   id="orderByLike"
				   autocomplete="off"
				   @onchange="() => SetOrderAsync(false, false, true)"
				   checked="@_isLikeOrdered" />
			<label class="btn btn-outline-primary rounded-end"
				   for="orderByLike">
				<i class="bi bi-heart-fill me-1"></i>
				En Çok Beğenilenler
			</label>
		</div>

		if (State.Items != null)
		{
			foreach (var post in State.Items)
			{
				<div class="card mb-3 shadow-hover text-bg-light" role="button" @onclick="@(() => NavigateToPost(post.PostId))">
					<div class="card-body ">
						<div class="d-flex justify-content-end align-items-end mb-3">
							<small class="text-muted">@post.PostCreatedDate.ToString("dd MMM yyyy HH:mm")</small>
						</div>

						<h5 class="card-title text-bg mb-3">@post.PostTitle</h5>

						<p class="card-text text-secondary text-truncate-3 mb-4">@post.PostContentReview</p>

						<div class="d-flex justify-content-between align-items-center">
							<div class="d-flex align-items-center">
								<img src="@post.PostCreatorProfilPicture" alt="avatar" class="rounded-circle me-2" style="width:32px;height:32px;">
								<span class="text-dark fw-medium">@post.PostCreatorUserName</span>
							</div>
							<div class="d-flex gap-3">
								<span class="text-muted">
									<i class="bi bi-eye me-1"></i>@post.PostViewCount
								</span>
								<span class="text-muted">
									<i class="bi bi-heart me-1"></i>@post.PostLikeCount
								</span>
							</div>
						</div>
					</div>
				</div>
			}
		}

		@if (_isLoading)
		{
			<div class="d-flex justify-content-center align-items-center" style="height: 20vh;">
				<div class="spinner-border text-primary fs-5" role="status" style="width: 3rem; height: 3rem;">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
		}
		else if (!State.HasMore)
		{
			<p class="text-center text-muted">@_errorMessage</p>
		}
	}

</div>



@code {
	[Parameter] public int CategoryId { get; set; }


	private HubConnection _postViewHubConnection;
	private int _pageSize = 10;
	private bool _isLoading = false;
	private bool _isError = false;
	private bool _isDateOrdered = true;
	private bool _isCountOrdered = false;
	private bool _isLikeOrdered = false;
	private double _scrollY = 0;
	private string? _errorMessage = null;


	protected override async Task OnParametersSetAsync()
	{
		var cachedItems = await LocalStorage.GetItemAsync<List<PostInfoDto>>($"cat-{CategoryId}-items");
		var cachedCursor = await LocalStorage.GetItemAsync<CursorDto>($"cat-{CategoryId}-cursor");

		if (cachedItems?.Any() == true && cachedCursor != null)
			await GetItemsFromCacheAsync(cachedItems, cachedCursor);
		else
		{
			ResetParameters();
			await StartPostViewHubConnectionAsync();
			await LoadMorePostsAsync();
		}

	}

	protected override async Task OnInitializedAsync()
	{
		var cachedItems = await LocalStorage.GetItemAsync<List<PostInfoDto>>($"cat-{CategoryId}-items");
		var cachedCursor = await LocalStorage.GetItemAsync<CursorDto>($"cat-{CategoryId}-cursor");

		if (cachedItems?.Any() == true && cachedCursor != null)
			await GetItemsFromCacheAsync(cachedItems, cachedCursor);
		else
			await LoadMorePostsAsync();

		await StartPostViewHubConnectionAsync();
	}

	private void ResetParameters()
	{
		ResetCache();

		_isError = false;
		_errorMessage = null;
	}

	private async Task GetItemsFromCacheAsync(List<PostInfoDto> postInfoDtos, CursorDto cursorDto)
	{
		State.Items = postInfoDtos;
		State.CurrentPage = cursorDto.Page;
		State.ScrollY = cursorDto.ScrollY;
		await ScrollHelper.SetScrollYAsync(State.ScrollY);
		_isDateOrdered = await LocalStorage.GetItemAsync<bool>($"cat-{CategoryId}-dateOrdered");
		_isCountOrdered = await LocalStorage.GetItemAsync<bool>($"cat-{CategoryId}-countOrdered");
		_isLikeOrdered = await LocalStorage.GetItemAsync<bool>($"cat-{CategoryId}-likeOrderede");
	}
	private async Task SetItemsToCacheAsync()
	{
		var scrollY = await JSRuntime.InvokeAsync<double>("scrollHelper.getScrollY");
		State.ScrollY = scrollY;
		await LocalStorage.SetItemAsync($"cat-{CategoryId}-items", State.Items);
		var cursor = new CursorDto { Page = State.CurrentPage, ScrollY = scrollY };
		await LocalStorage.SetItemAsync($"cat-{CategoryId}-cursor", cursor);
		await LocalStorage.SetItemAsync<bool>($"cat-{CategoryId}-dateOrdered", _isDateOrdered);
		await LocalStorage.SetItemAsync<bool>($"cat-{CategoryId}-countOrdered", _isCountOrdered);
		await LocalStorage.SetItemAsync<bool>($"cat-{CategoryId}-likeOrderede", _isLikeOrdered);
	}
	private void ResetCache()
	{
		State.Items.Clear();
		State.CurrentPage = 1;
		State.HasMore = true;
		State.ScrollY = 0;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var dotNetRef = DotNetObjectReference.Create(this);
			await JSRuntime.InvokeVoidAsync("addScrollListener", dotNetRef);

			if (State.ScrollY > 0)
				await JSRuntime.InvokeVoidAsync("eval", $"setTimeout(() => window.scrollTo(0, {State.ScrollY}), 0);");
		}

	}

	[JSInvokable]
	public async Task OnScrollToBottom()
	{
		await LoadMorePostsAsync();
	}

	[JSInvokable]
	public Task OnScroll(double scrollY)
	{
		State.ScrollY = scrollY;
		return Task.CompletedTask;
	}

	private Task<ApiResponses<List<PostInfoDto>>> GetPostsPageAsync()
	{
		if (_isDateOrdered)
			return CategoryApi.GetCategoryPostsOrderByDateAsync(CategoryId, State.CurrentPage, _pageSize);
		else if (_isCountOrdered)
			return CategoryApi.GetCategoryPostsOrderByViewCountAsync(CategoryId, State.CurrentPage, _pageSize);
		else
			return CategoryApi.GetCategoryPostsOrderByLikeCountAsync(CategoryId, State.CurrentPage, _pageSize);
	}

	private async Task LoadMorePostsAsync()
	{
		if (_isLoading || !State.HasMore) return;
		_isLoading = true;
		_errorMessage = null;

		try
		{
			var response = await GetPostsPageAsync();
			if (response?.IsSuccess == true && response.Data?.Any() == true)
			{
				State.Items.AddRange(response.Data);
				State.CurrentPage++;
				await SetItemsToCacheAsync();
			}
			else
			{
				State.HasMore = false;
				_errorMessage = response?.ErrorMessage;
			}
		}
		catch (Exception ex)
		{
			_errorMessage = ex.Message;
			State.HasMore = false;
		}

		_isLoading = false;
		StateHasChanged();
	}

	private async Task NavigateToPost(int postId)
	{
		await SetItemsToCacheAsync();

		NavigationManager.NavigateTo($"/posts/{postId}");
	}

	private async Task StartPostViewHubConnectionAsync()
	{
		_postViewHubConnection = new HubConnectionBuilder()
					.WithUrl("https://localhost:7292/postviewhub")
					.WithAutomaticReconnect()
					.Build();

		_postViewHubConnection.On<int, int, int>("PostRead", (categoryId, updatedPostId, viewCount) =>
		{
			foreach (var post in State.Items)
			{
				if (post.PostId == updatedPostId)
				{
					post.PostViewCount = viewCount;
					StateHasChanged();
					break;
				}
			}
		});
		await _postViewHubConnection.StartAsync();
		await _postViewHubConnection.SendAsync("JoinCategoryPostCountGroup", CategoryId);
	}

	private async Task SetOrderAsync(bool orderByDate, bool orderByViewCount, bool orderByLikeCount)
	{
		_isDateOrdered = orderByDate;
		_isCountOrdered = orderByViewCount;
		_isLikeOrdered = orderByLikeCount;
		ResetCache();
		await LocalStorage.RemoveItemAsync($"cat-{CategoryId}-items");
		await LocalStorage.RemoveItemAsync($"cat-{CategoryId}-cursor");
		await LoadMorePostsAsync();
	}
}
